                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcd
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _font
                                     12 	.globl _lcdTest
                                     13 	.globl _generateRandom
                                     14 	.globl _glcdPlotIrValue
                                     15 	.globl _glcdInit
                                     16 	.globl _glcdUpdateStatus
                                     17 	.globl _glcdUpdateBpm
                                     18 	.globl _glcdUpdateSpo2
                                     19 	.globl _itoa
                                     20 	.globl _glcdDrawGraph
                                     21 	.globl _absolute
                                     22 	.globl _glcdWriteString
                                     23 	.globl _gcldClearString
                                     24 	.globl _glcdWriteChar
                                     25 	.globl _glcdClear
                                     26 	.globl _setPixel
                                     27 	.globl _glcdRead
                                     28 	.globl _glcdWrite
                                     29 	.globl _glcdGoToAddr
                                     30 	.globl _glcdControllerSelect
                                     31 	.globl _gLcdWriteToRegister
                                     32 	.globl _busyWait
                                     33 	.globl _delay
                                     34 	.globl _printf_tiny
                                     35 	.globl _printf
                                     36 	.globl _P5_7
                                     37 	.globl _P5_6
                                     38 	.globl _P5_5
                                     39 	.globl _P5_4
                                     40 	.globl _P5_3
                                     41 	.globl _P5_2
                                     42 	.globl _P5_1
                                     43 	.globl _P5_0
                                     44 	.globl _P4_7
                                     45 	.globl _P4_6
                                     46 	.globl _P4_5
                                     47 	.globl _P4_4
                                     48 	.globl _P4_3
                                     49 	.globl _P4_2
                                     50 	.globl _P4_1
                                     51 	.globl _P4_0
                                     52 	.globl _PX0L
                                     53 	.globl _PT0L
                                     54 	.globl _PX1L
                                     55 	.globl _PT1L
                                     56 	.globl _PSL
                                     57 	.globl _PT2L
                                     58 	.globl _PPCL
                                     59 	.globl _EC
                                     60 	.globl _CCF0
                                     61 	.globl _CCF1
                                     62 	.globl _CCF2
                                     63 	.globl _CCF3
                                     64 	.globl _CCF4
                                     65 	.globl _CR
                                     66 	.globl _CF
                                     67 	.globl _TF2
                                     68 	.globl _EXF2
                                     69 	.globl _RCLK
                                     70 	.globl _TCLK
                                     71 	.globl _EXEN2
                                     72 	.globl _TR2
                                     73 	.globl _C_T2
                                     74 	.globl _CP_RL2
                                     75 	.globl _T2CON_7
                                     76 	.globl _T2CON_6
                                     77 	.globl _T2CON_5
                                     78 	.globl _T2CON_4
                                     79 	.globl _T2CON_3
                                     80 	.globl _T2CON_2
                                     81 	.globl _T2CON_1
                                     82 	.globl _T2CON_0
                                     83 	.globl _PT2
                                     84 	.globl _ET2
                                     85 	.globl _CY
                                     86 	.globl _AC
                                     87 	.globl _F0
                                     88 	.globl _RS1
                                     89 	.globl _RS0
                                     90 	.globl _OV
                                     91 	.globl _F1
                                     92 	.globl _P
                                     93 	.globl _PS
                                     94 	.globl _PT1
                                     95 	.globl _PX1
                                     96 	.globl _PT0
                                     97 	.globl _PX0
                                     98 	.globl _RD
                                     99 	.globl _WR
                                    100 	.globl _T1
                                    101 	.globl _T0
                                    102 	.globl _INT1
                                    103 	.globl _INT0
                                    104 	.globl _TXD
                                    105 	.globl _RXD
                                    106 	.globl _P3_7
                                    107 	.globl _P3_6
                                    108 	.globl _P3_5
                                    109 	.globl _P3_4
                                    110 	.globl _P3_3
                                    111 	.globl _P3_2
                                    112 	.globl _P3_1
                                    113 	.globl _P3_0
                                    114 	.globl _EA
                                    115 	.globl _ES
                                    116 	.globl _ET1
                                    117 	.globl _EX1
                                    118 	.globl _ET0
                                    119 	.globl _EX0
                                    120 	.globl _P2_7
                                    121 	.globl _P2_6
                                    122 	.globl _P2_5
                                    123 	.globl _P2_4
                                    124 	.globl _P2_3
                                    125 	.globl _P2_2
                                    126 	.globl _P2_1
                                    127 	.globl _P2_0
                                    128 	.globl _SM0
                                    129 	.globl _SM1
                                    130 	.globl _SM2
                                    131 	.globl _REN
                                    132 	.globl _TB8
                                    133 	.globl _RB8
                                    134 	.globl _TI
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _EECON
                                    161 	.globl _KBF
                                    162 	.globl _KBE
                                    163 	.globl _KBLS
                                    164 	.globl _BRL
                                    165 	.globl _BDRCON
                                    166 	.globl _T2MOD
                                    167 	.globl _SPDAT
                                    168 	.globl _SPSTA
                                    169 	.globl _SPCON
                                    170 	.globl _SADEN
                                    171 	.globl _SADDR
                                    172 	.globl _WDTPRG
                                    173 	.globl _WDTRST
                                    174 	.globl _P5
                                    175 	.globl _P4
                                    176 	.globl _IPH1
                                    177 	.globl _IPL1
                                    178 	.globl _IPH0
                                    179 	.globl _IPL0
                                    180 	.globl _IEN1
                                    181 	.globl _IEN0
                                    182 	.globl _CMOD
                                    183 	.globl _CL
                                    184 	.globl _CH
                                    185 	.globl _CCON
                                    186 	.globl _CCAPM4
                                    187 	.globl _CCAPM3
                                    188 	.globl _CCAPM2
                                    189 	.globl _CCAPM1
                                    190 	.globl _CCAPM0
                                    191 	.globl _CCAP4L
                                    192 	.globl _CCAP3L
                                    193 	.globl _CCAP2L
                                    194 	.globl _CCAP1L
                                    195 	.globl _CCAP0L
                                    196 	.globl _CCAP4H
                                    197 	.globl _CCAP3H
                                    198 	.globl _CCAP2H
                                    199 	.globl _CCAP1H
                                    200 	.globl _CCAP0H
                                    201 	.globl _CKCON1
                                    202 	.globl _CKCON0
                                    203 	.globl _CKRL
                                    204 	.globl _AUXR1
                                    205 	.globl _AUXR
                                    206 	.globl _TH2
                                    207 	.globl _TL2
                                    208 	.globl _RCAP2H
                                    209 	.globl _RCAP2L
                                    210 	.globl _T2CON
                                    211 	.globl _B
                                    212 	.globl _ACC
                                    213 	.globl _PSW
                                    214 	.globl _IP
                                    215 	.globl _P3
                                    216 	.globl _IE
                                    217 	.globl _P2
                                    218 	.globl _SBUF
                                    219 	.globl _SCON
                                    220 	.globl _P1
                                    221 	.globl _TH1
                                    222 	.globl _TH0
                                    223 	.globl _TL1
                                    224 	.globl _TL0
                                    225 	.globl _TMOD
                                    226 	.globl _TCON
                                    227 	.globl _PCON
                                    228 	.globl _DPH
                                    229 	.globl _DPL
                                    230 	.globl _SP
                                    231 	.globl _P0
                                    232 	.globl _generateRandom_PARM_2
                                    233 	.globl _previousReadingY
                                    234 	.globl _previousReadingX
                                    235 	.globl _itoa_PARM_2
                                    236 	.globl _glcdDrawGraph_PARM_4
                                    237 	.globl _glcdDrawGraph_PARM_3
                                    238 	.globl _glcdDrawGraph_PARM_2
                                    239 	.globl _absolute_PARM_2
                                    240 	.globl _glcdWriteString_PARM_3
                                    241 	.globl _glcdWriteString_PARM_2
                                    242 	.globl _gcldClearString_PARM_3
                                    243 	.globl _gcldClearString_PARM_2
                                    244 	.globl _glcdWriteChar_PARM_3
                                    245 	.globl _glcdWriteChar_PARM_2
                                    246 	.globl _setPixel_PARM_3
                                    247 	.globl _setPixel_PARM_2
                                    248 	.globl _glcdWrite_PARM_3
                                    249 	.globl _glcdWrite_PARM_2
                                    250 	.globl _glcdGoToAddr_PARM_2
                                    251 	.globl _gLcdWriteToRegister_PARM_2
                                    252 ;--------------------------------------------------------
                                    253 ; special function registers
                                    254 ;--------------------------------------------------------
                                    255 	.area RSEG    (ABS,DATA)
      000000                        256 	.org 0x0000
                           000080   257 _P0	=	0x0080
                           000081   258 _SP	=	0x0081
                           000082   259 _DPL	=	0x0082
                           000083   260 _DPH	=	0x0083
                           000087   261 _PCON	=	0x0087
                           000088   262 _TCON	=	0x0088
                           000089   263 _TMOD	=	0x0089
                           00008A   264 _TL0	=	0x008a
                           00008B   265 _TL1	=	0x008b
                           00008C   266 _TH0	=	0x008c
                           00008D   267 _TH1	=	0x008d
                           000090   268 _P1	=	0x0090
                           000098   269 _SCON	=	0x0098
                           000099   270 _SBUF	=	0x0099
                           0000A0   271 _P2	=	0x00a0
                           0000A8   272 _IE	=	0x00a8
                           0000B0   273 _P3	=	0x00b0
                           0000B8   274 _IP	=	0x00b8
                           0000D0   275 _PSW	=	0x00d0
                           0000E0   276 _ACC	=	0x00e0
                           0000F0   277 _B	=	0x00f0
                           0000C8   278 _T2CON	=	0x00c8
                           0000CA   279 _RCAP2L	=	0x00ca
                           0000CB   280 _RCAP2H	=	0x00cb
                           0000CC   281 _TL2	=	0x00cc
                           0000CD   282 _TH2	=	0x00cd
                           00008E   283 _AUXR	=	0x008e
                           0000A2   284 _AUXR1	=	0x00a2
                           000097   285 _CKRL	=	0x0097
                           00008F   286 _CKCON0	=	0x008f
                           0000AF   287 _CKCON1	=	0x00af
                           0000FA   288 _CCAP0H	=	0x00fa
                           0000FB   289 _CCAP1H	=	0x00fb
                           0000FC   290 _CCAP2H	=	0x00fc
                           0000FD   291 _CCAP3H	=	0x00fd
                           0000FE   292 _CCAP4H	=	0x00fe
                           0000EA   293 _CCAP0L	=	0x00ea
                           0000EB   294 _CCAP1L	=	0x00eb
                           0000EC   295 _CCAP2L	=	0x00ec
                           0000ED   296 _CCAP3L	=	0x00ed
                           0000EE   297 _CCAP4L	=	0x00ee
                           0000DA   298 _CCAPM0	=	0x00da
                           0000DB   299 _CCAPM1	=	0x00db
                           0000DC   300 _CCAPM2	=	0x00dc
                           0000DD   301 _CCAPM3	=	0x00dd
                           0000DE   302 _CCAPM4	=	0x00de
                           0000D8   303 _CCON	=	0x00d8
                           0000F9   304 _CH	=	0x00f9
                           0000E9   305 _CL	=	0x00e9
                           0000D9   306 _CMOD	=	0x00d9
                           0000A8   307 _IEN0	=	0x00a8
                           0000B1   308 _IEN1	=	0x00b1
                           0000B8   309 _IPL0	=	0x00b8
                           0000B7   310 _IPH0	=	0x00b7
                           0000B2   311 _IPL1	=	0x00b2
                           0000B3   312 _IPH1	=	0x00b3
                           0000C0   313 _P4	=	0x00c0
                           0000E8   314 _P5	=	0x00e8
                           0000A6   315 _WDTRST	=	0x00a6
                           0000A7   316 _WDTPRG	=	0x00a7
                           0000A9   317 _SADDR	=	0x00a9
                           0000B9   318 _SADEN	=	0x00b9
                           0000C3   319 _SPCON	=	0x00c3
                           0000C4   320 _SPSTA	=	0x00c4
                           0000C5   321 _SPDAT	=	0x00c5
                           0000C9   322 _T2MOD	=	0x00c9
                           00009B   323 _BDRCON	=	0x009b
                           00009A   324 _BRL	=	0x009a
                           00009C   325 _KBLS	=	0x009c
                           00009D   326 _KBE	=	0x009d
                           00009E   327 _KBF	=	0x009e
                           0000D2   328 _EECON	=	0x00d2
                                    329 ;--------------------------------------------------------
                                    330 ; special function bits
                                    331 ;--------------------------------------------------------
                                    332 	.area RSEG    (ABS,DATA)
      000000                        333 	.org 0x0000
                           000080   334 _P0_0	=	0x0080
                           000081   335 _P0_1	=	0x0081
                           000082   336 _P0_2	=	0x0082
                           000083   337 _P0_3	=	0x0083
                           000084   338 _P0_4	=	0x0084
                           000085   339 _P0_5	=	0x0085
                           000086   340 _P0_6	=	0x0086
                           000087   341 _P0_7	=	0x0087
                           000088   342 _IT0	=	0x0088
                           000089   343 _IE0	=	0x0089
                           00008A   344 _IT1	=	0x008a
                           00008B   345 _IE1	=	0x008b
                           00008C   346 _TR0	=	0x008c
                           00008D   347 _TF0	=	0x008d
                           00008E   348 _TR1	=	0x008e
                           00008F   349 _TF1	=	0x008f
                           000090   350 _P1_0	=	0x0090
                           000091   351 _P1_1	=	0x0091
                           000092   352 _P1_2	=	0x0092
                           000093   353 _P1_3	=	0x0093
                           000094   354 _P1_4	=	0x0094
                           000095   355 _P1_5	=	0x0095
                           000096   356 _P1_6	=	0x0096
                           000097   357 _P1_7	=	0x0097
                           000098   358 _RI	=	0x0098
                           000099   359 _TI	=	0x0099
                           00009A   360 _RB8	=	0x009a
                           00009B   361 _TB8	=	0x009b
                           00009C   362 _REN	=	0x009c
                           00009D   363 _SM2	=	0x009d
                           00009E   364 _SM1	=	0x009e
                           00009F   365 _SM0	=	0x009f
                           0000A0   366 _P2_0	=	0x00a0
                           0000A1   367 _P2_1	=	0x00a1
                           0000A2   368 _P2_2	=	0x00a2
                           0000A3   369 _P2_3	=	0x00a3
                           0000A4   370 _P2_4	=	0x00a4
                           0000A5   371 _P2_5	=	0x00a5
                           0000A6   372 _P2_6	=	0x00a6
                           0000A7   373 _P2_7	=	0x00a7
                           0000A8   374 _EX0	=	0x00a8
                           0000A9   375 _ET0	=	0x00a9
                           0000AA   376 _EX1	=	0x00aa
                           0000AB   377 _ET1	=	0x00ab
                           0000AC   378 _ES	=	0x00ac
                           0000AF   379 _EA	=	0x00af
                           0000B0   380 _P3_0	=	0x00b0
                           0000B1   381 _P3_1	=	0x00b1
                           0000B2   382 _P3_2	=	0x00b2
                           0000B3   383 _P3_3	=	0x00b3
                           0000B4   384 _P3_4	=	0x00b4
                           0000B5   385 _P3_5	=	0x00b5
                           0000B6   386 _P3_6	=	0x00b6
                           0000B7   387 _P3_7	=	0x00b7
                           0000B0   388 _RXD	=	0x00b0
                           0000B1   389 _TXD	=	0x00b1
                           0000B2   390 _INT0	=	0x00b2
                           0000B3   391 _INT1	=	0x00b3
                           0000B4   392 _T0	=	0x00b4
                           0000B5   393 _T1	=	0x00b5
                           0000B6   394 _WR	=	0x00b6
                           0000B7   395 _RD	=	0x00b7
                           0000B8   396 _PX0	=	0x00b8
                           0000B9   397 _PT0	=	0x00b9
                           0000BA   398 _PX1	=	0x00ba
                           0000BB   399 _PT1	=	0x00bb
                           0000BC   400 _PS	=	0x00bc
                           0000D0   401 _P	=	0x00d0
                           0000D1   402 _F1	=	0x00d1
                           0000D2   403 _OV	=	0x00d2
                           0000D3   404 _RS0	=	0x00d3
                           0000D4   405 _RS1	=	0x00d4
                           0000D5   406 _F0	=	0x00d5
                           0000D6   407 _AC	=	0x00d6
                           0000D7   408 _CY	=	0x00d7
                           0000AD   409 _ET2	=	0x00ad
                           0000BD   410 _PT2	=	0x00bd
                           0000C8   411 _T2CON_0	=	0x00c8
                           0000C9   412 _T2CON_1	=	0x00c9
                           0000CA   413 _T2CON_2	=	0x00ca
                           0000CB   414 _T2CON_3	=	0x00cb
                           0000CC   415 _T2CON_4	=	0x00cc
                           0000CD   416 _T2CON_5	=	0x00cd
                           0000CE   417 _T2CON_6	=	0x00ce
                           0000CF   418 _T2CON_7	=	0x00cf
                           0000C8   419 _CP_RL2	=	0x00c8
                           0000C9   420 _C_T2	=	0x00c9
                           0000CA   421 _TR2	=	0x00ca
                           0000CB   422 _EXEN2	=	0x00cb
                           0000CC   423 _TCLK	=	0x00cc
                           0000CD   424 _RCLK	=	0x00cd
                           0000CE   425 _EXF2	=	0x00ce
                           0000CF   426 _TF2	=	0x00cf
                           0000DF   427 _CF	=	0x00df
                           0000DE   428 _CR	=	0x00de
                           0000DC   429 _CCF4	=	0x00dc
                           0000DB   430 _CCF3	=	0x00db
                           0000DA   431 _CCF2	=	0x00da
                           0000D9   432 _CCF1	=	0x00d9
                           0000D8   433 _CCF0	=	0x00d8
                           0000AE   434 _EC	=	0x00ae
                           0000BE   435 _PPCL	=	0x00be
                           0000BD   436 _PT2L	=	0x00bd
                           0000BC   437 _PSL	=	0x00bc
                           0000BB   438 _PT1L	=	0x00bb
                           0000BA   439 _PX1L	=	0x00ba
                           0000B9   440 _PT0L	=	0x00b9
                           0000B8   441 _PX0L	=	0x00b8
                           0000C0   442 _P4_0	=	0x00c0
                           0000C1   443 _P4_1	=	0x00c1
                           0000C2   444 _P4_2	=	0x00c2
                           0000C3   445 _P4_3	=	0x00c3
                           0000C4   446 _P4_4	=	0x00c4
                           0000C5   447 _P4_5	=	0x00c5
                           0000C6   448 _P4_6	=	0x00c6
                           0000C7   449 _P4_7	=	0x00c7
                           0000E8   450 _P5_0	=	0x00e8
                           0000E9   451 _P5_1	=	0x00e9
                           0000EA   452 _P5_2	=	0x00ea
                           0000EB   453 _P5_3	=	0x00eb
                           0000EC   454 _P5_4	=	0x00ec
                           0000ED   455 _P5_5	=	0x00ed
                           0000EE   456 _P5_6	=	0x00ee
                           0000EF   457 _P5_7	=	0x00ef
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; internal ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area DSEG    (DATA)
      000000                        467 _glcdDrawGraph_sloc0_1_0:
      000000                        468 	.ds 2
      000002                        469 _glcdDrawGraph_sloc1_1_0:
      000002                        470 	.ds 2
      000004                        471 _glcdDrawGraph_sloc2_1_0:
      000004                        472 	.ds 2
      000006                        473 _itoa_sloc0_1_0:
      000006                        474 	.ds 3
      000009                        475 _glcdPlotIrValue_sloc0_1_0:
      000009                        476 	.ds 2
                                    477 ;--------------------------------------------------------
                                    478 ; overlayable items in internal ram
                                    479 ;--------------------------------------------------------
                                    480 ;--------------------------------------------------------
                                    481 ; indirectly addressable internal ram data
                                    482 ;--------------------------------------------------------
                                    483 	.area ISEG    (DATA)
                                    484 ;--------------------------------------------------------
                                    485 ; absolute internal ram data
                                    486 ;--------------------------------------------------------
                                    487 	.area IABS    (ABS,DATA)
                                    488 	.area IABS    (ABS,DATA)
                                    489 ;--------------------------------------------------------
                                    490 ; bit data
                                    491 ;--------------------------------------------------------
                                    492 	.area BSEG    (BIT)
                                    493 ;--------------------------------------------------------
                                    494 ; paged external ram data
                                    495 ;--------------------------------------------------------
                                    496 	.area PSEG    (PAG,XDATA)
                                    497 ;--------------------------------------------------------
                                    498 ; external ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area XSEG    (XDATA)
      000000                        501 _delay_timeUs_65536_17:
      000000                        502 	.ds 2
      000002                        503 _gLcdWriteToRegister_PARM_2:
      000002                        504 	.ds 1
      000003                        505 _gLcdWriteToRegister_addr_65536_22:
      000003                        506 	.ds 1
      000004                        507 _gLcdWriteToRegister_ptr_65536_23:
      000004                        508 	.ds 2
      000006                        509 _glcdControllerSelect_column_65536_30:
      000006                        510 	.ds 1
      000007                        511 _glcdGoToAddr_PARM_2:
      000007                        512 	.ds 1
      000008                        513 _glcdGoToAddr_column_65536_34:
      000008                        514 	.ds 1
      000009                        515 _glcdWrite_PARM_2:
      000009                        516 	.ds 1
      00000A                        517 _glcdWrite_PARM_3:
      00000A                        518 	.ds 1
      00000B                        519 _glcdWrite_column_65536_38:
      00000B                        520 	.ds 1
      00000C                        521 _glcdRead_column_65536_43:
      00000C                        522 	.ds 1
      00000D                        523 _glcdRead_ptr_65536_44:
      00000D                        524 	.ds 2
      00000F                        525 _setPixel_PARM_2:
      00000F                        526 	.ds 1
      000010                        527 _setPixel_PARM_3:
      000010                        528 	.ds 1
      000011                        529 _setPixel_row_65536_49:
      000011                        530 	.ds 1
      000012                        531 _setPixel_pageByte_65538_52:
      000012                        532 	.ds 1
      000013                        533 _glcdWriteChar_PARM_2:
      000013                        534 	.ds 1
      000014                        535 _glcdWriteChar_PARM_3:
      000014                        536 	.ds 1
      000015                        537 _glcdWriteChar_column_65536_60:
      000015                        538 	.ds 1
      000016                        539 _gcldClearString_PARM_2:
      000016                        540 	.ds 1
      000017                        541 _gcldClearString_PARM_3:
      000017                        542 	.ds 1
      000018                        543 _gcldClearString_column_65536_64:
      000018                        544 	.ds 1
      000019                        545 _glcdWriteString_PARM_2:
      000019                        546 	.ds 1
      00001A                        547 _glcdWriteString_PARM_3:
      00001A                        548 	.ds 3
      00001D                        549 _glcdWriteString_column_65536_68:
      00001D                        550 	.ds 1
      00001E                        551 _absolute_PARM_2:
      00001E                        552 	.ds 2
      000020                        553 _absolute_value1_65536_71:
      000020                        554 	.ds 2
      000022                        555 _absolute_result_65536_72:
      000022                        556 	.ds 1
      000023                        557 _glcdDrawGraph_PARM_2:
      000023                        558 	.ds 2
      000025                        559 _glcdDrawGraph_PARM_3:
      000025                        560 	.ds 2
      000027                        561 _glcdDrawGraph_PARM_4:
      000027                        562 	.ds 2
      000029                        563 _glcdDrawGraph_x1_65536_75:
      000029                        564 	.ds 2
      00002B                        565 _glcdDrawGraph_temp_131072_77:
      00002B                        566 	.ds 2
      00002D                        567 _glcdDrawGraph_temp_131072_78:
      00002D                        568 	.ds 2
      00002F                        569 _glcdDrawGraph_error_65537_79:
      00002F                        570 	.ds 2
      000031                        571 _glcdDrawGraph_yStep_65537_79:
      000031                        572 	.ds 2
      000033                        573 _glcdDrawGraph_y_65538_82:
      000033                        574 	.ds 2
      000035                        575 _itoa_PARM_2:
      000035                        576 	.ds 3
      000038                        577 _itoa_val_65536_88:
      000038                        578 	.ds 1
      000039                        579 _itoa_digits_65537_91:
      000039                        580 	.ds 3
      00003C                        581 _glcdUpdateSpo2_oxygen_65536_96:
      00003C                        582 	.ds 1
      00003D                        583 _glcdUpdateSpo2_oxygenLevel_65536_97:
      00003D                        584 	.ds 5
      000042                        585 _glcdUpdateBpm_bpm_65536_98:
      000042                        586 	.ds 1
      000043                        587 _glcdUpdateBpm_bpmString_65536_99:
      000043                        588 	.ds 4
      000047                        589 _glcdUpdateStatus_status_65536_100:
      000047                        590 	.ds 3
      00004A                        591 _previousReadingX::
      00004A                        592 	.ds 1
      00004B                        593 _previousReadingY::
      00004B                        594 	.ds 1
      00004C                        595 _glcdPlotIrValue_IrValue_65536_103:
      00004C                        596 	.ds 1
      00004D                        597 _glcdPlotIrValue_x_65536_104:
      00004D                        598 	.ds 1
      00004E                        599 _generateRandom_PARM_2:
      00004E                        600 	.ds 2
      000050                        601 _generateRandom_min_65536_109:
      000050                        602 	.ds 2
                                    603 ;--------------------------------------------------------
                                    604 ; absolute external ram data
                                    605 ;--------------------------------------------------------
                                    606 	.area XABS    (ABS,XDATA)
                                    607 ;--------------------------------------------------------
                                    608 ; external initialized ram data
                                    609 ;--------------------------------------------------------
                                    610 	.area XISEG   (XDATA)
                                    611 	.area HOME    (CODE)
                                    612 	.area GSINIT0 (CODE)
                                    613 	.area GSINIT1 (CODE)
                                    614 	.area GSINIT2 (CODE)
                                    615 	.area GSINIT3 (CODE)
                                    616 	.area GSINIT4 (CODE)
                                    617 	.area GSINIT5 (CODE)
                                    618 	.area GSINIT  (CODE)
                                    619 	.area GSFINAL (CODE)
                                    620 	.area CSEG    (CODE)
                                    621 ;--------------------------------------------------------
                                    622 ; global & static initialisations
                                    623 ;--------------------------------------------------------
                                    624 	.area HOME    (CODE)
                                    625 	.area GSINIT  (CODE)
                                    626 	.area GSFINAL (CODE)
                                    627 	.area GSINIT  (CODE)
                                    628 ;--------------------------------------------------------
                                    629 ; Home
                                    630 ;--------------------------------------------------------
                                    631 	.area HOME    (CODE)
                                    632 	.area HOME    (CODE)
                                    633 ;--------------------------------------------------------
                                    634 ; code
                                    635 ;--------------------------------------------------------
                                    636 	.area CSEG    (CODE)
                                    637 ;------------------------------------------------------------
                                    638 ;Allocation info for local variables in function 'delay'
                                    639 ;------------------------------------------------------------
                                    640 ;timeUs                    Allocated with name '_delay_timeUs_65536_17'
                                    641 ;i                         Allocated with name '_delay_i_131072_19'
                                    642 ;------------------------------------------------------------
                                    643 ;	src/lcd.c:77: void delay(const uint16_t timeUs)
                                    644 ;	-----------------------------------------
                                    645 ;	 function delay
                                    646 ;	-----------------------------------------
      000000                        647 _delay:
                           000007   648 	ar7 = 0x07
                           000006   649 	ar6 = 0x06
                           000005   650 	ar5 = 0x05
                           000004   651 	ar4 = 0x04
                           000003   652 	ar3 = 0x03
                           000002   653 	ar2 = 0x02
                           000001   654 	ar1 = 0x01
                           000000   655 	ar0 = 0x00
      000000 AF 83            [24]  656 	mov	r7,dph
      000002 E5 82            [12]  657 	mov	a,dpl
      000004 90r00r00         [24]  658 	mov	dptr,#_delay_timeUs_65536_17
      000007 F0               [24]  659 	movx	@dptr,a
      000008 EF               [12]  660 	mov	a,r7
      000009 A3               [24]  661 	inc	dptr
      00000A F0               [24]  662 	movx	@dptr,a
                                    663 ;	src/lcd.c:79: for (uint16_t i = 0; i < timeUs; i++)
      00000B 90r00r00         [24]  664 	mov	dptr,#_delay_timeUs_65536_17
      00000E E0               [24]  665 	movx	a,@dptr
      00000F FE               [12]  666 	mov	r6,a
      000010 A3               [24]  667 	inc	dptr
      000011 E0               [24]  668 	movx	a,@dptr
      000012 FF               [12]  669 	mov	r7,a
      000013 7C 00            [12]  670 	mov	r4,#0x00
      000015 7D 00            [12]  671 	mov	r5,#0x00
      000017                        672 00103$:
      000017 C3               [12]  673 	clr	c
      000018 EC               [12]  674 	mov	a,r4
      000019 9E               [12]  675 	subb	a,r6
      00001A ED               [12]  676 	mov	a,r5
      00001B 9F               [12]  677 	subb	a,r7
      00001C 50 08            [24]  678 	jnc	00105$
                                    679 ;	src/lcd.c:81: __asm__("nop");
      00001E 00               [12]  680 	nop
                                    681 ;	src/lcd.c:79: for (uint16_t i = 0; i < timeUs; i++)
      00001F 0C               [12]  682 	inc	r4
      000020 BC 00 F4         [24]  683 	cjne	r4,#0x00,00103$
      000023 0D               [12]  684 	inc	r5
      000024 80 F1            [24]  685 	sjmp	00103$
      000026                        686 00105$:
                                    687 ;	src/lcd.c:83: }
      000026 22               [24]  688 	ret
                                    689 ;------------------------------------------------------------
                                    690 ;Allocation info for local variables in function 'busyWait'
                                    691 ;------------------------------------------------------------
                                    692 ;ptr                       Allocated with name '_busyWait_ptr_65536_21'
                                    693 ;------------------------------------------------------------
                                    694 ;	src/lcd.c:89: void busyWait()
                                    695 ;	-----------------------------------------
                                    696 ;	 function busyWait
                                    697 ;	-----------------------------------------
      000027                        698 _busyWait:
                                    699 ;	src/lcd.c:94: while ((*ptr & BUSY_MASK) != 0);
      000027                        700 00101$:
      000027 90 80 0E         [24]  701 	mov	dptr,#0x800e
      00002A E0               [24]  702 	movx	a,@dptr
      00002B 20 E7 F9         [24]  703 	jb	acc.7,00101$
                                    704 ;	src/lcd.c:95: }
      00002E 22               [24]  705 	ret
                                    706 ;------------------------------------------------------------
                                    707 ;Allocation info for local variables in function 'gLcdWriteToRegister'
                                    708 ;------------------------------------------------------------
                                    709 ;val                       Allocated with name '_gLcdWriteToRegister_PARM_2'
                                    710 ;addr                      Allocated with name '_gLcdWriteToRegister_addr_65536_22'
                                    711 ;ptr                       Allocated with name '_gLcdWriteToRegister_ptr_65536_23'
                                    712 ;------------------------------------------------------------
                                    713 ;	src/lcd.c:103: void gLcdWriteToRegister(MemoryAddress addr, uint8_t val)
                                    714 ;	-----------------------------------------
                                    715 ;	 function gLcdWriteToRegister
                                    716 ;	-----------------------------------------
      00002F                        717 _gLcdWriteToRegister:
      00002F E5 82            [12]  718 	mov	a,dpl
      000031 90r00r03         [24]  719 	mov	dptr,#_gLcdWriteToRegister_addr_65536_22
      000034 F0               [24]  720 	movx	@dptr,a
                                    721 ;	src/lcd.c:107: if (addr == COMMAND_WRITE)
      000035 E0               [24]  722 	movx	a,@dptr
      000036 FF               [12]  723 	mov	r7,a
      000037 70 0C            [24]  724 	jnz	00114$
                                    725 ;	src/lcd.c:110: ptr = (__xdata uint8_t *)COMMAND_WRITE_ADDR;
      000039 90r00r04         [24]  726 	mov	dptr,#_gLcdWriteToRegister_ptr_65536_23
      00003C 74 0C            [12]  727 	mov	a,#0x0c
      00003E F0               [24]  728 	movx	@dptr,a
      00003F 74 80            [12]  729 	mov	a,#0x80
      000041 A3               [24]  730 	inc	dptr
      000042 F0               [24]  731 	movx	@dptr,a
      000043 80 62            [24]  732 	sjmp	00115$
      000045                        733 00114$:
                                    734 ;	src/lcd.c:112: else if (addr == COMMAND_WRITE_LEFT)
      000045 BF 01 0B         [24]  735 	cjne	r7,#0x01,00111$
                                    736 ;	src/lcd.c:114: ptr = (__xdata uint8_t *)COMMAND_WRITE_LEFT_ADDR;
      000048 90r00r04         [24]  737 	mov	dptr,#_gLcdWriteToRegister_ptr_65536_23
      00004B 74 08            [12]  738 	mov	a,#0x08
      00004D F0               [24]  739 	movx	@dptr,a
      00004E C4               [12]  740 	swap	a
      00004F A3               [24]  741 	inc	dptr
      000050 F0               [24]  742 	movx	@dptr,a
      000051 80 54            [24]  743 	sjmp	00115$
      000053                        744 00111$:
                                    745 ;	src/lcd.c:116: else if (addr == COMMAND_WRITE_RIGHT)
      000053 BF 02 0C         [24]  746 	cjne	r7,#0x02,00108$
                                    747 ;	src/lcd.c:118: ptr = (__xdata uint8_t *)COMMAND_WRITE_RIGHT_ADDR;
      000056 90r00r04         [24]  748 	mov	dptr,#_gLcdWriteToRegister_ptr_65536_23
      000059 74 04            [12]  749 	mov	a,#0x04
      00005B F0               [24]  750 	movx	@dptr,a
      00005C 74 80            [12]  751 	mov	a,#0x80
      00005E A3               [24]  752 	inc	dptr
      00005F F0               [24]  753 	movx	@dptr,a
      000060 80 45            [24]  754 	sjmp	00115$
      000062                        755 00108$:
                                    756 ;	src/lcd.c:120: else if (addr == DATA_WRITE_LEFT)
      000062 BF 05 0C         [24]  757 	cjne	r7,#0x05,00105$
                                    758 ;	src/lcd.c:122: ptr = (__xdata uint8_t *)DATA_WRITE_LEFT_ADDR;
      000065 90r00r04         [24]  759 	mov	dptr,#_gLcdWriteToRegister_ptr_65536_23
      000068 74 09            [12]  760 	mov	a,#0x09
      00006A F0               [24]  761 	movx	@dptr,a
      00006B 74 80            [12]  762 	mov	a,#0x80
      00006D A3               [24]  763 	inc	dptr
      00006E F0               [24]  764 	movx	@dptr,a
      00006F 80 36            [24]  765 	sjmp	00115$
      000071                        766 00105$:
                                    767 ;	src/lcd.c:124: else if (addr == DATA_WRITE_RIGHT)
      000071 BF 06 0C         [24]  768 	cjne	r7,#0x06,00102$
                                    769 ;	src/lcd.c:126: ptr = (__xdata uint8_t *)DATA_WRITE_RIGHT_ADDR;
      000074 90r00r04         [24]  770 	mov	dptr,#_gLcdWriteToRegister_ptr_65536_23
      000077 74 05            [12]  771 	mov	a,#0x05
      000079 F0               [24]  772 	movx	@dptr,a
      00007A 74 80            [12]  773 	mov	a,#0x80
      00007C A3               [24]  774 	inc	dptr
      00007D F0               [24]  775 	movx	@dptr,a
      00007E 80 27            [24]  776 	sjmp	00115$
      000080                        777 00102$:
                                    778 ;	src/lcd.c:130: ERROR_LOG("Unknown Memory Addr! = %d", addr);
      000080 7E 00            [12]  779 	mov	r6,#0x00
      000082 C0 07            [24]  780 	push	ar7
      000084 C0 06            [24]  781 	push	ar6
      000086 74rE0            [12]  782 	mov	a,#___str_0
      000088 C0 E0            [24]  783 	push	acc
      00008A 74s01            [12]  784 	mov	a,#(___str_0 >> 8)
      00008C C0 E0            [24]  785 	push	acc
      00008E 12r00r00         [24]  786 	lcall	_printf_tiny
      000091 E5 81            [12]  787 	mov	a,sp
      000093 24 FC            [12]  788 	add	a,#0xfc
      000095 F5 81            [12]  789 	mov	sp,a
      000097 74r0A            [12]  790 	mov	a,#___str_1
      000099 C0 E0            [24]  791 	push	acc
      00009B 74s02            [12]  792 	mov	a,#(___str_1 >> 8)
      00009D C0 E0            [24]  793 	push	acc
      00009F 12r00r00         [24]  794 	lcall	_printf_tiny
      0000A2 15 81            [12]  795 	dec	sp
      0000A4 15 81            [12]  796 	dec	sp
                                    797 ;	src/lcd.c:131: return;
      0000A6 22               [24]  798 	ret
      0000A7                        799 00115$:
                                    800 ;	src/lcd.c:134: *ptr = val;
      0000A7 90r00r04         [24]  801 	mov	dptr,#_gLcdWriteToRegister_ptr_65536_23
      0000AA E0               [24]  802 	movx	a,@dptr
      0000AB FE               [12]  803 	mov	r6,a
      0000AC A3               [24]  804 	inc	dptr
      0000AD E0               [24]  805 	movx	a,@dptr
      0000AE FF               [12]  806 	mov	r7,a
      0000AF 90r00r02         [24]  807 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      0000B2 E0               [24]  808 	movx	a,@dptr
      0000B3 8E 82            [24]  809 	mov	dpl,r6
      0000B5 8F 83            [24]  810 	mov	dph,r7
      0000B7 F0               [24]  811 	movx	@dptr,a
                                    812 ;	src/lcd.c:135: }
      0000B8 22               [24]  813 	ret
                                    814 ;------------------------------------------------------------
                                    815 ;Allocation info for local variables in function 'glcdControllerSelect'
                                    816 ;------------------------------------------------------------
                                    817 ;column                    Allocated with name '_glcdControllerSelect_column_65536_30'
                                    818 ;------------------------------------------------------------
                                    819 ;	src/lcd.c:143: uint8_t glcdControllerSelect(uint8_t column)
                                    820 ;	-----------------------------------------
                                    821 ;	 function glcdControllerSelect
                                    822 ;	-----------------------------------------
      0000B9                        823 _glcdControllerSelect:
      0000B9 E5 82            [12]  824 	mov	a,dpl
      0000BB 90r00r06         [24]  825 	mov	dptr,#_glcdControllerSelect_column_65536_30
      0000BE F0               [24]  826 	movx	@dptr,a
                                    827 ;	src/lcd.c:146: if (column < MAX_COLUMN_PER_CONTROLLER)
      0000BF E0               [24]  828 	movx	a,@dptr
      0000C0 FF               [12]  829 	mov	r7,a
      0000C1 BF 40 00         [24]  830 	cjne	r7,#0x40,00110$
      0000C4                        831 00110$:
      0000C4 50 04            [24]  832 	jnc	00102$
                                    833 ;	src/lcd.c:148: return COLUMN_SELECT_LEFT;
      0000C6 75 82 03         [24]  834 	mov	dpl,#0x03
      0000C9 22               [24]  835 	ret
      0000CA                        836 00102$:
                                    837 ;	src/lcd.c:152: return COLUMN_SELECT_RIGHT;
      0000CA 75 82 04         [24]  838 	mov	dpl,#0x04
                                    839 ;	src/lcd.c:154: }
      0000CD 22               [24]  840 	ret
                                    841 ;------------------------------------------------------------
                                    842 ;Allocation info for local variables in function 'glcdGoToAddr'
                                    843 ;------------------------------------------------------------
                                    844 ;page                      Allocated with name '_glcdGoToAddr_PARM_2'
                                    845 ;column                    Allocated with name '_glcdGoToAddr_column_65536_34'
                                    846 ;controllerSelect          Allocated with name '_glcdGoToAddr_controllerSelect_65536_35'
                                    847 ;------------------------------------------------------------
                                    848 ;	src/lcd.c:162: void glcdGoToAddr(uint8_t column, uint8_t page)
                                    849 ;	-----------------------------------------
                                    850 ;	 function glcdGoToAddr
                                    851 ;	-----------------------------------------
      0000CE                        852 _glcdGoToAddr:
      0000CE E5 82            [12]  853 	mov	a,dpl
      0000D0 90r00r08         [24]  854 	mov	dptr,#_glcdGoToAddr_column_65536_34
      0000D3 F0               [24]  855 	movx	@dptr,a
                                    856 ;	src/lcd.c:164: uint8_t controllerSelect = glcdControllerSelect(column);
      0000D4 E0               [24]  857 	movx	a,@dptr
      0000D5 FF               [12]  858 	mov	r7,a
      0000D6 F5 82            [12]  859 	mov	dpl,a
      0000D8 C0 07            [24]  860 	push	ar7
      0000DA 12r00rB9         [24]  861 	lcall	_glcdControllerSelect
      0000DD AE 82            [24]  862 	mov	r6,dpl
      0000DF D0 07            [24]  863 	pop	ar7
                                    864 ;	src/lcd.c:166: if (controllerSelect == COLUMN_SELECT_LEFT)
      0000E1 BE 03 27         [24]  865 	cjne	r6,#0x03,00104$
                                    866 ;	src/lcd.c:169: gLcdWriteToRegister(COMMAND_WRITE_LEFT, PAGE_MASK | page);
      0000E4 90r00r07         [24]  867 	mov	dptr,#_glcdGoToAddr_PARM_2
      0000E7 E0               [24]  868 	movx	a,@dptr
      0000E8 90r00r02         [24]  869 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      0000EB 44 B8            [12]  870 	orl	a,#0xb8
      0000ED F0               [24]  871 	movx	@dptr,a
      0000EE 75 82 01         [24]  872 	mov	dpl,#0x01
      0000F1 C0 07            [24]  873 	push	ar7
      0000F3 12r00r2F         [24]  874 	lcall	_gLcdWriteToRegister
                                    875 ;	src/lcd.c:170: busyWait();
      0000F6 12r00r27         [24]  876 	lcall	_busyWait
      0000F9 D0 07            [24]  877 	pop	ar7
                                    878 ;	src/lcd.c:173: gLcdWriteToRegister(COMMAND_WRITE_LEFT, Y_MASK | column);
      0000FB 90r00r02         [24]  879 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      0000FE 74 40            [12]  880 	mov	a,#0x40
      000100 4F               [12]  881 	orl	a,r7
      000101 F0               [24]  882 	movx	@dptr,a
      000102 75 82 01         [24]  883 	mov	dpl,#0x01
      000105 12r00r2F         [24]  884 	lcall	_gLcdWriteToRegister
                                    885 ;	src/lcd.c:174: busyWait();
      000108 02r00r27         [24]  886 	ljmp	_busyWait
      00010B                        887 00104$:
                                    888 ;	src/lcd.c:176: else if (controllerSelect == COLUMN_SELECT_RIGHT) // right controller
      00010B BE 04 2D         [24]  889 	cjne	r6,#0x04,00106$
                                    890 ;	src/lcd.c:178: column = column - MAX_COLUMN_PER_CONTROLLER;
      00010E EF               [12]  891 	mov	a,r7
      00010F 24 C0            [12]  892 	add	a,#0xc0
      000111 90r00r08         [24]  893 	mov	dptr,#_glcdGoToAddr_column_65536_34
      000114 F0               [24]  894 	movx	@dptr,a
                                    895 ;	src/lcd.c:181: gLcdWriteToRegister(COMMAND_WRITE_RIGHT, PAGE_MASK | page);
      000115 90r00r07         [24]  896 	mov	dptr,#_glcdGoToAddr_PARM_2
      000118 E0               [24]  897 	movx	a,@dptr
      000119 90r00r02         [24]  898 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      00011C 44 B8            [12]  899 	orl	a,#0xb8
      00011E F0               [24]  900 	movx	@dptr,a
      00011F 75 82 02         [24]  901 	mov	dpl,#0x02
      000122 12r00r2F         [24]  902 	lcall	_gLcdWriteToRegister
                                    903 ;	src/lcd.c:182: busyWait();
      000125 12r00r27         [24]  904 	lcall	_busyWait
                                    905 ;	src/lcd.c:185: gLcdWriteToRegister(COMMAND_WRITE_RIGHT, Y_MASK | column);
      000128 90r00r08         [24]  906 	mov	dptr,#_glcdGoToAddr_column_65536_34
      00012B E0               [24]  907 	movx	a,@dptr
      00012C 90r00r02         [24]  908 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      00012F 44 40            [12]  909 	orl	a,#0x40
      000131 F0               [24]  910 	movx	@dptr,a
      000132 75 82 02         [24]  911 	mov	dpl,#0x02
      000135 12r00r2F         [24]  912 	lcall	_gLcdWriteToRegister
                                    913 ;	src/lcd.c:186: busyWait();
                                    914 ;	src/lcd.c:188: }
      000138 02r00r27         [24]  915 	ljmp	_busyWait
      00013B                        916 00106$:
      00013B 22               [24]  917 	ret
                                    918 ;------------------------------------------------------------
                                    919 ;Allocation info for local variables in function 'glcdWrite'
                                    920 ;------------------------------------------------------------
                                    921 ;page                      Allocated with name '_glcdWrite_PARM_2'
                                    922 ;val                       Allocated with name '_glcdWrite_PARM_3'
                                    923 ;column                    Allocated with name '_glcdWrite_column_65536_38'
                                    924 ;controllerSelect          Allocated with name '_glcdWrite_controllerSelect_65537_40'
                                    925 ;------------------------------------------------------------
                                    926 ;	src/lcd.c:197: void glcdWrite(uint8_t column, uint8_t page, char val)
                                    927 ;	-----------------------------------------
                                    928 ;	 function glcdWrite
                                    929 ;	-----------------------------------------
      00013C                        930 _glcdWrite:
      00013C E5 82            [12]  931 	mov	a,dpl
      00013E 90r00r0B         [24]  932 	mov	dptr,#_glcdWrite_column_65536_38
      000141 F0               [24]  933 	movx	@dptr,a
                                    934 ;	src/lcd.c:199: glcdGoToAddr(column, page);
      000142 E0               [24]  935 	movx	a,@dptr
      000143 FF               [12]  936 	mov	r7,a
      000144 90r00r09         [24]  937 	mov	dptr,#_glcdWrite_PARM_2
      000147 E0               [24]  938 	movx	a,@dptr
      000148 90r00r07         [24]  939 	mov	dptr,#_glcdGoToAddr_PARM_2
      00014B F0               [24]  940 	movx	@dptr,a
      00014C 8F 82            [24]  941 	mov	dpl,r7
      00014E C0 07            [24]  942 	push	ar7
      000150 12r00rCE         [24]  943 	lcall	_glcdGoToAddr
      000153 D0 07            [24]  944 	pop	ar7
                                    945 ;	src/lcd.c:202: uint8_t controllerSelect = glcdControllerSelect(column);
      000155 8F 82            [24]  946 	mov	dpl,r7
      000157 12r00rB9         [24]  947 	lcall	_glcdControllerSelect
      00015A AF 82            [24]  948 	mov	r7,dpl
                                    949 ;	src/lcd.c:204: if (controllerSelect == COLUMN_SELECT_LEFT)
      00015C BF 03 10         [24]  950 	cjne	r7,#0x03,00102$
                                    951 ;	src/lcd.c:206: gLcdWriteToRegister(DATA_WRITE_LEFT, val);
      00015F 90r00r0A         [24]  952 	mov	dptr,#_glcdWrite_PARM_3
      000162 E0               [24]  953 	movx	a,@dptr
      000163 90r00r02         [24]  954 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      000166 F0               [24]  955 	movx	@dptr,a
      000167 75 82 05         [24]  956 	mov	dpl,#0x05
      00016A 12r00r2F         [24]  957 	lcall	_gLcdWriteToRegister
      00016D 80 0E            [24]  958 	sjmp	00103$
      00016F                        959 00102$:
                                    960 ;	src/lcd.c:210: gLcdWriteToRegister(DATA_WRITE_RIGHT, val);
      00016F 90r00r0A         [24]  961 	mov	dptr,#_glcdWrite_PARM_3
      000172 E0               [24]  962 	movx	a,@dptr
      000173 90r00r02         [24]  963 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      000176 F0               [24]  964 	movx	@dptr,a
      000177 75 82 06         [24]  965 	mov	dpl,#0x06
      00017A 12r00r2F         [24]  966 	lcall	_gLcdWriteToRegister
      00017D                        967 00103$:
                                    968 ;	src/lcd.c:212: busyWait();
                                    969 ;	src/lcd.c:213: }
      00017D 02r00r27         [24]  970 	ljmp	_busyWait
                                    971 ;------------------------------------------------------------
                                    972 ;Allocation info for local variables in function 'glcdRead'
                                    973 ;------------------------------------------------------------
                                    974 ;column                    Allocated with name '_glcdRead_column_65536_43'
                                    975 ;controllerSelect          Allocated with name '_glcdRead_controllerSelect_65536_44'
                                    976 ;ptr                       Allocated with name '_glcdRead_ptr_65536_44'
                                    977 ;dataByte                  Allocated with name '_glcdRead_dataByte_65537_48'
                                    978 ;------------------------------------------------------------
                                    979 ;	src/lcd.c:221: uint8_t glcdRead(uint8_t column)
                                    980 ;	-----------------------------------------
                                    981 ;	 function glcdRead
                                    982 ;	-----------------------------------------
      000180                        983 _glcdRead:
      000180 E5 82            [12]  984 	mov	a,dpl
      000182 90r00r0C         [24]  985 	mov	dptr,#_glcdRead_column_65536_43
      000185 F0               [24]  986 	movx	@dptr,a
                                    987 ;	src/lcd.c:223: uint8_t controllerSelect = glcdControllerSelect(column);
      000186 E0               [24]  988 	movx	a,@dptr
      000187 F5 82            [12]  989 	mov	dpl,a
      000189 12r00rB9         [24]  990 	lcall	_glcdControllerSelect
      00018C AF 82            [24]  991 	mov	r7,dpl
                                    992 ;	src/lcd.c:225: __xdata uint8_t *ptr = NULL;
      00018E 90r00r0D         [24]  993 	mov	dptr,#_glcdRead_ptr_65536_44
      000191 E4               [12]  994 	clr	a
      000192 F0               [24]  995 	movx	@dptr,a
      000193 A3               [24]  996 	inc	dptr
      000194 F0               [24]  997 	movx	@dptr,a
                                    998 ;	src/lcd.c:227: if (controllerSelect == COLUMN_SELECT_LEFT)
      000195 BF 03 0C         [24]  999 	cjne	r7,#0x03,00105$
                                   1000 ;	src/lcd.c:229: ptr = (__xdata uint8_t *)DATA_READ_LEFT_ADDR;
      000198 90r00r0D         [24] 1001 	mov	dptr,#_glcdRead_ptr_65536_44
      00019B 74 0B            [12] 1002 	mov	a,#0x0b
      00019D F0               [24] 1003 	movx	@dptr,a
      00019E 74 80            [12] 1004 	mov	a,#0x80
      0001A0 A3               [24] 1005 	inc	dptr
      0001A1 F0               [24] 1006 	movx	@dptr,a
      0001A2 80 2D            [24] 1007 	sjmp	00106$
      0001A4                       1008 00105$:
                                   1009 ;	src/lcd.c:231: else if (controllerSelect == COLUMN_SELECT_RIGHT)
      0001A4 BF 04 0C         [24] 1010 	cjne	r7,#0x04,00102$
                                   1011 ;	src/lcd.c:233: ptr = (__xdata uint8_t *)DATA_READ_RIGHT_ADDR;
      0001A7 90r00r0D         [24] 1012 	mov	dptr,#_glcdRead_ptr_65536_44
      0001AA 74 07            [12] 1013 	mov	a,#0x07
      0001AC F0               [24] 1014 	movx	@dptr,a
      0001AD 74 80            [12] 1015 	mov	a,#0x80
      0001AF A3               [24] 1016 	inc	dptr
      0001B0 F0               [24] 1017 	movx	@dptr,a
      0001B1 80 1E            [24] 1018 	sjmp	00106$
      0001B3                       1019 00102$:
                                   1020 ;	src/lcd.c:237: ERROR_LOG("UNKNOWN CONTROLLER");
      0001B3 74r0F            [12] 1021 	mov	a,#___str_2
      0001B5 C0 E0            [24] 1022 	push	acc
      0001B7 74s02            [12] 1023 	mov	a,#(___str_2 >> 8)
      0001B9 C0 E0            [24] 1024 	push	acc
      0001BB 12r00r00         [24] 1025 	lcall	_printf_tiny
      0001BE 15 81            [12] 1026 	dec	sp
      0001C0 15 81            [12] 1027 	dec	sp
      0001C2 74r0A            [12] 1028 	mov	a,#___str_1
      0001C4 C0 E0            [24] 1029 	push	acc
      0001C6 74s02            [12] 1030 	mov	a,#(___str_1 >> 8)
      0001C8 C0 E0            [24] 1031 	push	acc
      0001CA 12r00r00         [24] 1032 	lcall	_printf_tiny
      0001CD 15 81            [12] 1033 	dec	sp
      0001CF 15 81            [12] 1034 	dec	sp
      0001D1                       1035 00106$:
                                   1036 ;	src/lcd.c:240: uint8_t dataByte = *ptr;
      0001D1 90r00r0D         [24] 1037 	mov	dptr,#_glcdRead_ptr_65536_44
      0001D4 E0               [24] 1038 	movx	a,@dptr
      0001D5 FE               [12] 1039 	mov	r6,a
      0001D6 A3               [24] 1040 	inc	dptr
      0001D7 E0               [24] 1041 	movx	a,@dptr
      0001D8 FF               [12] 1042 	mov	r7,a
      0001D9 8E 82            [24] 1043 	mov	dpl,r6
      0001DB 8F 83            [24] 1044 	mov	dph,r7
      0001DD E0               [24] 1045 	movx	a,@dptr
                                   1046 ;	src/lcd.c:242: return dataByte;
                                   1047 ;	src/lcd.c:243: }
      0001DE F5 82            [12] 1048 	mov	dpl,a
      0001E0 22               [24] 1049 	ret
                                   1050 ;------------------------------------------------------------
                                   1051 ;Allocation info for local variables in function 'setPixel'
                                   1052 ;------------------------------------------------------------
                                   1053 ;column                    Allocated with name '_setPixel_PARM_2'
                                   1054 ;val                       Allocated with name '_setPixel_PARM_3'
                                   1055 ;row                       Allocated with name '_setPixel_row_65536_49'
                                   1056 ;page                      Allocated with name '_setPixel_page_65537_51'
                                   1057 ;pixelPosition             Allocated with name '_setPixel_pixelPosition_65537_51'
                                   1058 ;pageByte                  Allocated with name '_setPixel_pageByte_65538_52'
                                   1059 ;------------------------------------------------------------
                                   1060 ;	src/lcd.c:252: void setPixel(uint8_t row, uint8_t column, BitValue val)
                                   1061 ;	-----------------------------------------
                                   1062 ;	 function setPixel
                                   1063 ;	-----------------------------------------
      0001E1                       1064 _setPixel:
      0001E1 E5 82            [12] 1065 	mov	a,dpl
      0001E3 90r00r11         [24] 1066 	mov	dptr,#_setPixel_row_65536_49
      0001E6 F0               [24] 1067 	movx	@dptr,a
                                   1068 ;	src/lcd.c:255: row = 63 - row;
      0001E7 E0               [24] 1069 	movx	a,@dptr
      0001E8 FF               [12] 1070 	mov	r7,a
      0001E9 74 3F            [12] 1071 	mov	a,#0x3f
      0001EB C3               [12] 1072 	clr	c
      0001EC 9F               [12] 1073 	subb	a,r7
      0001ED F0               [24] 1074 	movx	@dptr,a
                                   1075 ;	src/lcd.c:258: uint8_t page = row / 8;
      0001EE E0               [24] 1076 	movx	a,@dptr
      0001EF FF               [12] 1077 	mov	r7,a
      0001F0 7E 00            [12] 1078 	mov	r6,#0x00
      0001F2 90r00r00         [24] 1079 	mov	dptr,#__divsint_PARM_2
      0001F5 74 08            [12] 1080 	mov	a,#0x08
      0001F7 F0               [24] 1081 	movx	@dptr,a
      0001F8 E4               [12] 1082 	clr	a
      0001F9 A3               [24] 1083 	inc	dptr
      0001FA F0               [24] 1084 	movx	@dptr,a
      0001FB 8F 82            [24] 1085 	mov	dpl,r7
      0001FD 8E 83            [24] 1086 	mov	dph,r6
      0001FF C0 07            [24] 1087 	push	ar7
      000201 C0 06            [24] 1088 	push	ar6
      000203 12r00r00         [24] 1089 	lcall	__divsint
      000206 AC 82            [24] 1090 	mov	r4,dpl
      000208 D0 06            [24] 1091 	pop	ar6
      00020A D0 07            [24] 1092 	pop	ar7
                                   1093 ;	src/lcd.c:260: uint8_t pixelPosition = row % 8;
      00020C 53 07 07         [24] 1094 	anl	ar7,#0x07
                                   1095 ;	src/lcd.c:263: glcdGoToAddr(column, page);
      00020F 90r00r0F         [24] 1096 	mov	dptr,#_setPixel_PARM_2
      000212 E0               [24] 1097 	movx	a,@dptr
      000213 FE               [12] 1098 	mov	r6,a
      000214 90r00r07         [24] 1099 	mov	dptr,#_glcdGoToAddr_PARM_2
      000217 EC               [12] 1100 	mov	a,r4
      000218 F0               [24] 1101 	movx	@dptr,a
      000219 8E 82            [24] 1102 	mov	dpl,r6
      00021B C0 07            [24] 1103 	push	ar7
      00021D C0 06            [24] 1104 	push	ar6
      00021F C0 04            [24] 1105 	push	ar4
      000221 12r00rCE         [24] 1106 	lcall	_glcdGoToAddr
      000224 D0 04            [24] 1107 	pop	ar4
      000226 D0 06            [24] 1108 	pop	ar6
                                   1109 ;	src/lcd.c:269: uint8_t pageByte = glcdRead(column);
      000228 8E 82            [24] 1110 	mov	dpl,r6
      00022A C0 06            [24] 1111 	push	ar6
      00022C C0 04            [24] 1112 	push	ar4
      00022E 12r01r80         [24] 1113 	lcall	_glcdRead
      000231 D0 04            [24] 1114 	pop	ar4
      000233 D0 06            [24] 1115 	pop	ar6
                                   1116 ;	src/lcd.c:270: pageByte = glcdRead(column);
      000235 8E 82            [24] 1117 	mov	dpl,r6
      000237 C0 06            [24] 1118 	push	ar6
      000239 C0 04            [24] 1119 	push	ar4
      00023B 12r01r80         [24] 1120 	lcall	_glcdRead
      00023E AD 82            [24] 1121 	mov	r5,dpl
      000240 D0 04            [24] 1122 	pop	ar4
      000242 D0 06            [24] 1123 	pop	ar6
      000244 D0 07            [24] 1124 	pop	ar7
      000246 90r00r12         [24] 1125 	mov	dptr,#_setPixel_pageByte_65538_52
      000249 ED               [12] 1126 	mov	a,r5
      00024A F0               [24] 1127 	movx	@dptr,a
                                   1128 ;	src/lcd.c:274: if (val == ONE)
      00024B 90r00r10         [24] 1129 	mov	dptr,#_setPixel_PARM_3
      00024E E0               [24] 1130 	movx	a,@dptr
      00024F FB               [12] 1131 	mov	r3,a
      000250 BB 01 17         [24] 1132 	cjne	r3,#0x01,00104$
                                   1133 ;	src/lcd.c:276: pageByte = pageByte | (1 << pixelPosition);
      000253 8F 02            [24] 1134 	mov	ar2,r7
      000255 8A F0            [24] 1135 	mov	b,r2
      000257 05 F0            [12] 1136 	inc	b
      000259 74 01            [12] 1137 	mov	a,#0x01
      00025B 80 02            [24] 1138 	sjmp	00120$
      00025D                       1139 00118$:
      00025D 25 E0            [12] 1140 	add	a,acc
      00025F                       1141 00120$:
      00025F D5 F0 FB         [24] 1142 	djnz	b,00118$
      000262 FA               [12] 1143 	mov	r2,a
      000263 90r00r12         [24] 1144 	mov	dptr,#_setPixel_pageByte_65538_52
      000266 4D               [12] 1145 	orl	a,r5
      000267 F0               [24] 1146 	movx	@dptr,a
      000268 80 17            [24] 1147 	sjmp	00105$
      00026A                       1148 00104$:
                                   1149 ;	src/lcd.c:278: else if (val == ZERO)
      00026A EB               [12] 1150 	mov	a,r3
      00026B 70 14            [24] 1151 	jnz	00105$
                                   1152 ;	src/lcd.c:281: pageByte = pageByte & (~(1 << pixelPosition));
      00026D 8F F0            [24] 1153 	mov	b,r7
      00026F 05 F0            [12] 1154 	inc	b
      000271 74 01            [12] 1155 	mov	a,#0x01
      000273 80 02            [24] 1156 	sjmp	00124$
      000275                       1157 00122$:
      000275 25 E0            [12] 1158 	add	a,acc
      000277                       1159 00124$:
      000277 D5 F0 FB         [24] 1160 	djnz	b,00122$
      00027A F4               [12] 1161 	cpl	a
      00027B FF               [12] 1162 	mov	r7,a
      00027C 90r00r12         [24] 1163 	mov	dptr,#_setPixel_pageByte_65538_52
      00027F 5D               [12] 1164 	anl	a,r5
      000280 F0               [24] 1165 	movx	@dptr,a
      000281                       1166 00105$:
                                   1167 ;	src/lcd.c:285: glcdWrite(column, page, pageByte);
      000281 90r00r12         [24] 1168 	mov	dptr,#_setPixel_pageByte_65538_52
      000284 E0               [24] 1169 	movx	a,@dptr
      000285 FF               [12] 1170 	mov	r7,a
      000286 90r00r09         [24] 1171 	mov	dptr,#_glcdWrite_PARM_2
      000289 EC               [12] 1172 	mov	a,r4
      00028A F0               [24] 1173 	movx	@dptr,a
      00028B 90r00r0A         [24] 1174 	mov	dptr,#_glcdWrite_PARM_3
      00028E EF               [12] 1175 	mov	a,r7
      00028F F0               [24] 1176 	movx	@dptr,a
      000290 8E 82            [24] 1177 	mov	dpl,r6
                                   1178 ;	src/lcd.c:286: }
      000292 02r01r3C         [24] 1179 	ljmp	_glcdWrite
                                   1180 ;------------------------------------------------------------
                                   1181 ;Allocation info for local variables in function 'glcdClear'
                                   1182 ;------------------------------------------------------------
                                   1183 ;column                    Allocated with name '_glcdClear_column_131072_56'
                                   1184 ;page                      Allocated with name '_glcdClear_page_262144_58'
                                   1185 ;------------------------------------------------------------
                                   1186 ;	src/lcd.c:292: void glcdClear()
                                   1187 ;	-----------------------------------------
                                   1188 ;	 function glcdClear
                                   1189 ;	-----------------------------------------
      000295                       1190 _glcdClear:
                                   1191 ;	src/lcd.c:294: for (uint8_t column = 0; column < 128; column++)
      000295 7F 00            [12] 1192 	mov	r7,#0x00
      000297                       1193 00107$:
      000297 BF 80 00         [24] 1194 	cjne	r7,#0x80,00129$
      00029A                       1195 00129$:
      00029A 50 2A            [24] 1196 	jnc	00109$
                                   1197 ;	src/lcd.c:296: for (uint8_t page = 0; page < 8; page++)
      00029C 8F 06            [24] 1198 	mov	ar6,r7
      00029E 7D 00            [12] 1199 	mov	r5,#0x00
      0002A0                       1200 00104$:
      0002A0 BD 08 00         [24] 1201 	cjne	r5,#0x08,00131$
      0002A3                       1202 00131$:
      0002A3 50 1E            [24] 1203 	jnc	00108$
                                   1204 ;	src/lcd.c:298: glcdWrite(column, page, 0x00);
      0002A5 90r00r09         [24] 1205 	mov	dptr,#_glcdWrite_PARM_2
      0002A8 ED               [12] 1206 	mov	a,r5
      0002A9 F0               [24] 1207 	movx	@dptr,a
      0002AA 90r00r0A         [24] 1208 	mov	dptr,#_glcdWrite_PARM_3
      0002AD E4               [12] 1209 	clr	a
      0002AE F0               [24] 1210 	movx	@dptr,a
      0002AF 8E 82            [24] 1211 	mov	dpl,r6
      0002B1 C0 07            [24] 1212 	push	ar7
      0002B3 C0 06            [24] 1213 	push	ar6
      0002B5 C0 05            [24] 1214 	push	ar5
      0002B7 12r01r3C         [24] 1215 	lcall	_glcdWrite
      0002BA D0 05            [24] 1216 	pop	ar5
      0002BC D0 06            [24] 1217 	pop	ar6
      0002BE D0 07            [24] 1218 	pop	ar7
                                   1219 ;	src/lcd.c:296: for (uint8_t page = 0; page < 8; page++)
      0002C0 0D               [12] 1220 	inc	r5
      0002C1 80 DD            [24] 1221 	sjmp	00104$
      0002C3                       1222 00108$:
                                   1223 ;	src/lcd.c:294: for (uint8_t column = 0; column < 128; column++)
      0002C3 0F               [12] 1224 	inc	r7
      0002C4 80 D1            [24] 1225 	sjmp	00107$
      0002C6                       1226 00109$:
                                   1227 ;	src/lcd.c:301: }
      0002C6 22               [24] 1228 	ret
                                   1229 ;------------------------------------------------------------
                                   1230 ;Allocation info for local variables in function 'glcdWriteChar'
                                   1231 ;------------------------------------------------------------
                                   1232 ;page                      Allocated with name '_glcdWriteChar_PARM_2'
                                   1233 ;c                         Allocated with name '_glcdWriteChar_PARM_3'
                                   1234 ;column                    Allocated with name '_glcdWriteChar_column_65536_60'
                                   1235 ;offset                    Allocated with name '_glcdWriteChar_offset_65536_61'
                                   1236 ;i                         Allocated with name '_glcdWriteChar_i_131072_62'
                                   1237 ;------------------------------------------------------------
                                   1238 ;	src/lcd.c:310: void glcdWriteChar(uint8_t column, uint8_t page, char c)
                                   1239 ;	-----------------------------------------
                                   1240 ;	 function glcdWriteChar
                                   1241 ;	-----------------------------------------
      0002C7                       1242 _glcdWriteChar:
      0002C7 E5 82            [12] 1243 	mov	a,dpl
      0002C9 90r00r15         [24] 1244 	mov	dptr,#_glcdWriteChar_column_65536_60
      0002CC F0               [24] 1245 	movx	@dptr,a
                                   1246 ;	src/lcd.c:313: uint8_t offset = (c - 0x20) * CHARACTER_WIDTH;
      0002CD 90r00r14         [24] 1247 	mov	dptr,#_glcdWriteChar_PARM_3
      0002D0 E0               [24] 1248 	movx	a,@dptr
      0002D1 24 E0            [12] 1249 	add	a,#0xe0
      0002D3 75 F0 03         [24] 1250 	mov	b,#0x03
      0002D6 A4               [48] 1251 	mul	ab
      0002D7 FF               [12] 1252 	mov	r7,a
                                   1253 ;	src/lcd.c:314: for (uint8_t i = 0; i < CHARACTER_WIDTH; i++)
      0002D8 90r00r13         [24] 1254 	mov	dptr,#_glcdWriteChar_PARM_2
      0002DB E0               [24] 1255 	movx	a,@dptr
      0002DC FE               [12] 1256 	mov	r6,a
      0002DD 90r00r15         [24] 1257 	mov	dptr,#_glcdWriteChar_column_65536_60
      0002E0 E0               [24] 1258 	movx	a,@dptr
      0002E1 FD               [12] 1259 	mov	r5,a
      0002E2 7C 00            [12] 1260 	mov	r4,#0x00
      0002E4                       1261 00103$:
      0002E4 BC 03 00         [24] 1262 	cjne	r4,#0x03,00116$
      0002E7                       1263 00116$:
      0002E7 50 43            [24] 1264 	jnc	00109$
                                   1265 ;	src/lcd.c:317: glcdWrite(column, page, font[offset + i]);
      0002E9 8F 02            [24] 1266 	mov	ar2,r7
      0002EB 7B 00            [12] 1267 	mov	r3,#0x00
      0002ED 8C 00            [24] 1268 	mov	ar0,r4
      0002EF 79 00            [12] 1269 	mov	r1,#0x00
      0002F1 E8               [12] 1270 	mov	a,r0
      0002F2 2A               [12] 1271 	add	a,r2
      0002F3 FA               [12] 1272 	mov	r2,a
      0002F4 E9               [12] 1273 	mov	a,r1
      0002F5 3B               [12] 1274 	addc	a,r3
      0002F6 FB               [12] 1275 	mov	r3,a
      0002F7 EA               [12] 1276 	mov	a,r2
      0002F8 24r00            [12] 1277 	add	a,#_font
      0002FA F5 82            [12] 1278 	mov	dpl,a
      0002FC EB               [12] 1279 	mov	a,r3
      0002FD 34s00            [12] 1280 	addc	a,#(_font >> 8)
      0002FF F5 83            [12] 1281 	mov	dph,a
      000301 E4               [12] 1282 	clr	a
      000302 93               [24] 1283 	movc	a,@a+dptr
      000303 FB               [12] 1284 	mov	r3,a
      000304 90r00r09         [24] 1285 	mov	dptr,#_glcdWrite_PARM_2
      000307 EE               [12] 1286 	mov	a,r6
      000308 F0               [24] 1287 	movx	@dptr,a
      000309 90r00r0A         [24] 1288 	mov	dptr,#_glcdWrite_PARM_3
      00030C EB               [12] 1289 	mov	a,r3
      00030D F0               [24] 1290 	movx	@dptr,a
      00030E 8D 82            [24] 1291 	mov	dpl,r5
      000310 C0 07            [24] 1292 	push	ar7
      000312 C0 06            [24] 1293 	push	ar6
      000314 C0 05            [24] 1294 	push	ar5
      000316 C0 04            [24] 1295 	push	ar4
      000318 12r01r3C         [24] 1296 	lcall	_glcdWrite
      00031B D0 04            [24] 1297 	pop	ar4
      00031D D0 05            [24] 1298 	pop	ar5
      00031F D0 06            [24] 1299 	pop	ar6
      000321 D0 07            [24] 1300 	pop	ar7
                                   1301 ;	src/lcd.c:318: column++;
      000323 0D               [12] 1302 	inc	r5
      000324 90r00r15         [24] 1303 	mov	dptr,#_glcdWriteChar_column_65536_60
      000327 ED               [12] 1304 	mov	a,r5
      000328 F0               [24] 1305 	movx	@dptr,a
                                   1306 ;	src/lcd.c:314: for (uint8_t i = 0; i < CHARACTER_WIDTH; i++)
      000329 0C               [12] 1307 	inc	r4
      00032A 80 B8            [24] 1308 	sjmp	00103$
      00032C                       1309 00109$:
      00032C 90r00r15         [24] 1310 	mov	dptr,#_glcdWriteChar_column_65536_60
      00032F ED               [12] 1311 	mov	a,r5
      000330 F0               [24] 1312 	movx	@dptr,a
                                   1313 ;	src/lcd.c:320: }
      000331 22               [24] 1314 	ret
                                   1315 ;------------------------------------------------------------
                                   1316 ;Allocation info for local variables in function 'gcldClearString'
                                   1317 ;------------------------------------------------------------
                                   1318 ;page                      Allocated with name '_gcldClearString_PARM_2'
                                   1319 ;size                      Allocated with name '_gcldClearString_PARM_3'
                                   1320 ;column                    Allocated with name '_gcldClearString_column_65536_64'
                                   1321 ;i                         Allocated with name '_gcldClearString_i_131072_66'
                                   1322 ;------------------------------------------------------------
                                   1323 ;	src/lcd.c:329: void gcldClearString(uint8_t column, uint8_t page, uint8_t size)
                                   1324 ;	-----------------------------------------
                                   1325 ;	 function gcldClearString
                                   1326 ;	-----------------------------------------
      000332                       1327 _gcldClearString:
      000332 E5 82            [12] 1328 	mov	a,dpl
      000334 90r00r18         [24] 1329 	mov	dptr,#_gcldClearString_column_65536_64
      000337 F0               [24] 1330 	movx	@dptr,a
                                   1331 ;	src/lcd.c:331: for (uint8_t i = 0; i < size; i++)
      000338 90r00r16         [24] 1332 	mov	dptr,#_gcldClearString_PARM_2
      00033B E0               [24] 1333 	movx	a,@dptr
      00033C FF               [12] 1334 	mov	r7,a
      00033D 90r00r17         [24] 1335 	mov	dptr,#_gcldClearString_PARM_3
      000340 E0               [24] 1336 	movx	a,@dptr
      000341 FE               [12] 1337 	mov	r6,a
      000342 7D 00            [12] 1338 	mov	r5,#0x00
      000344                       1339 00103$:
      000344 C3               [12] 1340 	clr	c
      000345 ED               [12] 1341 	mov	a,r5
      000346 9E               [12] 1342 	subb	a,r6
      000347 50 2F            [24] 1343 	jnc	00105$
                                   1344 ;	src/lcd.c:333: glcdWriteChar(column, page, 0x20);
      000349 90r00r18         [24] 1345 	mov	dptr,#_gcldClearString_column_65536_64
      00034C E0               [24] 1346 	movx	a,@dptr
      00034D FC               [12] 1347 	mov	r4,a
      00034E 90r00r13         [24] 1348 	mov	dptr,#_glcdWriteChar_PARM_2
      000351 EF               [12] 1349 	mov	a,r7
      000352 F0               [24] 1350 	movx	@dptr,a
      000353 90r00r14         [24] 1351 	mov	dptr,#_glcdWriteChar_PARM_3
      000356 74 20            [12] 1352 	mov	a,#0x20
      000358 F0               [24] 1353 	movx	@dptr,a
      000359 8C 82            [24] 1354 	mov	dpl,r4
      00035B C0 07            [24] 1355 	push	ar7
      00035D C0 06            [24] 1356 	push	ar6
      00035F C0 05            [24] 1357 	push	ar5
      000361 C0 04            [24] 1358 	push	ar4
      000363 12r02rC7         [24] 1359 	lcall	_glcdWriteChar
      000366 D0 04            [24] 1360 	pop	ar4
      000368 D0 05            [24] 1361 	pop	ar5
      00036A D0 06            [24] 1362 	pop	ar6
      00036C D0 07            [24] 1363 	pop	ar7
                                   1364 ;	src/lcd.c:334: column += CHARACTER_WIDTH + 1;
      00036E 90r00r18         [24] 1365 	mov	dptr,#_gcldClearString_column_65536_64
      000371 74 04            [12] 1366 	mov	a,#0x04
      000373 2C               [12] 1367 	add	a,r4
      000374 F0               [24] 1368 	movx	@dptr,a
                                   1369 ;	src/lcd.c:331: for (uint8_t i = 0; i < size; i++)
      000375 0D               [12] 1370 	inc	r5
      000376 80 CC            [24] 1371 	sjmp	00103$
      000378                       1372 00105$:
                                   1373 ;	src/lcd.c:336: }
      000378 22               [24] 1374 	ret
                                   1375 ;------------------------------------------------------------
                                   1376 ;Allocation info for local variables in function 'glcdWriteString'
                                   1377 ;------------------------------------------------------------
                                   1378 ;page                      Allocated with name '_glcdWriteString_PARM_2'
                                   1379 ;string                    Allocated with name '_glcdWriteString_PARM_3'
                                   1380 ;column                    Allocated with name '_glcdWriteString_column_65536_68'
                                   1381 ;i                         Allocated with name '_glcdWriteString_i_65536_69'
                                   1382 ;------------------------------------------------------------
                                   1383 ;	src/lcd.c:345: void glcdWriteString(uint8_t column, uint8_t page, char string[])
                                   1384 ;	-----------------------------------------
                                   1385 ;	 function glcdWriteString
                                   1386 ;	-----------------------------------------
      000379                       1387 _glcdWriteString:
      000379 E5 82            [12] 1388 	mov	a,dpl
      00037B 90r00r1D         [24] 1389 	mov	dptr,#_glcdWriteString_column_65536_68
      00037E F0               [24] 1390 	movx	@dptr,a
                                   1391 ;	src/lcd.c:348: while (string[i] != '\0')
      00037F 90r00r19         [24] 1392 	mov	dptr,#_glcdWriteString_PARM_2
      000382 E0               [24] 1393 	movx	a,@dptr
      000383 FF               [12] 1394 	mov	r7,a
      000384 90r00r1A         [24] 1395 	mov	dptr,#_glcdWriteString_PARM_3
      000387 E0               [24] 1396 	movx	a,@dptr
      000388 FC               [12] 1397 	mov	r4,a
      000389 A3               [24] 1398 	inc	dptr
      00038A E0               [24] 1399 	movx	a,@dptr
      00038B FD               [12] 1400 	mov	r5,a
      00038C A3               [24] 1401 	inc	dptr
      00038D E0               [24] 1402 	movx	a,@dptr
      00038E FE               [12] 1403 	mov	r6,a
      00038F 7B 00            [12] 1404 	mov	r3,#0x00
      000391                       1405 00101$:
      000391 EB               [12] 1406 	mov	a,r3
      000392 2C               [12] 1407 	add	a,r4
      000393 F8               [12] 1408 	mov	r0,a
      000394 E4               [12] 1409 	clr	a
      000395 3D               [12] 1410 	addc	a,r5
      000396 F9               [12] 1411 	mov	r1,a
      000397 8E 02            [24] 1412 	mov	ar2,r6
      000399 88 82            [24] 1413 	mov	dpl,r0
      00039B 89 83            [24] 1414 	mov	dph,r1
      00039D 8A F0            [24] 1415 	mov	b,r2
      00039F 12r00r00         [24] 1416 	lcall	__gptrget
      0003A2 FA               [12] 1417 	mov	r2,a
      0003A3 60 36            [24] 1418 	jz	00104$
                                   1419 ;	src/lcd.c:350: glcdWriteChar(column, page, string[i]);
      0003A5 90r00r1D         [24] 1420 	mov	dptr,#_glcdWriteString_column_65536_68
      0003A8 E0               [24] 1421 	movx	a,@dptr
      0003A9 F9               [12] 1422 	mov	r1,a
      0003AA 90r00r13         [24] 1423 	mov	dptr,#_glcdWriteChar_PARM_2
      0003AD EF               [12] 1424 	mov	a,r7
      0003AE F0               [24] 1425 	movx	@dptr,a
      0003AF 90r00r14         [24] 1426 	mov	dptr,#_glcdWriteChar_PARM_3
      0003B2 EA               [12] 1427 	mov	a,r2
      0003B3 F0               [24] 1428 	movx	@dptr,a
      0003B4 89 82            [24] 1429 	mov	dpl,r1
      0003B6 C0 07            [24] 1430 	push	ar7
      0003B8 C0 06            [24] 1431 	push	ar6
      0003BA C0 05            [24] 1432 	push	ar5
      0003BC C0 04            [24] 1433 	push	ar4
      0003BE C0 03            [24] 1434 	push	ar3
      0003C0 C0 01            [24] 1435 	push	ar1
      0003C2 12r02rC7         [24] 1436 	lcall	_glcdWriteChar
      0003C5 D0 01            [24] 1437 	pop	ar1
      0003C7 D0 03            [24] 1438 	pop	ar3
      0003C9 D0 04            [24] 1439 	pop	ar4
      0003CB D0 05            [24] 1440 	pop	ar5
      0003CD D0 06            [24] 1441 	pop	ar6
      0003CF D0 07            [24] 1442 	pop	ar7
                                   1443 ;	src/lcd.c:352: i++;
      0003D1 0B               [12] 1444 	inc	r3
                                   1445 ;	src/lcd.c:353: column += CHARACTER_WIDTH + 1;
      0003D2 90r00r1D         [24] 1446 	mov	dptr,#_glcdWriteString_column_65536_68
      0003D5 74 04            [12] 1447 	mov	a,#0x04
      0003D7 29               [12] 1448 	add	a,r1
      0003D8 F0               [24] 1449 	movx	@dptr,a
      0003D9 80 B6            [24] 1450 	sjmp	00101$
      0003DB                       1451 00104$:
                                   1452 ;	src/lcd.c:355: }
      0003DB 22               [24] 1453 	ret
                                   1454 ;------------------------------------------------------------
                                   1455 ;Allocation info for local variables in function 'absolute'
                                   1456 ;------------------------------------------------------------
                                   1457 ;value2                    Allocated with name '_absolute_PARM_2'
                                   1458 ;value1                    Allocated with name '_absolute_value1_65536_71'
                                   1459 ;result                    Allocated with name '_absolute_result_65536_72'
                                   1460 ;------------------------------------------------------------
                                   1461 ;	src/lcd.c:364: uint8_t absolute(int value1, int value2)
                                   1462 ;	-----------------------------------------
                                   1463 ;	 function absolute
                                   1464 ;	-----------------------------------------
      0003DC                       1465 _absolute:
      0003DC AF 83            [24] 1466 	mov	r7,dph
      0003DE E5 82            [12] 1467 	mov	a,dpl
      0003E0 90r00r20         [24] 1468 	mov	dptr,#_absolute_value1_65536_71
      0003E3 F0               [24] 1469 	movx	@dptr,a
      0003E4 EF               [12] 1470 	mov	a,r7
      0003E5 A3               [24] 1471 	inc	dptr
      0003E6 F0               [24] 1472 	movx	@dptr,a
                                   1473 ;	src/lcd.c:367: if (value1 > value2)
      0003E7 90r00r20         [24] 1474 	mov	dptr,#_absolute_value1_65536_71
      0003EA E0               [24] 1475 	movx	a,@dptr
      0003EB FE               [12] 1476 	mov	r6,a
      0003EC A3               [24] 1477 	inc	dptr
      0003ED E0               [24] 1478 	movx	a,@dptr
      0003EE FF               [12] 1479 	mov	r7,a
      0003EF 90r00r1E         [24] 1480 	mov	dptr,#_absolute_PARM_2
      0003F2 E0               [24] 1481 	movx	a,@dptr
      0003F3 FC               [12] 1482 	mov	r4,a
      0003F4 A3               [24] 1483 	inc	dptr
      0003F5 E0               [24] 1484 	movx	a,@dptr
      0003F6 FD               [12] 1485 	mov	r5,a
      0003F7 C3               [12] 1486 	clr	c
      0003F8 EC               [12] 1487 	mov	a,r4
      0003F9 9E               [12] 1488 	subb	a,r6
      0003FA ED               [12] 1489 	mov	a,r5
      0003FB 64 80            [12] 1490 	xrl	a,#0x80
      0003FD 8F F0            [24] 1491 	mov	b,r7
      0003FF 63 F0 80         [24] 1492 	xrl	b,#0x80
      000402 95 F0            [12] 1493 	subb	a,b
      000404 50 0D            [24] 1494 	jnc	00102$
                                   1495 ;	src/lcd.c:369: result = value1 - value2;
      000406 8E 03            [24] 1496 	mov	ar3,r6
      000408 8C 02            [24] 1497 	mov	ar2,r4
      00040A 90r00r22         [24] 1498 	mov	dptr,#_absolute_result_65536_72
      00040D EB               [12] 1499 	mov	a,r3
      00040E C3               [12] 1500 	clr	c
      00040F 9A               [12] 1501 	subb	a,r2
      000410 F0               [24] 1502 	movx	@dptr,a
      000411 80 07            [24] 1503 	sjmp	00103$
      000413                       1504 00102$:
                                   1505 ;	src/lcd.c:373: result = value2 - value1;
      000413 90r00r22         [24] 1506 	mov	dptr,#_absolute_result_65536_72
      000416 EC               [12] 1507 	mov	a,r4
      000417 C3               [12] 1508 	clr	c
      000418 9E               [12] 1509 	subb	a,r6
      000419 F0               [24] 1510 	movx	@dptr,a
      00041A                       1511 00103$:
                                   1512 ;	src/lcd.c:375: return result;
      00041A 90r00r22         [24] 1513 	mov	dptr,#_absolute_result_65536_72
      00041D E0               [24] 1514 	movx	a,@dptr
                                   1515 ;	src/lcd.c:376: }
      00041E F5 82            [12] 1516 	mov	dpl,a
      000420 22               [24] 1517 	ret
                                   1518 ;------------------------------------------------------------
                                   1519 ;Allocation info for local variables in function 'glcdDrawGraph'
                                   1520 ;------------------------------------------------------------
                                   1521 ;sloc0                     Allocated with name '_glcdDrawGraph_sloc0_1_0'
                                   1522 ;sloc1                     Allocated with name '_glcdDrawGraph_sloc1_1_0'
                                   1523 ;sloc2                     Allocated with name '_glcdDrawGraph_sloc2_1_0'
                                   1524 ;y1                        Allocated with name '_glcdDrawGraph_PARM_2'
                                   1525 ;x2                        Allocated with name '_glcdDrawGraph_PARM_3'
                                   1526 ;y2                        Allocated with name '_glcdDrawGraph_PARM_4'
                                   1527 ;x1                        Allocated with name '_glcdDrawGraph_x1_65536_75'
                                   1528 ;slope                     Allocated with name '_glcdDrawGraph_slope_65536_76'
                                   1529 ;temp                      Allocated with name '_glcdDrawGraph_temp_131072_77'
                                   1530 ;temp                      Allocated with name '_glcdDrawGraph_temp_131072_78'
                                   1531 ;deltaX                    Allocated with name '_glcdDrawGraph_deltaX_65537_79'
                                   1532 ;deltaY                    Allocated with name '_glcdDrawGraph_deltaY_65537_79'
                                   1533 ;error                     Allocated with name '_glcdDrawGraph_error_65537_79'
                                   1534 ;yStep                     Allocated with name '_glcdDrawGraph_yStep_65537_79'
                                   1535 ;y                         Allocated with name '_glcdDrawGraph_y_65538_82'
                                   1536 ;x                         Allocated with name '_glcdDrawGraph_x_131074_83'
                                   1537 ;------------------------------------------------------------
                                   1538 ;	src/lcd.c:386: void glcdDrawGraph(int x1, int y1, int x2, int y2)
                                   1539 ;	-----------------------------------------
                                   1540 ;	 function glcdDrawGraph
                                   1541 ;	-----------------------------------------
      000421                       1542 _glcdDrawGraph:
      000421 AF 83            [24] 1543 	mov	r7,dph
      000423 E5 82            [12] 1544 	mov	a,dpl
      000425 90r00r29         [24] 1545 	mov	dptr,#_glcdDrawGraph_x1_65536_75
      000428 F0               [24] 1546 	movx	@dptr,a
      000429 EF               [12] 1547 	mov	a,r7
      00042A A3               [24] 1548 	inc	dptr
      00042B F0               [24] 1549 	movx	@dptr,a
                                   1550 ;	src/lcd.c:388: int slope = absolute(y1, y2) - absolute(x1, x2);
      00042C 90r00r23         [24] 1551 	mov	dptr,#_glcdDrawGraph_PARM_2
      00042F E0               [24] 1552 	movx	a,@dptr
      000430 FE               [12] 1553 	mov	r6,a
      000431 A3               [24] 1554 	inc	dptr
      000432 E0               [24] 1555 	movx	a,@dptr
      000433 FF               [12] 1556 	mov	r7,a
      000434 90r00r27         [24] 1557 	mov	dptr,#_glcdDrawGraph_PARM_4
      000437 E0               [24] 1558 	movx	a,@dptr
      000438 FC               [12] 1559 	mov	r4,a
      000439 A3               [24] 1560 	inc	dptr
      00043A E0               [24] 1561 	movx	a,@dptr
      00043B FD               [12] 1562 	mov	r5,a
      00043C 90r00r1E         [24] 1563 	mov	dptr,#_absolute_PARM_2
      00043F EC               [12] 1564 	mov	a,r4
      000440 F0               [24] 1565 	movx	@dptr,a
      000441 ED               [12] 1566 	mov	a,r5
      000442 A3               [24] 1567 	inc	dptr
      000443 F0               [24] 1568 	movx	@dptr,a
      000444 8E 82            [24] 1569 	mov	dpl,r6
      000446 8F 83            [24] 1570 	mov	dph,r7
      000448 C0 07            [24] 1571 	push	ar7
      00044A C0 06            [24] 1572 	push	ar6
      00044C C0 05            [24] 1573 	push	ar5
      00044E C0 04            [24] 1574 	push	ar4
      000450 12r03rDC         [24] 1575 	lcall	_absolute
      000453 AB 82            [24] 1576 	mov	r3,dpl
      000455 8B*02            [24] 1577 	mov	_glcdDrawGraph_sloc1_1_0,r3
      000457 75*03 00         [24] 1578 	mov	(_glcdDrawGraph_sloc1_1_0 + 1),#0x00
      00045A 90r00r29         [24] 1579 	mov	dptr,#_glcdDrawGraph_x1_65536_75
      00045D E0               [24] 1580 	movx	a,@dptr
      00045E F8               [12] 1581 	mov	r0,a
      00045F A3               [24] 1582 	inc	dptr
      000460 E0               [24] 1583 	movx	a,@dptr
      000461 F9               [12] 1584 	mov	r1,a
      000462 90r00r25         [24] 1585 	mov	dptr,#_glcdDrawGraph_PARM_3
      000465 E0               [24] 1586 	movx	a,@dptr
      000466 F5*00            [12] 1587 	mov	_glcdDrawGraph_sloc0_1_0,a
      000468 A3               [24] 1588 	inc	dptr
      000469 E0               [24] 1589 	movx	a,@dptr
      00046A F5*01            [12] 1590 	mov	(_glcdDrawGraph_sloc0_1_0 + 1),a
      00046C 90r00r1E         [24] 1591 	mov	dptr,#_absolute_PARM_2
      00046F E5*00            [12] 1592 	mov	a,_glcdDrawGraph_sloc0_1_0
      000471 F0               [24] 1593 	movx	@dptr,a
      000472 E5*01            [12] 1594 	mov	a,(_glcdDrawGraph_sloc0_1_0 + 1)
      000474 A3               [24] 1595 	inc	dptr
      000475 F0               [24] 1596 	movx	@dptr,a
      000476 88 82            [24] 1597 	mov	dpl,r0
      000478 89 83            [24] 1598 	mov	dph,r1
      00047A C0 01            [24] 1599 	push	ar1
      00047C C0 00            [24] 1600 	push	ar0
      00047E 12r03rDC         [24] 1601 	lcall	_absolute
      000481 AB 82            [24] 1602 	mov	r3,dpl
      000483 D0 00            [24] 1603 	pop	ar0
      000485 D0 01            [24] 1604 	pop	ar1
      000487 D0 04            [24] 1605 	pop	ar4
      000489 D0 05            [24] 1606 	pop	ar5
      00048B D0 06            [24] 1607 	pop	ar6
      00048D D0 07            [24] 1608 	pop	ar7
      00048F 7A 00            [12] 1609 	mov	r2,#0x00
      000491 E5*02            [12] 1610 	mov	a,_glcdDrawGraph_sloc1_1_0
      000493 C3               [12] 1611 	clr	c
      000494 9B               [12] 1612 	subb	a,r3
      000495 FB               [12] 1613 	mov	r3,a
      000496 E5*03            [12] 1614 	mov	a,(_glcdDrawGraph_sloc1_1_0 + 1)
      000498 9A               [12] 1615 	subb	a,r2
      000499 FA               [12] 1616 	mov	r2,a
                                   1617 ;	src/lcd.c:389: if (slope > 0)
      00049A C3               [12] 1618 	clr	c
      00049B E4               [12] 1619 	clr	a
      00049C 9B               [12] 1620 	subb	a,r3
      00049D 74 80            [12] 1621 	mov	a,#(0x00 ^ 0x80)
      00049F 8A F0            [24] 1622 	mov	b,r2
      0004A1 63 F0 80         [24] 1623 	xrl	b,#0x80
      0004A4 95 F0            [12] 1624 	subb	a,b
      0004A6 E4               [12] 1625 	clr	a
      0004A7 33               [12] 1626 	rlc	a
      0004A8 FB               [12] 1627 	mov	r3,a
      0004A9 60 42            [24] 1628 	jz	00102$
                                   1629 ;	src/lcd.c:393: temp = x1;
      0004AB 90r00r2B         [24] 1630 	mov	dptr,#_glcdDrawGraph_temp_131072_77
      0004AE E8               [12] 1631 	mov	a,r0
      0004AF F0               [24] 1632 	movx	@dptr,a
      0004B0 E9               [12] 1633 	mov	a,r1
      0004B1 A3               [24] 1634 	inc	dptr
      0004B2 F0               [24] 1635 	movx	@dptr,a
                                   1636 ;	src/lcd.c:394: x1 = y1;
      0004B3 90r00r29         [24] 1637 	mov	dptr,#_glcdDrawGraph_x1_65536_75
      0004B6 EE               [12] 1638 	mov	a,r6
      0004B7 F0               [24] 1639 	movx	@dptr,a
      0004B8 EF               [12] 1640 	mov	a,r7
      0004B9 A3               [24] 1641 	inc	dptr
      0004BA F0               [24] 1642 	movx	@dptr,a
                                   1643 ;	src/lcd.c:395: y1 = temp;
      0004BB 90r00r2B         [24] 1644 	mov	dptr,#_glcdDrawGraph_temp_131072_77
      0004BE E0               [24] 1645 	movx	a,@dptr
      0004BF FE               [12] 1646 	mov	r6,a
      0004C0 A3               [24] 1647 	inc	dptr
      0004C1 E0               [24] 1648 	movx	a,@dptr
      0004C2 FF               [12] 1649 	mov	r7,a
      0004C3 90r00r23         [24] 1650 	mov	dptr,#_glcdDrawGraph_PARM_2
      0004C6 EE               [12] 1651 	mov	a,r6
      0004C7 F0               [24] 1652 	movx	@dptr,a
      0004C8 EF               [12] 1653 	mov	a,r7
      0004C9 A3               [24] 1654 	inc	dptr
      0004CA F0               [24] 1655 	movx	@dptr,a
                                   1656 ;	src/lcd.c:398: temp = x2;
      0004CB 90r00r2B         [24] 1657 	mov	dptr,#_glcdDrawGraph_temp_131072_77
      0004CE E5*00            [12] 1658 	mov	a,_glcdDrawGraph_sloc0_1_0
      0004D0 F0               [24] 1659 	movx	@dptr,a
      0004D1 E5*01            [12] 1660 	mov	a,(_glcdDrawGraph_sloc0_1_0 + 1)
      0004D3 A3               [24] 1661 	inc	dptr
      0004D4 F0               [24] 1662 	movx	@dptr,a
                                   1663 ;	src/lcd.c:399: x2 = y2;
      0004D5 90r00r25         [24] 1664 	mov	dptr,#_glcdDrawGraph_PARM_3
      0004D8 EC               [12] 1665 	mov	a,r4
      0004D9 F0               [24] 1666 	movx	@dptr,a
      0004DA ED               [12] 1667 	mov	a,r5
      0004DB A3               [24] 1668 	inc	dptr
      0004DC F0               [24] 1669 	movx	@dptr,a
                                   1670 ;	src/lcd.c:400: y2 = temp;
      0004DD 90r00r2B         [24] 1671 	mov	dptr,#_glcdDrawGraph_temp_131072_77
      0004E0 E0               [24] 1672 	movx	a,@dptr
      0004E1 FE               [12] 1673 	mov	r6,a
      0004E2 A3               [24] 1674 	inc	dptr
      0004E3 E0               [24] 1675 	movx	a,@dptr
      0004E4 FF               [12] 1676 	mov	r7,a
      0004E5 90r00r27         [24] 1677 	mov	dptr,#_glcdDrawGraph_PARM_4
      0004E8 EE               [12] 1678 	mov	a,r6
      0004E9 F0               [24] 1679 	movx	@dptr,a
      0004EA EF               [12] 1680 	mov	a,r7
      0004EB A3               [24] 1681 	inc	dptr
      0004EC F0               [24] 1682 	movx	@dptr,a
      0004ED                       1683 00102$:
                                   1684 ;	src/lcd.c:403: if (x1 > x2)
      0004ED 90r00r29         [24] 1685 	mov	dptr,#_glcdDrawGraph_x1_65536_75
      0004F0 E0               [24] 1686 	movx	a,@dptr
      0004F1 FE               [12] 1687 	mov	r6,a
      0004F2 A3               [24] 1688 	inc	dptr
      0004F3 E0               [24] 1689 	movx	a,@dptr
      0004F4 FF               [12] 1690 	mov	r7,a
      0004F5 90r00r25         [24] 1691 	mov	dptr,#_glcdDrawGraph_PARM_3
      0004F8 E0               [24] 1692 	movx	a,@dptr
      0004F9 FC               [12] 1693 	mov	r4,a
      0004FA A3               [24] 1694 	inc	dptr
      0004FB E0               [24] 1695 	movx	a,@dptr
      0004FC FD               [12] 1696 	mov	r5,a
      0004FD C3               [12] 1697 	clr	c
      0004FE EC               [12] 1698 	mov	a,r4
      0004FF 9E               [12] 1699 	subb	a,r6
      000500 ED               [12] 1700 	mov	a,r5
      000501 64 80            [12] 1701 	xrl	a,#0x80
      000503 8F F0            [24] 1702 	mov	b,r7
      000505 63 F0 80         [24] 1703 	xrl	b,#0x80
      000508 95 F0            [12] 1704 	subb	a,b
      00050A 50 50            [24] 1705 	jnc	00104$
                                   1706 ;	src/lcd.c:407: temp = x1;
      00050C 90r00r2D         [24] 1707 	mov	dptr,#_glcdDrawGraph_temp_131072_78
      00050F EE               [12] 1708 	mov	a,r6
      000510 F0               [24] 1709 	movx	@dptr,a
      000511 EF               [12] 1710 	mov	a,r7
      000512 A3               [24] 1711 	inc	dptr
      000513 F0               [24] 1712 	movx	@dptr,a
                                   1713 ;	src/lcd.c:408: x1 = x2;
      000514 90r00r29         [24] 1714 	mov	dptr,#_glcdDrawGraph_x1_65536_75
      000517 EC               [12] 1715 	mov	a,r4
      000518 F0               [24] 1716 	movx	@dptr,a
      000519 ED               [12] 1717 	mov	a,r5
      00051A A3               [24] 1718 	inc	dptr
      00051B F0               [24] 1719 	movx	@dptr,a
                                   1720 ;	src/lcd.c:409: x2 = temp;
      00051C 90r00r2D         [24] 1721 	mov	dptr,#_glcdDrawGraph_temp_131072_78
      00051F E0               [24] 1722 	movx	a,@dptr
      000520 FE               [12] 1723 	mov	r6,a
      000521 A3               [24] 1724 	inc	dptr
      000522 E0               [24] 1725 	movx	a,@dptr
      000523 FF               [12] 1726 	mov	r7,a
      000524 90r00r25         [24] 1727 	mov	dptr,#_glcdDrawGraph_PARM_3
      000527 EE               [12] 1728 	mov	a,r6
      000528 F0               [24] 1729 	movx	@dptr,a
      000529 EF               [12] 1730 	mov	a,r7
      00052A A3               [24] 1731 	inc	dptr
      00052B F0               [24] 1732 	movx	@dptr,a
                                   1733 ;	src/lcd.c:412: temp = y1;
      00052C 90r00r23         [24] 1734 	mov	dptr,#_glcdDrawGraph_PARM_2
      00052F E0               [24] 1735 	movx	a,@dptr
      000530 FE               [12] 1736 	mov	r6,a
      000531 A3               [24] 1737 	inc	dptr
      000532 E0               [24] 1738 	movx	a,@dptr
      000533 FF               [12] 1739 	mov	r7,a
      000534 90r00r2D         [24] 1740 	mov	dptr,#_glcdDrawGraph_temp_131072_78
      000537 EE               [12] 1741 	mov	a,r6
      000538 F0               [24] 1742 	movx	@dptr,a
      000539 EF               [12] 1743 	mov	a,r7
      00053A A3               [24] 1744 	inc	dptr
      00053B F0               [24] 1745 	movx	@dptr,a
                                   1746 ;	src/lcd.c:413: y1 = y2;
      00053C 90r00r27         [24] 1747 	mov	dptr,#_glcdDrawGraph_PARM_4
      00053F E0               [24] 1748 	movx	a,@dptr
      000540 FE               [12] 1749 	mov	r6,a
      000541 A3               [24] 1750 	inc	dptr
      000542 E0               [24] 1751 	movx	a,@dptr
      000543 FF               [12] 1752 	mov	r7,a
      000544 90r00r23         [24] 1753 	mov	dptr,#_glcdDrawGraph_PARM_2
      000547 EE               [12] 1754 	mov	a,r6
      000548 F0               [24] 1755 	movx	@dptr,a
      000549 EF               [12] 1756 	mov	a,r7
      00054A A3               [24] 1757 	inc	dptr
      00054B F0               [24] 1758 	movx	@dptr,a
                                   1759 ;	src/lcd.c:414: y2 = temp;
      00054C 90r00r2D         [24] 1760 	mov	dptr,#_glcdDrawGraph_temp_131072_78
      00054F E0               [24] 1761 	movx	a,@dptr
      000550 FE               [12] 1762 	mov	r6,a
      000551 A3               [24] 1763 	inc	dptr
      000552 E0               [24] 1764 	movx	a,@dptr
      000553 FF               [12] 1765 	mov	r7,a
      000554 90r00r27         [24] 1766 	mov	dptr,#_glcdDrawGraph_PARM_4
      000557 EE               [12] 1767 	mov	a,r6
      000558 F0               [24] 1768 	movx	@dptr,a
      000559 EF               [12] 1769 	mov	a,r7
      00055A A3               [24] 1770 	inc	dptr
      00055B F0               [24] 1771 	movx	@dptr,a
      00055C                       1772 00104$:
                                   1773 ;	src/lcd.c:417: int deltaX = x2 - x1;
      00055C 90r00r29         [24] 1774 	mov	dptr,#_glcdDrawGraph_x1_65536_75
      00055F E0               [24] 1775 	movx	a,@dptr
      000560 FE               [12] 1776 	mov	r6,a
      000561 A3               [24] 1777 	inc	dptr
      000562 E0               [24] 1778 	movx	a,@dptr
      000563 FF               [12] 1779 	mov	r7,a
      000564 90r00r25         [24] 1780 	mov	dptr,#_glcdDrawGraph_PARM_3
      000567 E0               [24] 1781 	movx	a,@dptr
      000568 FC               [12] 1782 	mov	r4,a
      000569 A3               [24] 1783 	inc	dptr
      00056A E0               [24] 1784 	movx	a,@dptr
      00056B FD               [12] 1785 	mov	r5,a
      00056C EC               [12] 1786 	mov	a,r4
      00056D C3               [12] 1787 	clr	c
      00056E 9E               [12] 1788 	subb	a,r6
      00056F FE               [12] 1789 	mov	r6,a
      000570 ED               [12] 1790 	mov	a,r5
      000571 9F               [12] 1791 	subb	a,r7
      000572 FF               [12] 1792 	mov	r7,a
                                   1793 ;	src/lcd.c:418: int deltaY = absolute(y2, y1);
      000573 90r00r27         [24] 1794 	mov	dptr,#_glcdDrawGraph_PARM_4
      000576 E0               [24] 1795 	movx	a,@dptr
      000577 FC               [12] 1796 	mov	r4,a
      000578 A3               [24] 1797 	inc	dptr
      000579 E0               [24] 1798 	movx	a,@dptr
      00057A FD               [12] 1799 	mov	r5,a
      00057B 90r00r23         [24] 1800 	mov	dptr,#_glcdDrawGraph_PARM_2
      00057E E0               [24] 1801 	movx	a,@dptr
      00057F F9               [12] 1802 	mov	r1,a
      000580 A3               [24] 1803 	inc	dptr
      000581 E0               [24] 1804 	movx	a,@dptr
      000582 FA               [12] 1805 	mov	r2,a
      000583 90r00r1E         [24] 1806 	mov	dptr,#_absolute_PARM_2
      000586 E9               [12] 1807 	mov	a,r1
      000587 F0               [24] 1808 	movx	@dptr,a
      000588 EA               [12] 1809 	mov	a,r2
      000589 A3               [24] 1810 	inc	dptr
      00058A F0               [24] 1811 	movx	@dptr,a
      00058B 8C 82            [24] 1812 	mov	dpl,r4
      00058D 8D 83            [24] 1813 	mov	dph,r5
      00058F C0 07            [24] 1814 	push	ar7
      000591 C0 06            [24] 1815 	push	ar6
      000593 C0 05            [24] 1816 	push	ar5
      000595 C0 04            [24] 1817 	push	ar4
      000597 C0 03            [24] 1818 	push	ar3
      000599 C0 02            [24] 1819 	push	ar2
      00059B C0 01            [24] 1820 	push	ar1
      00059D 12r03rDC         [24] 1821 	lcall	_absolute
      0005A0 A8 82            [24] 1822 	mov	r0,dpl
      0005A2 D0 01            [24] 1823 	pop	ar1
      0005A4 D0 02            [24] 1824 	pop	ar2
      0005A6 D0 03            [24] 1825 	pop	ar3
      0005A8 D0 04            [24] 1826 	pop	ar4
      0005AA D0 05            [24] 1827 	pop	ar5
      0005AC D0 06            [24] 1828 	pop	ar6
      0005AE D0 07            [24] 1829 	pop	ar7
      0005B0 88*02            [24] 1830 	mov	_glcdDrawGraph_sloc1_1_0,r0
      0005B2 75*03 00         [24] 1831 	mov	(_glcdDrawGraph_sloc1_1_0 + 1),#0x00
                                   1832 ;	src/lcd.c:419: int error = deltaX / 2;
      0005B5 90r00r00         [24] 1833 	mov	dptr,#__divsint_PARM_2
      0005B8 74 02            [12] 1834 	mov	a,#0x02
      0005BA F0               [24] 1835 	movx	@dptr,a
      0005BB E4               [12] 1836 	clr	a
      0005BC A3               [24] 1837 	inc	dptr
      0005BD F0               [24] 1838 	movx	@dptr,a
      0005BE 8E 82            [24] 1839 	mov	dpl,r6
      0005C0 8F 83            [24] 1840 	mov	dph,r7
      0005C2 C0 07            [24] 1841 	push	ar7
      0005C4 C0 06            [24] 1842 	push	ar6
      0005C6 C0 05            [24] 1843 	push	ar5
      0005C8 C0 04            [24] 1844 	push	ar4
      0005CA C0 03            [24] 1845 	push	ar3
      0005CC C0 02            [24] 1846 	push	ar2
      0005CE C0 01            [24] 1847 	push	ar1
      0005D0 12r00r00         [24] 1848 	lcall	__divsint
      0005D3 E5 82            [12] 1849 	mov	a,dpl
      0005D5 85 83 F0         [24] 1850 	mov	b,dph
      0005D8 D0 01            [24] 1851 	pop	ar1
      0005DA D0 02            [24] 1852 	pop	ar2
      0005DC D0 03            [24] 1853 	pop	ar3
      0005DE D0 04            [24] 1854 	pop	ar4
      0005E0 D0 05            [24] 1855 	pop	ar5
      0005E2 D0 06            [24] 1856 	pop	ar6
      0005E4 D0 07            [24] 1857 	pop	ar7
      0005E6 90r00r2F         [24] 1858 	mov	dptr,#_glcdDrawGraph_error_65537_79
      0005E9 F0               [24] 1859 	movx	@dptr,a
      0005EA E5 F0            [12] 1860 	mov	a,b
      0005EC A3               [24] 1861 	inc	dptr
      0005ED F0               [24] 1862 	movx	@dptr,a
                                   1863 ;	src/lcd.c:421: if (y1 < y2)
      0005EE C3               [12] 1864 	clr	c
      0005EF E9               [12] 1865 	mov	a,r1
      0005F0 9C               [12] 1866 	subb	a,r4
      0005F1 EA               [12] 1867 	mov	a,r2
      0005F2 64 80            [12] 1868 	xrl	a,#0x80
      0005F4 8D F0            [24] 1869 	mov	b,r5
      0005F6 63 F0 80         [24] 1870 	xrl	b,#0x80
      0005F9 95 F0            [12] 1871 	subb	a,b
      0005FB 50 0B            [24] 1872 	jnc	00106$
                                   1873 ;	src/lcd.c:423: yStep = 1;
      0005FD 90r00r31         [24] 1874 	mov	dptr,#_glcdDrawGraph_yStep_65537_79
      000600 74 01            [12] 1875 	mov	a,#0x01
      000602 F0               [24] 1876 	movx	@dptr,a
      000603 E4               [12] 1877 	clr	a
      000604 A3               [24] 1878 	inc	dptr
      000605 F0               [24] 1879 	movx	@dptr,a
      000606 80 08            [24] 1880 	sjmp	00107$
      000608                       1881 00106$:
                                   1882 ;	src/lcd.c:427: yStep = -1;
      000608 90r00r31         [24] 1883 	mov	dptr,#_glcdDrawGraph_yStep_65537_79
      00060B 74 FF            [12] 1884 	mov	a,#0xff
      00060D F0               [24] 1885 	movx	@dptr,a
      00060E A3               [24] 1886 	inc	dptr
      00060F F0               [24] 1887 	movx	@dptr,a
      000610                       1888 00107$:
                                   1889 ;	src/lcd.c:430: int y = y1;
      000610 90r00r23         [24] 1890 	mov	dptr,#_glcdDrawGraph_PARM_2
      000613 E0               [24] 1891 	movx	a,@dptr
      000614 FC               [12] 1892 	mov	r4,a
      000615 A3               [24] 1893 	inc	dptr
      000616 E0               [24] 1894 	movx	a,@dptr
      000617 FD               [12] 1895 	mov	r5,a
      000618 90r00r33         [24] 1896 	mov	dptr,#_glcdDrawGraph_y_65538_82
      00061B EC               [12] 1897 	mov	a,r4
      00061C F0               [24] 1898 	movx	@dptr,a
      00061D ED               [12] 1899 	mov	a,r5
      00061E A3               [24] 1900 	inc	dptr
      00061F F0               [24] 1901 	movx	@dptr,a
                                   1902 ;	src/lcd.c:431: for (int x = x1; x <= x2; x++)
      000620 90r00r29         [24] 1903 	mov	dptr,#_glcdDrawGraph_x1_65536_75
      000623 E0               [24] 1904 	movx	a,@dptr
      000624 FC               [12] 1905 	mov	r4,a
      000625 A3               [24] 1906 	inc	dptr
      000626 E0               [24] 1907 	movx	a,@dptr
      000627 FD               [12] 1908 	mov	r5,a
      000628 90r00r31         [24] 1909 	mov	dptr,#_glcdDrawGraph_yStep_65537_79
      00062B E0               [24] 1910 	movx	a,@dptr
      00062C F9               [12] 1911 	mov	r1,a
      00062D A3               [24] 1912 	inc	dptr
      00062E E0               [24] 1913 	movx	a,@dptr
      00062F FA               [12] 1914 	mov	r2,a
      000630 90r00r25         [24] 1915 	mov	dptr,#_glcdDrawGraph_PARM_3
      000633 E0               [24] 1916 	movx	a,@dptr
      000634 F5*00            [12] 1917 	mov	_glcdDrawGraph_sloc0_1_0,a
      000636 A3               [24] 1918 	inc	dptr
      000637 E0               [24] 1919 	movx	a,@dptr
      000638 F5*01            [12] 1920 	mov	(_glcdDrawGraph_sloc0_1_0 + 1),a
      00063A                       1921 00115$:
      00063A C3               [12] 1922 	clr	c
      00063B E5*00            [12] 1923 	mov	a,_glcdDrawGraph_sloc0_1_0
      00063D 9C               [12] 1924 	subb	a,r4
      00063E E5*01            [12] 1925 	mov	a,(_glcdDrawGraph_sloc0_1_0 + 1)
      000640 64 80            [12] 1926 	xrl	a,#0x80
      000642 8D F0            [24] 1927 	mov	b,r5
      000644 63 F0 80         [24] 1928 	xrl	b,#0x80
      000647 95 F0            [12] 1929 	subb	a,b
      000649 50 01            [24] 1930 	jnc	00151$
      00064B 22               [24] 1931 	ret
      00064C                       1932 00151$:
                                   1933 ;	src/lcd.c:433: if (slope > 0)
      00064C EB               [12] 1934 	mov	a,r3
      00064D 60 40            [24] 1935 	jz	00109$
                                   1936 ;	src/lcd.c:435: setPixel(x, y, 1);
      00064F C0 01            [24] 1937 	push	ar1
      000651 C0 02            [24] 1938 	push	ar2
      000653 8C 00            [24] 1939 	mov	ar0,r4
      000655 90r00r33         [24] 1940 	mov	dptr,#_glcdDrawGraph_y_65538_82
      000658 E0               [24] 1941 	movx	a,@dptr
      000659 F9               [12] 1942 	mov	r1,a
      00065A A3               [24] 1943 	inc	dptr
      00065B E0               [24] 1944 	movx	a,@dptr
      00065C FA               [12] 1945 	mov	r2,a
      00065D 90r00r0F         [24] 1946 	mov	dptr,#_setPixel_PARM_2
      000660 E9               [12] 1947 	mov	a,r1
      000661 F0               [24] 1948 	movx	@dptr,a
      000662 90r00r10         [24] 1949 	mov	dptr,#_setPixel_PARM_3
      000665 74 01            [12] 1950 	mov	a,#0x01
      000667 F0               [24] 1951 	movx	@dptr,a
      000668 88 82            [24] 1952 	mov	dpl,r0
      00066A C0 07            [24] 1953 	push	ar7
      00066C C0 06            [24] 1954 	push	ar6
      00066E C0 05            [24] 1955 	push	ar5
      000670 C0 04            [24] 1956 	push	ar4
      000672 C0 03            [24] 1957 	push	ar3
      000674 C0 02            [24] 1958 	push	ar2
      000676 C0 01            [24] 1959 	push	ar1
      000678 12r01rE1         [24] 1960 	lcall	_setPixel
      00067B D0 01            [24] 1961 	pop	ar1
      00067D D0 02            [24] 1962 	pop	ar2
      00067F D0 03            [24] 1963 	pop	ar3
      000681 D0 04            [24] 1964 	pop	ar4
      000683 D0 05            [24] 1965 	pop	ar5
      000685 D0 06            [24] 1966 	pop	ar6
      000687 D0 07            [24] 1967 	pop	ar7
      000689 D0 02            [24] 1968 	pop	ar2
      00068B D0 01            [24] 1969 	pop	ar1
      00068D 80 3C            [24] 1970 	sjmp	00110$
      00068F                       1971 00109$:
                                   1972 ;	src/lcd.c:439: setPixel(y, x, 1);
      00068F C0 01            [24] 1973 	push	ar1
      000691 C0 02            [24] 1974 	push	ar2
      000693 90r00r33         [24] 1975 	mov	dptr,#_glcdDrawGraph_y_65538_82
      000696 E0               [24] 1976 	movx	a,@dptr
      000697 F8               [12] 1977 	mov	r0,a
      000698 A3               [24] 1978 	inc	dptr
      000699 E0               [24] 1979 	movx	a,@dptr
      00069A FA               [12] 1980 	mov	r2,a
      00069B 90r00r0F         [24] 1981 	mov	dptr,#_setPixel_PARM_2
      00069E EC               [12] 1982 	mov	a,r4
      00069F F0               [24] 1983 	movx	@dptr,a
      0006A0 90r00r10         [24] 1984 	mov	dptr,#_setPixel_PARM_3
      0006A3 74 01            [12] 1985 	mov	a,#0x01
      0006A5 F0               [24] 1986 	movx	@dptr,a
      0006A6 88 82            [24] 1987 	mov	dpl,r0
      0006A8 C0 07            [24] 1988 	push	ar7
      0006AA C0 06            [24] 1989 	push	ar6
      0006AC C0 05            [24] 1990 	push	ar5
      0006AE C0 04            [24] 1991 	push	ar4
      0006B0 C0 03            [24] 1992 	push	ar3
      0006B2 C0 02            [24] 1993 	push	ar2
      0006B4 C0 01            [24] 1994 	push	ar1
      0006B6 12r01rE1         [24] 1995 	lcall	_setPixel
      0006B9 D0 01            [24] 1996 	pop	ar1
      0006BB D0 02            [24] 1997 	pop	ar2
      0006BD D0 03            [24] 1998 	pop	ar3
      0006BF D0 04            [24] 1999 	pop	ar4
      0006C1 D0 05            [24] 2000 	pop	ar5
      0006C3 D0 06            [24] 2001 	pop	ar6
      0006C5 D0 07            [24] 2002 	pop	ar7
                                   2003 ;	src/lcd.c:431: for (int x = x1; x <= x2; x++)
      0006C7 D0 02            [24] 2004 	pop	ar2
      0006C9 D0 01            [24] 2005 	pop	ar1
                                   2006 ;	src/lcd.c:439: setPixel(y, x, 1);
      0006CB                       2007 00110$:
                                   2008 ;	src/lcd.c:441: error = error - deltaY;
      0006CB C0 01            [24] 2009 	push	ar1
      0006CD C0 02            [24] 2010 	push	ar2
      0006CF 90r00r2F         [24] 2011 	mov	dptr,#_glcdDrawGraph_error_65537_79
      0006D2 E0               [24] 2012 	movx	a,@dptr
      0006D3 F8               [12] 2013 	mov	r0,a
      0006D4 A3               [24] 2014 	inc	dptr
      0006D5 E0               [24] 2015 	movx	a,@dptr
      0006D6 FA               [12] 2016 	mov	r2,a
      0006D7 90r00r2F         [24] 2017 	mov	dptr,#_glcdDrawGraph_error_65537_79
      0006DA E8               [12] 2018 	mov	a,r0
      0006DB C3               [12] 2019 	clr	c
      0006DC 95*02            [12] 2020 	subb	a,_glcdDrawGraph_sloc1_1_0
      0006DE F0               [24] 2021 	movx	@dptr,a
      0006DF EA               [12] 2022 	mov	a,r2
      0006E0 95*03            [12] 2023 	subb	a,(_glcdDrawGraph_sloc1_1_0 + 1)
      0006E2 A3               [24] 2024 	inc	dptr
      0006E3 F0               [24] 2025 	movx	@dptr,a
                                   2026 ;	src/lcd.c:442: if (error < 0)
      0006E4 90r00r2F         [24] 2027 	mov	dptr,#_glcdDrawGraph_error_65537_79
      0006E7 E0               [24] 2028 	movx	a,@dptr
      0006E8 F5*04            [12] 2029 	mov	_glcdDrawGraph_sloc2_1_0,a
      0006EA A3               [24] 2030 	inc	dptr
      0006EB E0               [24] 2031 	movx	a,@dptr
      0006EC F5*05            [12] 2032 	mov	(_glcdDrawGraph_sloc2_1_0 + 1),a
      0006EE D0 02            [24] 2033 	pop	ar2
      0006F0 D0 01            [24] 2034 	pop	ar1
      0006F2 30 E7 22         [24] 2035 	jnb	acc.7,00116$
                                   2036 ;	src/lcd.c:444: y = y + yStep;
      0006F5 C0 03            [24] 2037 	push	ar3
      0006F7 90r00r33         [24] 2038 	mov	dptr,#_glcdDrawGraph_y_65538_82
      0006FA E0               [24] 2039 	movx	a,@dptr
      0006FB F8               [12] 2040 	mov	r0,a
      0006FC A3               [24] 2041 	inc	dptr
      0006FD E0               [24] 2042 	movx	a,@dptr
      0006FE FB               [12] 2043 	mov	r3,a
      0006FF 90r00r33         [24] 2044 	mov	dptr,#_glcdDrawGraph_y_65538_82
      000702 E9               [12] 2045 	mov	a,r1
      000703 28               [12] 2046 	add	a,r0
      000704 F0               [24] 2047 	movx	@dptr,a
      000705 EA               [12] 2048 	mov	a,r2
      000706 3B               [12] 2049 	addc	a,r3
      000707 A3               [24] 2050 	inc	dptr
      000708 F0               [24] 2051 	movx	@dptr,a
                                   2052 ;	src/lcd.c:445: error = error + deltaX;
      000709 90r00r2F         [24] 2053 	mov	dptr,#_glcdDrawGraph_error_65537_79
      00070C EE               [12] 2054 	mov	a,r6
      00070D 25*04            [12] 2055 	add	a,_glcdDrawGraph_sloc2_1_0
      00070F F0               [24] 2056 	movx	@dptr,a
      000710 EF               [12] 2057 	mov	a,r7
      000711 35*05            [12] 2058 	addc	a,(_glcdDrawGraph_sloc2_1_0 + 1)
      000713 A3               [24] 2059 	inc	dptr
      000714 F0               [24] 2060 	movx	@dptr,a
                                   2061 ;	src/lcd.c:431: for (int x = x1; x <= x2; x++)
      000715 D0 03            [24] 2062 	pop	ar3
                                   2063 ;	src/lcd.c:445: error = error + deltaX;
      000717                       2064 00116$:
                                   2065 ;	src/lcd.c:431: for (int x = x1; x <= x2; x++)
      000717 0C               [12] 2066 	inc	r4
      000718 BC 00 01         [24] 2067 	cjne	r4,#0x00,00154$
      00071B 0D               [12] 2068 	inc	r5
      00071C                       2069 00154$:
                                   2070 ;	src/lcd.c:448: }
      00071C 02r06r3A         [24] 2071 	ljmp	00115$
                                   2072 ;------------------------------------------------------------
                                   2073 ;Allocation info for local variables in function 'itoa'
                                   2074 ;------------------------------------------------------------
                                   2075 ;sloc0                     Allocated with name '_itoa_sloc0_1_0'
                                   2076 ;result                    Allocated with name '_itoa_PARM_2'
                                   2077 ;val                       Allocated with name '_itoa_val_65536_88'
                                   2078 ;count                     Allocated with name '_itoa_count_65537_91'
                                   2079 ;digits                    Allocated with name '_itoa_digits_65537_91'
                                   2080 ;i                         Allocated with name '_itoa_i_65538_93'
                                   2081 ;j                         Allocated with name '_itoa_j_131074_94'
                                   2082 ;------------------------------------------------------------
                                   2083 ;	src/lcd.c:457: uint8_t itoa(uint8_t val, char result[])
                                   2084 ;	-----------------------------------------
                                   2085 ;	 function itoa
                                   2086 ;	-----------------------------------------
      00071F                       2087 _itoa:
      00071F E5 82            [12] 2088 	mov	a,dpl
      000721 90r00r38         [24] 2089 	mov	dptr,#_itoa_val_65536_88
      000724 F0               [24] 2090 	movx	@dptr,a
                                   2091 ;	src/lcd.c:459: if (val == 0)
      000725 E0               [24] 2092 	movx	a,@dptr
      000726 70 1A            [24] 2093 	jnz	00114$
                                   2094 ;	src/lcd.c:461: result[0] = '0';
      000728 90r00r35         [24] 2095 	mov	dptr,#_itoa_PARM_2
      00072B E0               [24] 2096 	movx	a,@dptr
      00072C FD               [12] 2097 	mov	r5,a
      00072D A3               [24] 2098 	inc	dptr
      00072E E0               [24] 2099 	movx	a,@dptr
      00072F FE               [12] 2100 	mov	r6,a
      000730 A3               [24] 2101 	inc	dptr
      000731 E0               [24] 2102 	movx	a,@dptr
      000732 FF               [12] 2103 	mov	r7,a
      000733 8D 82            [24] 2104 	mov	dpl,r5
      000735 8E 83            [24] 2105 	mov	dph,r6
      000737 8F F0            [24] 2106 	mov	b,r7
      000739 74 30            [12] 2107 	mov	a,#0x30
      00073B 12r00r00         [24] 2108 	lcall	__gptrput
                                   2109 ;	src/lcd.c:462: return 1;
      00073E 75 82 01         [24] 2110 	mov	dpl,#0x01
      000741 22               [24] 2111 	ret
                                   2112 ;	src/lcd.c:467: while (val != 0)
      000742                       2113 00114$:
      000742 7F 00            [12] 2114 	mov	r7,#0x00
      000744                       2115 00103$:
      000744 90r00r38         [24] 2116 	mov	dptr,#_itoa_val_65536_88
      000747 E0               [24] 2117 	movx	a,@dptr
      000748 FE               [12] 2118 	mov	r6,a
      000749 E0               [24] 2119 	movx	a,@dptr
      00074A 60 52            [24] 2120 	jz	00105$
                                   2121 ;	src/lcd.c:470: digits[count] = val % 10;
      00074C EF               [12] 2122 	mov	a,r7
      00074D 24r39            [12] 2123 	add	a,#_itoa_digits_65537_91
      00074F FC               [12] 2124 	mov	r4,a
      000750 E4               [12] 2125 	clr	a
      000751 34s00            [12] 2126 	addc	a,#(_itoa_digits_65537_91 >> 8)
      000753 FD               [12] 2127 	mov	r5,a
      000754 7B 00            [12] 2128 	mov	r3,#0x00
      000756 90r00r00         [24] 2129 	mov	dptr,#__modsint_PARM_2
      000759 74 0A            [12] 2130 	mov	a,#0x0a
      00075B F0               [24] 2131 	movx	@dptr,a
      00075C E4               [12] 2132 	clr	a
      00075D A3               [24] 2133 	inc	dptr
      00075E F0               [24] 2134 	movx	@dptr,a
      00075F 8E 82            [24] 2135 	mov	dpl,r6
      000761 8B 83            [24] 2136 	mov	dph,r3
      000763 C0 07            [24] 2137 	push	ar7
      000765 C0 06            [24] 2138 	push	ar6
      000767 C0 05            [24] 2139 	push	ar5
      000769 C0 04            [24] 2140 	push	ar4
      00076B C0 03            [24] 2141 	push	ar3
      00076D 12r00r00         [24] 2142 	lcall	__modsint
      000770 A9 82            [24] 2143 	mov	r1,dpl
      000772 D0 03            [24] 2144 	pop	ar3
      000774 D0 04            [24] 2145 	pop	ar4
      000776 D0 05            [24] 2146 	pop	ar5
      000778 D0 06            [24] 2147 	pop	ar6
      00077A 8C 82            [24] 2148 	mov	dpl,r4
      00077C 8D 83            [24] 2149 	mov	dph,r5
      00077E E9               [12] 2150 	mov	a,r1
      00077F F0               [24] 2151 	movx	@dptr,a
                                   2152 ;	src/lcd.c:472: val = val / 10;
      000780 90r00r00         [24] 2153 	mov	dptr,#__divsint_PARM_2
      000783 74 0A            [12] 2154 	mov	a,#0x0a
      000785 F0               [24] 2155 	movx	@dptr,a
      000786 E4               [12] 2156 	clr	a
      000787 A3               [24] 2157 	inc	dptr
      000788 F0               [24] 2158 	movx	@dptr,a
      000789 8E 82            [24] 2159 	mov	dpl,r6
      00078B 8B 83            [24] 2160 	mov	dph,r3
      00078D 12r00r00         [24] 2161 	lcall	__divsint
      000790 AD 82            [24] 2162 	mov	r5,dpl
      000792 AE 83            [24] 2163 	mov	r6,dph
      000794 D0 07            [24] 2164 	pop	ar7
      000796 90r00r38         [24] 2165 	mov	dptr,#_itoa_val_65536_88
      000799 ED               [12] 2166 	mov	a,r5
      00079A F0               [24] 2167 	movx	@dptr,a
                                   2168 ;	src/lcd.c:473: count++;
      00079B 0F               [12] 2169 	inc	r7
      00079C 80 A6            [24] 2170 	sjmp	00103$
      00079E                       2171 00105$:
                                   2172 ;	src/lcd.c:478: for (int j = count - 1; j >= 0; j--)
      00079E 8F 06            [24] 2173 	mov	ar6,r7
      0007A0 7D 00            [12] 2174 	mov	r5,#0x00
      0007A2 1F               [12] 2175 	dec	r7
      0007A3 BF FF 01         [24] 2176 	cjne	r7,#0xff,00136$
      0007A6 1D               [12] 2177 	dec	r5
      0007A7                       2178 00136$:
      0007A7 90r00r35         [24] 2179 	mov	dptr,#_itoa_PARM_2
      0007AA E0               [24] 2180 	movx	a,@dptr
      0007AB F5*06            [12] 2181 	mov	_itoa_sloc0_1_0,a
      0007AD A3               [24] 2182 	inc	dptr
      0007AE E0               [24] 2183 	movx	a,@dptr
      0007AF F5*07            [12] 2184 	mov	(_itoa_sloc0_1_0 + 1),a
      0007B1 A3               [24] 2185 	inc	dptr
      0007B2 E0               [24] 2186 	movx	a,@dptr
      0007B3 F5*08            [12] 2187 	mov	(_itoa_sloc0_1_0 + 2),a
      0007B5 79 00            [12] 2188 	mov	r1,#0x00
      0007B7                       2189 00108$:
      0007B7 ED               [12] 2190 	mov	a,r5
      0007B8 20 E7 2D         [24] 2191 	jb	acc.7,00106$
                                   2192 ;	src/lcd.c:480: result[i] = '0' + digits[j];
      0007BB C0 06            [24] 2193 	push	ar6
      0007BD E9               [12] 2194 	mov	a,r1
      0007BE 25*06            [12] 2195 	add	a,_itoa_sloc0_1_0
      0007C0 F8               [12] 2196 	mov	r0,a
      0007C1 E4               [12] 2197 	clr	a
      0007C2 35*07            [12] 2198 	addc	a,(_itoa_sloc0_1_0 + 1)
      0007C4 FC               [12] 2199 	mov	r4,a
      0007C5 AE*08            [24] 2200 	mov	r6,(_itoa_sloc0_1_0 + 2)
      0007C7 EF               [12] 2201 	mov	a,r7
      0007C8 24r39            [12] 2202 	add	a,#_itoa_digits_65537_91
      0007CA F5 82            [12] 2203 	mov	dpl,a
      0007CC ED               [12] 2204 	mov	a,r5
      0007CD 34s00            [12] 2205 	addc	a,#(_itoa_digits_65537_91 >> 8)
      0007CF F5 83            [12] 2206 	mov	dph,a
      0007D1 E0               [24] 2207 	movx	a,@dptr
      0007D2 24 30            [12] 2208 	add	a,#0x30
      0007D4 FB               [12] 2209 	mov	r3,a
      0007D5 88 82            [24] 2210 	mov	dpl,r0
      0007D7 8C 83            [24] 2211 	mov	dph,r4
      0007D9 8E F0            [24] 2212 	mov	b,r6
      0007DB 12r00r00         [24] 2213 	lcall	__gptrput
                                   2214 ;	src/lcd.c:481: i++;
      0007DE 09               [12] 2215 	inc	r1
                                   2216 ;	src/lcd.c:478: for (int j = count - 1; j >= 0; j--)
      0007DF 1F               [12] 2217 	dec	r7
      0007E0 BF FF 01         [24] 2218 	cjne	r7,#0xff,00138$
      0007E3 1D               [12] 2219 	dec	r5
      0007E4                       2220 00138$:
      0007E4 D0 06            [24] 2221 	pop	ar6
      0007E6 80 CF            [24] 2222 	sjmp	00108$
      0007E8                       2223 00106$:
                                   2224 ;	src/lcd.c:484: return count;
      0007E8 8E 82            [24] 2225 	mov	dpl,r6
                                   2226 ;	src/lcd.c:485: }
      0007EA 22               [24] 2227 	ret
                                   2228 ;------------------------------------------------------------
                                   2229 ;Allocation info for local variables in function 'glcdUpdateSpo2'
                                   2230 ;------------------------------------------------------------
                                   2231 ;oxygen                    Allocated with name '_glcdUpdateSpo2_oxygen_65536_96'
                                   2232 ;oxygenLevel               Allocated with name '_glcdUpdateSpo2_oxygenLevel_65536_97'
                                   2233 ;size                      Allocated with name '_glcdUpdateSpo2_size_65536_97'
                                   2234 ;------------------------------------------------------------
                                   2235 ;	src/lcd.c:492: void glcdUpdateSpo2(uint8_t oxygen)
                                   2236 ;	-----------------------------------------
                                   2237 ;	 function glcdUpdateSpo2
                                   2238 ;	-----------------------------------------
      0007EB                       2239 _glcdUpdateSpo2:
      0007EB E5 82            [12] 2240 	mov	a,dpl
      0007ED 90r00r3C         [24] 2241 	mov	dptr,#_glcdUpdateSpo2_oxygen_65536_96
      0007F0 F0               [24] 2242 	movx	@dptr,a
                                   2243 ;	src/lcd.c:495: uint8_t size = itoa(oxygen, oxygenLevel);
      0007F1 E0               [24] 2244 	movx	a,@dptr
      0007F2 FF               [12] 2245 	mov	r7,a
      0007F3 90r00r35         [24] 2246 	mov	dptr,#_itoa_PARM_2
      0007F6 74r3D            [12] 2247 	mov	a,#_glcdUpdateSpo2_oxygenLevel_65536_97
      0007F8 F0               [24] 2248 	movx	@dptr,a
      0007F9 74s00            [12] 2249 	mov	a,#(_glcdUpdateSpo2_oxygenLevel_65536_97 >> 8)
      0007FB A3               [24] 2250 	inc	dptr
      0007FC F0               [24] 2251 	movx	@dptr,a
      0007FD E4               [12] 2252 	clr	a
      0007FE A3               [24] 2253 	inc	dptr
      0007FF F0               [24] 2254 	movx	@dptr,a
      000800 8F 82            [24] 2255 	mov	dpl,r7
      000802 12r07r1F         [24] 2256 	lcall	_itoa
                                   2257 ;	src/lcd.c:496: oxygenLevel[size] = '%';
      000805 E5 82            [12] 2258 	mov	a,dpl
      000807 FF               [12] 2259 	mov	r7,a
      000808 24r3D            [12] 2260 	add	a,#_glcdUpdateSpo2_oxygenLevel_65536_97
      00080A F5 82            [12] 2261 	mov	dpl,a
      00080C E4               [12] 2262 	clr	a
      00080D 34s00            [12] 2263 	addc	a,#(_glcdUpdateSpo2_oxygenLevel_65536_97 >> 8)
      00080F F5 83            [12] 2264 	mov	dph,a
      000811 74 25            [12] 2265 	mov	a,#0x25
      000813 F0               [24] 2266 	movx	@dptr,a
                                   2267 ;	src/lcd.c:497: oxygenLevel[size + 1] = '\0';
      000814 0F               [12] 2268 	inc	r7
      000815 EF               [12] 2269 	mov	a,r7
      000816 33               [12] 2270 	rlc	a
      000817 95 E0            [12] 2271 	subb	a,acc
      000819 FE               [12] 2272 	mov	r6,a
      00081A EF               [12] 2273 	mov	a,r7
      00081B 24r3D            [12] 2274 	add	a,#_glcdUpdateSpo2_oxygenLevel_65536_97
      00081D F5 82            [12] 2275 	mov	dpl,a
      00081F EE               [12] 2276 	mov	a,r6
      000820 34s00            [12] 2277 	addc	a,#(_glcdUpdateSpo2_oxygenLevel_65536_97 >> 8)
      000822 F5 83            [12] 2278 	mov	dph,a
      000824 E4               [12] 2279 	clr	a
      000825 F0               [24] 2280 	movx	@dptr,a
                                   2281 ;	src/lcd.c:498: gcldClearString(SPO2_X_LOC, 1, 5);
      000826 90r00r16         [24] 2282 	mov	dptr,#_gcldClearString_PARM_2
      000829 04               [12] 2283 	inc	a
      00082A F0               [24] 2284 	movx	@dptr,a
      00082B 90r00r17         [24] 2285 	mov	dptr,#_gcldClearString_PARM_3
      00082E 74 05            [12] 2286 	mov	a,#0x05
      000830 F0               [24] 2287 	movx	@dptr,a
      000831 75 82 46         [24] 2288 	mov	dpl,#0x46
      000834 12r03r32         [24] 2289 	lcall	_gcldClearString
                                   2290 ;	src/lcd.c:499: glcdWriteString(SPO2_X_LOC, 1, oxygenLevel);
      000837 90r00r19         [24] 2291 	mov	dptr,#_glcdWriteString_PARM_2
      00083A 74 01            [12] 2292 	mov	a,#0x01
      00083C F0               [24] 2293 	movx	@dptr,a
      00083D 90r00r1A         [24] 2294 	mov	dptr,#_glcdWriteString_PARM_3
      000840 74r3D            [12] 2295 	mov	a,#_glcdUpdateSpo2_oxygenLevel_65536_97
      000842 F0               [24] 2296 	movx	@dptr,a
      000843 74s00            [12] 2297 	mov	a,#(_glcdUpdateSpo2_oxygenLevel_65536_97 >> 8)
      000845 A3               [24] 2298 	inc	dptr
      000846 F0               [24] 2299 	movx	@dptr,a
      000847 E4               [12] 2300 	clr	a
      000848 A3               [24] 2301 	inc	dptr
      000849 F0               [24] 2302 	movx	@dptr,a
      00084A 75 82 46         [24] 2303 	mov	dpl,#0x46
                                   2304 ;	src/lcd.c:500: }
      00084D 02r03r79         [24] 2305 	ljmp	_glcdWriteString
                                   2306 ;------------------------------------------------------------
                                   2307 ;Allocation info for local variables in function 'glcdUpdateBpm'
                                   2308 ;------------------------------------------------------------
                                   2309 ;bpm                       Allocated with name '_glcdUpdateBpm_bpm_65536_98'
                                   2310 ;bpmString                 Allocated with name '_glcdUpdateBpm_bpmString_65536_99'
                                   2311 ;size                      Allocated with name '_glcdUpdateBpm_size_65536_99'
                                   2312 ;------------------------------------------------------------
                                   2313 ;	src/lcd.c:507: void glcdUpdateBpm(uint8_t bpm)
                                   2314 ;	-----------------------------------------
                                   2315 ;	 function glcdUpdateBpm
                                   2316 ;	-----------------------------------------
      000850                       2317 _glcdUpdateBpm:
      000850 E5 82            [12] 2318 	mov	a,dpl
      000852 90r00r42         [24] 2319 	mov	dptr,#_glcdUpdateBpm_bpm_65536_98
      000855 F0               [24] 2320 	movx	@dptr,a
                                   2321 ;	src/lcd.c:510: uint8_t size = itoa(bpm, bpmString);
      000856 E0               [24] 2322 	movx	a,@dptr
      000857 FF               [12] 2323 	mov	r7,a
      000858 90r00r35         [24] 2324 	mov	dptr,#_itoa_PARM_2
      00085B 74r43            [12] 2325 	mov	a,#_glcdUpdateBpm_bpmString_65536_99
      00085D F0               [24] 2326 	movx	@dptr,a
      00085E 74s00            [12] 2327 	mov	a,#(_glcdUpdateBpm_bpmString_65536_99 >> 8)
      000860 A3               [24] 2328 	inc	dptr
      000861 F0               [24] 2329 	movx	@dptr,a
      000862 E4               [12] 2330 	clr	a
      000863 A3               [24] 2331 	inc	dptr
      000864 F0               [24] 2332 	movx	@dptr,a
      000865 8F 82            [24] 2333 	mov	dpl,r7
      000867 12r07r1F         [24] 2334 	lcall	_itoa
                                   2335 ;	src/lcd.c:511: bpmString[size] = '\0';
      00086A E5 82            [12] 2336 	mov	a,dpl
      00086C 24r43            [12] 2337 	add	a,#_glcdUpdateBpm_bpmString_65536_99
      00086E F5 82            [12] 2338 	mov	dpl,a
      000870 E4               [12] 2339 	clr	a
      000871 34s00            [12] 2340 	addc	a,#(_glcdUpdateBpm_bpmString_65536_99 >> 8)
      000873 F5 83            [12] 2341 	mov	dph,a
      000875 E4               [12] 2342 	clr	a
      000876 F0               [24] 2343 	movx	@dptr,a
                                   2344 ;	src/lcd.c:512: gcldClearString(BPM_X_LOC, 1, 5);
      000877 90r00r16         [24] 2345 	mov	dptr,#_gcldClearString_PARM_2
      00087A 04               [12] 2346 	inc	a
      00087B F0               [24] 2347 	movx	@dptr,a
      00087C 90r00r17         [24] 2348 	mov	dptr,#_gcldClearString_PARM_3
      00087F 74 05            [12] 2349 	mov	a,#0x05
      000881 F0               [24] 2350 	movx	@dptr,a
      000882 75 82 64         [24] 2351 	mov	dpl,#0x64
      000885 12r03r32         [24] 2352 	lcall	_gcldClearString
                                   2353 ;	src/lcd.c:513: glcdWriteString(BPM_X_LOC, 1, bpmString);
      000888 90r00r19         [24] 2354 	mov	dptr,#_glcdWriteString_PARM_2
      00088B 74 01            [12] 2355 	mov	a,#0x01
      00088D F0               [24] 2356 	movx	@dptr,a
      00088E 90r00r1A         [24] 2357 	mov	dptr,#_glcdWriteString_PARM_3
      000891 74r43            [12] 2358 	mov	a,#_glcdUpdateBpm_bpmString_65536_99
      000893 F0               [24] 2359 	movx	@dptr,a
      000894 74s00            [12] 2360 	mov	a,#(_glcdUpdateBpm_bpmString_65536_99 >> 8)
      000896 A3               [24] 2361 	inc	dptr
      000897 F0               [24] 2362 	movx	@dptr,a
      000898 E4               [12] 2363 	clr	a
      000899 A3               [24] 2364 	inc	dptr
      00089A F0               [24] 2365 	movx	@dptr,a
      00089B 75 82 64         [24] 2366 	mov	dpl,#0x64
                                   2367 ;	src/lcd.c:514: }
      00089E 02r03r79         [24] 2368 	ljmp	_glcdWriteString
                                   2369 ;------------------------------------------------------------
                                   2370 ;Allocation info for local variables in function 'glcdUpdateStatus'
                                   2371 ;------------------------------------------------------------
                                   2372 ;status                    Allocated with name '_glcdUpdateStatus_status_65536_100'
                                   2373 ;------------------------------------------------------------
                                   2374 ;	src/lcd.c:521: void glcdUpdateStatus(char* status)
                                   2375 ;	-----------------------------------------
                                   2376 ;	 function glcdUpdateStatus
                                   2377 ;	-----------------------------------------
      0008A1                       2378 _glcdUpdateStatus:
      0008A1 AF F0            [24] 2379 	mov	r7,b
      0008A3 AE 83            [24] 2380 	mov	r6,dph
      0008A5 E5 82            [12] 2381 	mov	a,dpl
      0008A7 90r00r47         [24] 2382 	mov	dptr,#_glcdUpdateStatus_status_65536_100
      0008AA F0               [24] 2383 	movx	@dptr,a
      0008AB EE               [12] 2384 	mov	a,r6
      0008AC A3               [24] 2385 	inc	dptr
      0008AD F0               [24] 2386 	movx	@dptr,a
      0008AE EF               [12] 2387 	mov	a,r7
      0008AF A3               [24] 2388 	inc	dptr
      0008B0 F0               [24] 2389 	movx	@dptr,a
                                   2390 ;	src/lcd.c:523: gcldClearString(STATUS_X_LOC, 1, 15);
      0008B1 90r00r16         [24] 2391 	mov	dptr,#_gcldClearString_PARM_2
      0008B4 74 01            [12] 2392 	mov	a,#0x01
      0008B6 F0               [24] 2393 	movx	@dptr,a
      0008B7 90r00r17         [24] 2394 	mov	dptr,#_gcldClearString_PARM_3
      0008BA 74 0F            [12] 2395 	mov	a,#0x0f
      0008BC F0               [24] 2396 	movx	@dptr,a
      0008BD 75 82 02         [24] 2397 	mov	dpl,#0x02
      0008C0 12r03r32         [24] 2398 	lcall	_gcldClearString
                                   2399 ;	src/lcd.c:524: glcdWriteString(STATUS_X_LOC, 1, status);
      0008C3 90r00r47         [24] 2400 	mov	dptr,#_glcdUpdateStatus_status_65536_100
      0008C6 E0               [24] 2401 	movx	a,@dptr
      0008C7 FD               [12] 2402 	mov	r5,a
      0008C8 A3               [24] 2403 	inc	dptr
      0008C9 E0               [24] 2404 	movx	a,@dptr
      0008CA FE               [12] 2405 	mov	r6,a
      0008CB A3               [24] 2406 	inc	dptr
      0008CC E0               [24] 2407 	movx	a,@dptr
      0008CD FF               [12] 2408 	mov	r7,a
      0008CE 90r00r19         [24] 2409 	mov	dptr,#_glcdWriteString_PARM_2
      0008D1 74 01            [12] 2410 	mov	a,#0x01
      0008D3 F0               [24] 2411 	movx	@dptr,a
      0008D4 90r00r1A         [24] 2412 	mov	dptr,#_glcdWriteString_PARM_3
      0008D7 ED               [12] 2413 	mov	a,r5
      0008D8 F0               [24] 2414 	movx	@dptr,a
      0008D9 EE               [12] 2415 	mov	a,r6
      0008DA A3               [24] 2416 	inc	dptr
      0008DB F0               [24] 2417 	movx	@dptr,a
      0008DC EF               [12] 2418 	mov	a,r7
      0008DD A3               [24] 2419 	inc	dptr
      0008DE F0               [24] 2420 	movx	@dptr,a
      0008DF 75 82 02         [24] 2421 	mov	dpl,#0x02
                                   2422 ;	src/lcd.c:525: }
      0008E2 02r03r79         [24] 2423 	ljmp	_glcdWriteString
                                   2424 ;------------------------------------------------------------
                                   2425 ;Allocation info for local variables in function 'glcdInit'
                                   2426 ;------------------------------------------------------------
                                   2427 ;	src/lcd.c:531: void glcdInit()
                                   2428 ;	-----------------------------------------
                                   2429 ;	 function glcdInit
                                   2430 ;	-----------------------------------------
      0008E5                       2431 _glcdInit:
                                   2432 ;	src/lcd.c:533: GLCD_RESET = 0;
                                   2433 ;	assignBit
      0008E5 C2 91            [12] 2434 	clr	_P1_1
                                   2435 ;	src/lcd.c:534: delay(1000);
      0008E7 90 03 E8         [24] 2436 	mov	dptr,#0x03e8
      0008EA 12r00r00         [24] 2437 	lcall	_delay
                                   2438 ;	src/lcd.c:535: GLCD_RESET = 1;
                                   2439 ;	assignBit
      0008ED D2 91            [12] 2440 	setb	_P1_1
                                   2441 ;	src/lcd.c:537: gLcdWriteToRegister(COMMAND_WRITE, 0xB8); // select first page 0
      0008EF 90r00r02         [24] 2442 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      0008F2 74 B8            [12] 2443 	mov	a,#0xb8
      0008F4 F0               [24] 2444 	movx	@dptr,a
      0008F5 75 82 00         [24] 2445 	mov	dpl,#0x00
      0008F8 12r00r2F         [24] 2446 	lcall	_gLcdWriteToRegister
                                   2447 ;	src/lcd.c:538: delay(100);
      0008FB 90 00 64         [24] 2448 	mov	dptr,#0x0064
      0008FE 12r00r00         [24] 2449 	lcall	_delay
                                   2450 ;	src/lcd.c:540: gLcdWriteToRegister(COMMAND_WRITE, 0x40); // select row 0
      000901 90r00r02         [24] 2451 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      000904 74 40            [12] 2452 	mov	a,#0x40
      000906 F0               [24] 2453 	movx	@dptr,a
      000907 75 82 00         [24] 2454 	mov	dpl,#0x00
      00090A 12r00r2F         [24] 2455 	lcall	_gLcdWriteToRegister
                                   2456 ;	src/lcd.c:541: delay(100);
      00090D 90 00 64         [24] 2457 	mov	dptr,#0x0064
      000910 12r00r00         [24] 2458 	lcall	_delay
                                   2459 ;	src/lcd.c:543: gLcdWriteToRegister(COMMAND_WRITE, 0x3F); // display on
      000913 90r00r02         [24] 2460 	mov	dptr,#_gLcdWriteToRegister_PARM_2
      000916 74 3F            [12] 2461 	mov	a,#0x3f
      000918 F0               [24] 2462 	movx	@dptr,a
      000919 75 82 00         [24] 2463 	mov	dpl,#0x00
      00091C 12r00r2F         [24] 2464 	lcall	_gLcdWriteToRegister
                                   2465 ;	src/lcd.c:544: delay(100);
      00091F 90 00 64         [24] 2466 	mov	dptr,#0x0064
      000922 12r00r00         [24] 2467 	lcall	_delay
                                   2468 ;	src/lcd.c:546: glcdClear();
      000925 12r02r95         [24] 2469 	lcall	_glcdClear
                                   2470 ;	src/lcd.c:548: glcdWriteString(STATUS_X_LOC, 0, "STATUS");
      000928 90r00r19         [24] 2471 	mov	dptr,#_glcdWriteString_PARM_2
      00092B E4               [12] 2472 	clr	a
      00092C F0               [24] 2473 	movx	@dptr,a
      00092D 90r00r1A         [24] 2474 	mov	dptr,#_glcdWriteString_PARM_3
      000930 74r32            [12] 2475 	mov	a,#___str_3
      000932 F0               [24] 2476 	movx	@dptr,a
      000933 74s02            [12] 2477 	mov	a,#(___str_3 >> 8)
      000935 A3               [24] 2478 	inc	dptr
      000936 F0               [24] 2479 	movx	@dptr,a
      000937 74 80            [12] 2480 	mov	a,#0x80
      000939 A3               [24] 2481 	inc	dptr
      00093A F0               [24] 2482 	movx	@dptr,a
      00093B 75 82 02         [24] 2483 	mov	dpl,#0x02
      00093E 12r03r79         [24] 2484 	lcall	_glcdWriteString
                                   2485 ;	src/lcd.c:549: glcdWriteString(SPO2_X_LOC, 0, "SPO2");
      000941 90r00r19         [24] 2486 	mov	dptr,#_glcdWriteString_PARM_2
      000944 E4               [12] 2487 	clr	a
      000945 F0               [24] 2488 	movx	@dptr,a
      000946 90r00r1A         [24] 2489 	mov	dptr,#_glcdWriteString_PARM_3
      000949 74r39            [12] 2490 	mov	a,#___str_4
      00094B F0               [24] 2491 	movx	@dptr,a
      00094C 74s02            [12] 2492 	mov	a,#(___str_4 >> 8)
      00094E A3               [24] 2493 	inc	dptr
      00094F F0               [24] 2494 	movx	@dptr,a
      000950 74 80            [12] 2495 	mov	a,#0x80
      000952 A3               [24] 2496 	inc	dptr
      000953 F0               [24] 2497 	movx	@dptr,a
      000954 75 82 46         [24] 2498 	mov	dpl,#0x46
      000957 12r03r79         [24] 2499 	lcall	_glcdWriteString
                                   2500 ;	src/lcd.c:550: glcdWriteString(BPM_X_LOC, 0, "BPM");
      00095A 90r00r19         [24] 2501 	mov	dptr,#_glcdWriteString_PARM_2
      00095D E4               [12] 2502 	clr	a
      00095E F0               [24] 2503 	movx	@dptr,a
      00095F 90r00r1A         [24] 2504 	mov	dptr,#_glcdWriteString_PARM_3
      000962 74r3E            [12] 2505 	mov	a,#___str_5
      000964 F0               [24] 2506 	movx	@dptr,a
      000965 74s02            [12] 2507 	mov	a,#(___str_5 >> 8)
      000967 A3               [24] 2508 	inc	dptr
      000968 F0               [24] 2509 	movx	@dptr,a
      000969 74 80            [12] 2510 	mov	a,#0x80
      00096B A3               [24] 2511 	inc	dptr
      00096C F0               [24] 2512 	movx	@dptr,a
      00096D 75 82 64         [24] 2513 	mov	dpl,#0x64
                                   2514 ;	src/lcd.c:551: }
      000970 02r03r79         [24] 2515 	ljmp	_glcdWriteString
                                   2516 ;------------------------------------------------------------
                                   2517 ;Allocation info for local variables in function 'glcdPlotIrValue'
                                   2518 ;------------------------------------------------------------
                                   2519 ;sloc0                     Allocated with name '_glcdPlotIrValue_sloc0_1_0'
                                   2520 ;IrValue                   Allocated with name '_glcdPlotIrValue_IrValue_65536_103'
                                   2521 ;y                         Allocated with name '_glcdPlotIrValue_y_65536_104'
                                   2522 ;x                         Allocated with name '_glcdPlotIrValue_x_65536_104'
                                   2523 ;page                      Allocated with name '_glcdPlotIrValue_page_131072_105'
                                   2524 ;------------------------------------------------------------
                                   2525 ;	src/lcd.c:562: void glcdPlotIrValue(uint8_t IrValue)
                                   2526 ;	-----------------------------------------
                                   2527 ;	 function glcdPlotIrValue
                                   2528 ;	-----------------------------------------
      000973                       2529 _glcdPlotIrValue:
      000973 E5 82            [12] 2530 	mov	a,dpl
      000975 90r00r4C         [24] 2531 	mov	dptr,#_glcdPlotIrValue_IrValue_65536_103
      000978 F0               [24] 2532 	movx	@dptr,a
                                   2533 ;	src/lcd.c:565: uint8_t y = IrValue >> 3;
      000979 E0               [24] 2534 	movx	a,@dptr
      00097A C4               [12] 2535 	swap	a
      00097B 23               [12] 2536 	rl	a
      00097C 54 1F            [12] 2537 	anl	a,#0x1f
      00097E FF               [12] 2538 	mov	r7,a
                                   2539 ;	src/lcd.c:566: uint8_t x = previousReadingX + 2;
      00097F 90r00r4A         [24] 2540 	mov	dptr,#_previousReadingX
      000982 E0               [24] 2541 	movx	a,@dptr
      000983 FE               [12] 2542 	mov	r6,a
      000984 90r00r4D         [24] 2543 	mov	dptr,#_glcdPlotIrValue_x_65536_104
      000987 74 02            [12] 2544 	mov	a,#0x02
      000989 2E               [12] 2545 	add	a,r6
      00098A F0               [24] 2546 	movx	@dptr,a
                                   2547 ;	src/lcd.c:569: for (uint8_t page = 2; page < 8; page++)
      00098B 7E 02            [12] 2548 	mov	r6,#0x02
      00098D                       2549 00106$:
      00098D BE 08 00         [24] 2550 	cjne	r6,#0x08,00123$
      000990                       2551 00123$:
      000990 50 3A            [24] 2552 	jnc	00101$
                                   2553 ;	src/lcd.c:571: glcdWrite(previousReadingX + 1, page, 0x00);
      000992 90r00r4A         [24] 2554 	mov	dptr,#_previousReadingX
      000995 E0               [24] 2555 	movx	a,@dptr
      000996 FD               [12] 2556 	mov	r5,a
      000997 0D               [12] 2557 	inc	r5
      000998 90r00r09         [24] 2558 	mov	dptr,#_glcdWrite_PARM_2
      00099B EE               [12] 2559 	mov	a,r6
      00099C F0               [24] 2560 	movx	@dptr,a
      00099D 90r00r0A         [24] 2561 	mov	dptr,#_glcdWrite_PARM_3
      0009A0 E4               [12] 2562 	clr	a
      0009A1 F0               [24] 2563 	movx	@dptr,a
      0009A2 8D 82            [24] 2564 	mov	dpl,r5
      0009A4 C0 07            [24] 2565 	push	ar7
      0009A6 C0 06            [24] 2566 	push	ar6
      0009A8 12r01r3C         [24] 2567 	lcall	_glcdWrite
      0009AB D0 06            [24] 2568 	pop	ar6
                                   2569 ;	src/lcd.c:572: glcdWrite(previousReadingX + 2, page, 0x00);
      0009AD 90r00r4A         [24] 2570 	mov	dptr,#_previousReadingX
      0009B0 E0               [24] 2571 	movx	a,@dptr
      0009B1 FD               [12] 2572 	mov	r5,a
      0009B2 0D               [12] 2573 	inc	r5
      0009B3 0D               [12] 2574 	inc	r5
      0009B4 90r00r09         [24] 2575 	mov	dptr,#_glcdWrite_PARM_2
      0009B7 EE               [12] 2576 	mov	a,r6
      0009B8 F0               [24] 2577 	movx	@dptr,a
      0009B9 90r00r0A         [24] 2578 	mov	dptr,#_glcdWrite_PARM_3
      0009BC E4               [12] 2579 	clr	a
      0009BD F0               [24] 2580 	movx	@dptr,a
      0009BE 8D 82            [24] 2581 	mov	dpl,r5
      0009C0 C0 06            [24] 2582 	push	ar6
      0009C2 12r01r3C         [24] 2583 	lcall	_glcdWrite
      0009C5 D0 06            [24] 2584 	pop	ar6
      0009C7 D0 07            [24] 2585 	pop	ar7
                                   2586 ;	src/lcd.c:569: for (uint8_t page = 2; page < 8; page++)
      0009C9 0E               [12] 2587 	inc	r6
      0009CA 80 C1            [24] 2588 	sjmp	00106$
      0009CC                       2589 00101$:
                                   2590 ;	src/lcd.c:576: glcdDrawGraph(previousReadingX, previousReadingY, x, y);
      0009CC 90r00r4A         [24] 2591 	mov	dptr,#_previousReadingX
      0009CF E0               [24] 2592 	movx	a,@dptr
      0009D0 FE               [12] 2593 	mov	r6,a
      0009D1 7D 00            [12] 2594 	mov	r5,#0x00
      0009D3 90r00r4B         [24] 2595 	mov	dptr,#_previousReadingY
      0009D6 E0               [24] 2596 	movx	a,@dptr
      0009D7 FC               [12] 2597 	mov	r4,a
      0009D8 7B 00            [12] 2598 	mov	r3,#0x00
      0009DA 90r00r4D         [24] 2599 	mov	dptr,#_glcdPlotIrValue_x_65536_104
      0009DD E0               [24] 2600 	movx	a,@dptr
      0009DE FA               [12] 2601 	mov	r2,a
      0009DF 8A*09            [24] 2602 	mov	_glcdPlotIrValue_sloc0_1_0,r2
                                   2603 ;	1-genFromRTrack replaced	mov	(_glcdPlotIrValue_sloc0_1_0 + 1),#0x00
      0009E1 8D*0A            [24] 2604 	mov	(_glcdPlotIrValue_sloc0_1_0 + 1),r5
      0009E3 8F 00            [24] 2605 	mov	ar0,r7
      0009E5 79 00            [12] 2606 	mov	r1,#0x00
      0009E7 90r00r23         [24] 2607 	mov	dptr,#_glcdDrawGraph_PARM_2
      0009EA EC               [12] 2608 	mov	a,r4
      0009EB F0               [24] 2609 	movx	@dptr,a
      0009EC EB               [12] 2610 	mov	a,r3
      0009ED A3               [24] 2611 	inc	dptr
      0009EE F0               [24] 2612 	movx	@dptr,a
      0009EF 90r00r25         [24] 2613 	mov	dptr,#_glcdDrawGraph_PARM_3
      0009F2 E5*09            [12] 2614 	mov	a,_glcdPlotIrValue_sloc0_1_0
      0009F4 F0               [24] 2615 	movx	@dptr,a
      0009F5 E5*0A            [12] 2616 	mov	a,(_glcdPlotIrValue_sloc0_1_0 + 1)
      0009F7 A3               [24] 2617 	inc	dptr
      0009F8 F0               [24] 2618 	movx	@dptr,a
      0009F9 90r00r27         [24] 2619 	mov	dptr,#_glcdDrawGraph_PARM_4
      0009FC E8               [12] 2620 	mov	a,r0
      0009FD F0               [24] 2621 	movx	@dptr,a
      0009FE E9               [12] 2622 	mov	a,r1
      0009FF A3               [24] 2623 	inc	dptr
      000A00 F0               [24] 2624 	movx	@dptr,a
      000A01 8E 82            [24] 2625 	mov	dpl,r6
      000A03 8D 83            [24] 2626 	mov	dph,r5
      000A05 C0 07            [24] 2627 	push	ar7
      000A07 C0 02            [24] 2628 	push	ar2
      000A09 12r04r21         [24] 2629 	lcall	_glcdDrawGraph
      000A0C D0 02            [24] 2630 	pop	ar2
      000A0E D0 07            [24] 2631 	pop	ar7
                                   2632 ;	src/lcd.c:578: if(previousReadingX == 126)
      000A10 90r00r4A         [24] 2633 	mov	dptr,#_previousReadingX
      000A13 E0               [24] 2634 	movx	a,@dptr
      000A14 FE               [12] 2635 	mov	r6,a
      000A15 BE 7E 0A         [24] 2636 	cjne	r6,#0x7e,00103$
                                   2637 ;	src/lcd.c:580: previousReadingX = 0;
      000A18 90r00r4A         [24] 2638 	mov	dptr,#_previousReadingX
      000A1B E4               [12] 2639 	clr	a
      000A1C F0               [24] 2640 	movx	@dptr,a
                                   2641 ;	src/lcd.c:581: previousReadingY = 0;
      000A1D 90r00r4B         [24] 2642 	mov	dptr,#_previousReadingY
      000A20 F0               [24] 2643 	movx	@dptr,a
      000A21 22               [24] 2644 	ret
      000A22                       2645 00103$:
                                   2646 ;	src/lcd.c:585: previousReadingX = x;
      000A22 90r00r4A         [24] 2647 	mov	dptr,#_previousReadingX
      000A25 EA               [12] 2648 	mov	a,r2
      000A26 F0               [24] 2649 	movx	@dptr,a
                                   2650 ;	src/lcd.c:586: previousReadingY = y;
      000A27 90r00r4B         [24] 2651 	mov	dptr,#_previousReadingY
      000A2A EF               [12] 2652 	mov	a,r7
      000A2B F0               [24] 2653 	movx	@dptr,a
                                   2654 ;	src/lcd.c:588: }
      000A2C 22               [24] 2655 	ret
                                   2656 ;------------------------------------------------------------
                                   2657 ;Allocation info for local variables in function 'generateRandom'
                                   2658 ;------------------------------------------------------------
                                   2659 ;max                       Allocated with name '_generateRandom_PARM_2'
                                   2660 ;min                       Allocated with name '_generateRandom_min_65536_109'
                                   2661 ;------------------------------------------------------------
                                   2662 ;	src/lcd.c:596: int generateRandom(int min, int max)
                                   2663 ;	-----------------------------------------
                                   2664 ;	 function generateRandom
                                   2665 ;	-----------------------------------------
      000A2D                       2666 _generateRandom:
      000A2D AF 83            [24] 2667 	mov	r7,dph
      000A2F E5 82            [12] 2668 	mov	a,dpl
      000A31 90r00r50         [24] 2669 	mov	dptr,#_generateRandom_min_65536_109
      000A34 F0               [24] 2670 	movx	@dptr,a
      000A35 EF               [12] 2671 	mov	a,r7
      000A36 A3               [24] 2672 	inc	dptr
      000A37 F0               [24] 2673 	movx	@dptr,a
                                   2674 ;	src/lcd.c:598: return min + rand() % (max - min + 1);
      000A38 12r00r00         [24] 2675 	lcall	_rand
      000A3B AE 82            [24] 2676 	mov	r6,dpl
      000A3D AF 83            [24] 2677 	mov	r7,dph
      000A3F 90r00r50         [24] 2678 	mov	dptr,#_generateRandom_min_65536_109
      000A42 E0               [24] 2679 	movx	a,@dptr
      000A43 FC               [12] 2680 	mov	r4,a
      000A44 A3               [24] 2681 	inc	dptr
      000A45 E0               [24] 2682 	movx	a,@dptr
      000A46 FD               [12] 2683 	mov	r5,a
      000A47 90r00r4E         [24] 2684 	mov	dptr,#_generateRandom_PARM_2
      000A4A E0               [24] 2685 	movx	a,@dptr
      000A4B FA               [12] 2686 	mov	r2,a
      000A4C A3               [24] 2687 	inc	dptr
      000A4D E0               [24] 2688 	movx	a,@dptr
      000A4E FB               [12] 2689 	mov	r3,a
      000A4F EA               [12] 2690 	mov	a,r2
      000A50 C3               [12] 2691 	clr	c
      000A51 9C               [12] 2692 	subb	a,r4
      000A52 FA               [12] 2693 	mov	r2,a
      000A53 EB               [12] 2694 	mov	a,r3
      000A54 9D               [12] 2695 	subb	a,r5
      000A55 FB               [12] 2696 	mov	r3,a
      000A56 90r00r00         [24] 2697 	mov	dptr,#__modsint_PARM_2
      000A59 74 01            [12] 2698 	mov	a,#0x01
      000A5B 2A               [12] 2699 	add	a,r2
      000A5C F0               [24] 2700 	movx	@dptr,a
      000A5D E4               [12] 2701 	clr	a
      000A5E 3B               [12] 2702 	addc	a,r3
      000A5F A3               [24] 2703 	inc	dptr
      000A60 F0               [24] 2704 	movx	@dptr,a
      000A61 8E 82            [24] 2705 	mov	dpl,r6
      000A63 8F 83            [24] 2706 	mov	dph,r7
      000A65 C0 05            [24] 2707 	push	ar5
      000A67 C0 04            [24] 2708 	push	ar4
      000A69 12r00r00         [24] 2709 	lcall	__modsint
      000A6C AE 82            [24] 2710 	mov	r6,dpl
      000A6E AF 83            [24] 2711 	mov	r7,dph
      000A70 D0 04            [24] 2712 	pop	ar4
      000A72 D0 05            [24] 2713 	pop	ar5
      000A74 EE               [12] 2714 	mov	a,r6
      000A75 2C               [12] 2715 	add	a,r4
      000A76 FC               [12] 2716 	mov	r4,a
      000A77 EF               [12] 2717 	mov	a,r7
      000A78 3D               [12] 2718 	addc	a,r5
                                   2719 ;	src/lcd.c:599: }
      000A79 8C 82            [24] 2720 	mov	dpl,r4
      000A7B F5 83            [12] 2721 	mov	dph,a
      000A7D 22               [24] 2722 	ret
                                   2723 ;------------------------------------------------------------
                                   2724 ;Allocation info for local variables in function 'lcdTest'
                                   2725 ;------------------------------------------------------------
                                   2726 ;x1                        Allocated with name '_lcdTest_x1_65537_112'
                                   2727 ;y1                        Allocated with name '_lcdTest_y1_65537_112'
                                   2728 ;------------------------------------------------------------
                                   2729 ;	src/lcd.c:605: void lcdTest()
                                   2730 ;	-----------------------------------------
                                   2731 ;	 function lcdTest
                                   2732 ;	-----------------------------------------
      000A7E                       2733 _lcdTest:
                                   2734 ;	src/lcd.c:607: INFO_LOG("LCD Testing");
      000A7E 74r42            [12] 2735 	mov	a,#___str_6
      000A80 C0 E0            [24] 2736 	push	acc
      000A82 74s02            [12] 2737 	mov	a,#(___str_6 >> 8)
      000A84 C0 E0            [24] 2738 	push	acc
      000A86 74 80            [12] 2739 	mov	a,#0x80
      000A88 C0 E0            [24] 2740 	push	acc
      000A8A 12r00r00         [24] 2741 	lcall	_printf
      000A8D 15 81            [12] 2742 	dec	sp
      000A8F 15 81            [12] 2743 	dec	sp
      000A91 15 81            [12] 2744 	dec	sp
      000A93 74r0A            [12] 2745 	mov	a,#___str_1
      000A95 C0 E0            [24] 2746 	push	acc
      000A97 74s02            [12] 2747 	mov	a,#(___str_1 >> 8)
      000A99 C0 E0            [24] 2748 	push	acc
      000A9B 12r00r00         [24] 2749 	lcall	_printf_tiny
      000A9E 15 81            [12] 2750 	dec	sp
      000AA0 15 81            [12] 2751 	dec	sp
                                   2752 ;	src/lcd.c:610: glcdWriteString(32, 0, "SPO2");
      000AA2 90r00r19         [24] 2753 	mov	dptr,#_glcdWriteString_PARM_2
      000AA5 E4               [12] 2754 	clr	a
      000AA6 F0               [24] 2755 	movx	@dptr,a
      000AA7 90r00r1A         [24] 2756 	mov	dptr,#_glcdWriteString_PARM_3
      000AAA 74r39            [12] 2757 	mov	a,#___str_4
      000AAC F0               [24] 2758 	movx	@dptr,a
      000AAD 74s02            [12] 2759 	mov	a,#(___str_4 >> 8)
      000AAF A3               [24] 2760 	inc	dptr
      000AB0 F0               [24] 2761 	movx	@dptr,a
      000AB1 74 80            [12] 2762 	mov	a,#0x80
      000AB3 A3               [24] 2763 	inc	dptr
      000AB4 F0               [24] 2764 	movx	@dptr,a
      000AB5 75 82 20         [24] 2765 	mov	dpl,#0x20
      000AB8 12r03r79         [24] 2766 	lcall	_glcdWriteString
                                   2767 ;	src/lcd.c:612: glcdWriteString(94, 0, "BPM");
      000ABB 90r00r19         [24] 2768 	mov	dptr,#_glcdWriteString_PARM_2
      000ABE E4               [12] 2769 	clr	a
      000ABF F0               [24] 2770 	movx	@dptr,a
      000AC0 90r00r1A         [24] 2771 	mov	dptr,#_glcdWriteString_PARM_3
      000AC3 74r3E            [12] 2772 	mov	a,#___str_5
      000AC5 F0               [24] 2773 	movx	@dptr,a
      000AC6 74s02            [12] 2774 	mov	a,#(___str_5 >> 8)
      000AC8 A3               [24] 2775 	inc	dptr
      000AC9 F0               [24] 2776 	movx	@dptr,a
      000ACA 74 80            [12] 2777 	mov	a,#0x80
      000ACC A3               [24] 2778 	inc	dptr
      000ACD F0               [24] 2779 	movx	@dptr,a
      000ACE 75 82 5E         [24] 2780 	mov	dpl,#0x5e
      000AD1 12r03r79         [24] 2781 	lcall	_glcdWriteString
                                   2782 ;	src/lcd.c:629: while(1)
      000AD4                       2783 00102$:
                                   2784 ;	src/lcd.c:631: glcdPlotIrValue(generateRandom(40,160));
      000AD4 90r00r4E         [24] 2785 	mov	dptr,#_generateRandom_PARM_2
      000AD7 74 A0            [12] 2786 	mov	a,#0xa0
      000AD9 F0               [24] 2787 	movx	@dptr,a
      000ADA E4               [12] 2788 	clr	a
      000ADB A3               [24] 2789 	inc	dptr
      000ADC F0               [24] 2790 	movx	@dptr,a
      000ADD 90 00 28         [24] 2791 	mov	dptr,#0x0028
      000AE0 12r0Ar2D         [24] 2792 	lcall	_generateRandom
      000AE3 12r09r73         [24] 2793 	lcall	_glcdPlotIrValue
                                   2794 ;	src/lcd.c:632: delay(500);
      000AE6 90 01 F4         [24] 2795 	mov	dptr,#0x01f4
      000AE9 12r00r00         [24] 2796 	lcall	_delay
                                   2797 ;	src/lcd.c:637: while (1)
                                   2798 ;	src/lcd.c:639: }
      000AEC 80 E6            [24] 2799 	sjmp	00102$
                                   2800 	.area CSEG    (CODE)
                                   2801 	.area CONST   (CODE)
      000000                       2802 _font:
      000000 00                    2803 	.db #0x00	; 0
      000001 00                    2804 	.db #0x00	; 0
      000002 00                    2805 	.db #0x00	; 0
      000003 00                    2806 	.db #0x00	; 0
      000004 5F                    2807 	.db #0x5f	; 95
      000005 00                    2808 	.db #0x00	; 0
      000006 00                    2809 	.db #0x00	; 0
      000007 07                    2810 	.db #0x07	; 7
      000008 00                    2811 	.db #0x00	; 0
      000009 14                    2812 	.db #0x14	; 20
      00000A 7F                    2813 	.db #0x7f	; 127
      00000B 14                    2814 	.db #0x14	; 20
      00000C 24                    2815 	.db #0x24	; 36
      00000D 2A                    2816 	.db #0x2a	; 42
      00000E 7F                    2817 	.db #0x7f	; 127
      00000F 28                    2818 	.db #0x28	; 40
      000010 20                    2819 	.db #0x20	; 32
      000011 90                    2820 	.db #0x90	; 144
      000012 36                    2821 	.db #0x36	; 54	'6'
      000013 49                    2822 	.db #0x49	; 73	'I'
      000014 55                    2823 	.db #0x55	; 85	'U'
      000015 00                    2824 	.db #0x00	; 0
      000016 05                    2825 	.db #0x05	; 5
      000017 03                    2826 	.db #0x03	; 3
      000018 00                    2827 	.db #0x00	; 0
      000019 1C                    2828 	.db #0x1c	; 28
      00001A 22                    2829 	.db #0x22	; 34
      00001B 00                    2830 	.db #0x00	; 0
      00001C 41                    2831 	.db #0x41	; 65	'A'
      00001D 22                    2832 	.db #0x22	; 34
      00001E 08                    2833 	.db #0x08	; 8
      00001F 2A                    2834 	.db #0x2a	; 42
      000020 1C                    2835 	.db #0x1c	; 28
      000021 20                    2836 	.db #0x20	; 32
      000022 70                    2837 	.db #0x70	; 112	'p'
      000023 20                    2838 	.db #0x20	; 32
      000024 00                    2839 	.db #0x00	; 0
      000025 50                    2840 	.db #0x50	; 80	'P'
      000026 30                    2841 	.db #0x30	; 48	'0'
      000027 20                    2842 	.db #0x20	; 32
      000028 20                    2843 	.db #0x20	; 32
      000029 20                    2844 	.db #0x20	; 32
      00002A 00                    2845 	.db #0x00	; 0
      00002B 60                    2846 	.db #0x60	; 96
      00002C 60                    2847 	.db #0x60	; 96
      00002D 20                    2848 	.db #0x20	; 32
      00002E 10                    2849 	.db #0x10	; 16
      00002F 08                    2850 	.db #0x08	; 8
      000030 F8                    2851 	.db #0xf8	; 248
      000031 88                    2852 	.db #0x88	; 136
      000032 F8                    2853 	.db #0xf8	; 248
      000033 90                    2854 	.db #0x90	; 144
      000034 F8                    2855 	.db #0xf8	; 248
      000035 80                    2856 	.db #0x80	; 128
      000036 E8                    2857 	.db #0xe8	; 232
      000037 A8                    2858 	.db #0xa8	; 168
      000038 B8                    2859 	.db #0xb8	; 184
      000039 A8                    2860 	.db #0xa8	; 168
      00003A A8                    2861 	.db #0xa8	; 168
      00003B F8                    2862 	.db #0xf8	; 248
      00003C 78                    2863 	.db #0x78	; 120	'x'
      00003D 40                    2864 	.db #0x40	; 64
      00003E E0                    2865 	.db #0xe0	; 224
      00003F B8                    2866 	.db #0xb8	; 184
      000040 A8                    2867 	.db #0xa8	; 168
      000041 E8                    2868 	.db #0xe8	; 232
      000042 F8                    2869 	.db #0xf8	; 248
      000043 A8                    2870 	.db #0xa8	; 168
      000044 E8                    2871 	.db #0xe8	; 232
      000045 18                    2872 	.db #0x18	; 24
      000046 08                    2873 	.db #0x08	; 8
      000047 F8                    2874 	.db #0xf8	; 248
      000048 F8                    2875 	.db #0xf8	; 248
      000049 A8                    2876 	.db #0xa8	; 168
      00004A F8                    2877 	.db #0xf8	; 248
      00004B B8                    2878 	.db #0xb8	; 184
      00004C A8                    2879 	.db #0xa8	; 168
      00004D F8                    2880 	.db #0xf8	; 248
      00004E 00                    2881 	.db #0x00	; 0
      00004F 50                    2882 	.db #0x50	; 80	'P'
      000050 00                    2883 	.db #0x00	; 0
      000051 00                    2884 	.db #0x00	; 0
      000052 56                    2885 	.db #0x56	; 86	'V'
      000053 36                    2886 	.db #0x36	; 54	'6'
      000054 00                    2887 	.db #0x00	; 0
      000055 08                    2888 	.db #0x08	; 8
      000056 14                    2889 	.db #0x14	; 20
      000057 50                    2890 	.db #0x50	; 80	'P'
      000058 50                    2891 	.db #0x50	; 80	'P'
      000059 50                    2892 	.db #0x50	; 80	'P'
      00005A 41                    2893 	.db #0x41	; 65	'A'
      00005B 22                    2894 	.db #0x22	; 34
      00005C 14                    2895 	.db #0x14	; 20
      00005D 02                    2896 	.db #0x02	; 2
      00005E 01                    2897 	.db #0x01	; 1
      00005F 51                    2898 	.db #0x51	; 81	'Q'
      000060 32                    2899 	.db #0x32	; 50	'2'
      000061 49                    2900 	.db #0x49	; 73	'I'
      000062 79                    2901 	.db #0x79	; 121	'y'
      000063 F8                    2902 	.db #0xf8	; 248
      000064 28                    2903 	.db #0x28	; 40
      000065 F8                    2904 	.db #0xf8	; 248
      000066 F8                    2905 	.db #0xf8	; 248
      000067 A8                    2906 	.db #0xa8	; 168
      000068 70                    2907 	.db #0x70	; 112	'p'
      000069 F8                    2908 	.db #0xf8	; 248
      00006A 88                    2909 	.db #0x88	; 136
      00006B 88                    2910 	.db #0x88	; 136
      00006C F8                    2911 	.db #0xf8	; 248
      00006D 88                    2912 	.db #0x88	; 136
      00006E 70                    2913 	.db #0x70	; 112	'p'
      00006F F8                    2914 	.db #0xf8	; 248
      000070 A8                    2915 	.db #0xa8	; 168
      000071 A8                    2916 	.db #0xa8	; 168
      000072 F8                    2917 	.db #0xf8	; 248
      000073 28                    2918 	.db #0x28	; 40
      000074 28                    2919 	.db #0x28	; 40
      000075 F8                    2920 	.db #0xf8	; 248
      000076 88                    2921 	.db #0x88	; 136
      000077 C8                    2922 	.db #0xc8	; 200
      000078 F8                    2923 	.db #0xf8	; 248
      000079 20                    2924 	.db #0x20	; 32
      00007A F8                    2925 	.db #0xf8	; 248
      00007B 88                    2926 	.db #0x88	; 136
      00007C F8                    2927 	.db #0xf8	; 248
      00007D 88                    2928 	.db #0x88	; 136
      00007E 88                    2929 	.db #0x88	; 136
      00007F F8                    2930 	.db #0xf8	; 248
      000080 88                    2931 	.db #0x88	; 136
      000081 F8                    2932 	.db #0xf8	; 248
      000082 20                    2933 	.db #0x20	; 32
      000083 88                    2934 	.db #0x88	; 136
      000084 F8                    2935 	.db #0xf8	; 248
      000085 80                    2936 	.db #0x80	; 128
      000086 80                    2937 	.db #0x80	; 128
      000087 F8                    2938 	.db #0xf8	; 248
      000088 10                    2939 	.db #0x10	; 16
      000089 F8                    2940 	.db #0xf8	; 248
      00008A F8                    2941 	.db #0xf8	; 248
      00008B 10                    2942 	.db #0x10	; 16
      00008C F8                    2943 	.db #0xf8	; 248
      00008D F8                    2944 	.db #0xf8	; 248
      00008E 88                    2945 	.db #0x88	; 136
      00008F F8                    2946 	.db #0xf8	; 248
      000090 F8                    2947 	.db #0xf8	; 248
      000091 28                    2948 	.db #0x28	; 40
      000092 38                    2949 	.db #0x38	; 56	'8'
      000093 3E                    2950 	.db #0x3e	; 62
      000094 41                    2951 	.db #0x41	; 65	'A'
      000095 51                    2952 	.db #0x51	; 81	'Q'
      000096 F8                    2953 	.db #0xf8	; 248
      000097 68                    2954 	.db #0x68	; 104	'h'
      000098 B8                    2955 	.db #0xb8	; 184
      000099 B8                    2956 	.db #0xb8	; 184
      00009A A8                    2957 	.db #0xa8	; 168
      00009B E8                    2958 	.db #0xe8	; 232
      00009C 08                    2959 	.db #0x08	; 8
      00009D F8                    2960 	.db #0xf8	; 248
      00009E 08                    2961 	.db #0x08	; 8
      00009F F8                    2962 	.db #0xf8	; 248
      0000A0 80                    2963 	.db #0x80	; 128
      0000A1 F8                    2964 	.db #0xf8	; 248
      0000A2 78                    2965 	.db #0x78	; 120	'x'
      0000A3 80                    2966 	.db #0x80	; 128
      0000A4 78                    2967 	.db #0x78	; 120	'x'
      0000A5 7F                    2968 	.db #0x7f	; 127
      0000A6 20                    2969 	.db #0x20	; 32
      0000A7 18                    2970 	.db #0x18	; 24
      0000A8 63                    2971 	.db #0x63	; 99	'c'
      0000A9 14                    2972 	.db #0x14	; 20
      0000AA 08                    2973 	.db #0x08	; 8
      0000AB 03                    2974 	.db #0x03	; 3
      0000AC 04                    2975 	.db #0x04	; 4
      0000AD 78                    2976 	.db #0x78	; 120	'x'
      0000AE 61                    2977 	.db #0x61	; 97	'a'
      0000AF 51                    2978 	.db #0x51	; 81	'Q'
      0000B0 49                    2979 	.db #0x49	; 73	'I'
      0000B1 00                    2980 	.db #0x00	; 0
      0000B2 00                    2981 	.db #0x00	; 0
      0000B3 7F                    2982 	.db #0x7f	; 127
      0000B4 02                    2983 	.db #0x02	; 2
      0000B5 04                    2984 	.db #0x04	; 4
      0000B6 08                    2985 	.db #0x08	; 8
      0000B7 41                    2986 	.db #0x41	; 65	'A'
      0000B8 41                    2987 	.db #0x41	; 65	'A'
      0000B9 7F                    2988 	.db #0x7f	; 127
      0000BA 04                    2989 	.db #0x04	; 4
      0000BB 02                    2990 	.db #0x02	; 2
      0000BC 01                    2991 	.db #0x01	; 1
      0000BD 40                    2992 	.db #0x40	; 64
      0000BE 40                    2993 	.db #0x40	; 64
      0000BF 40                    2994 	.db #0x40	; 64
      0000C0 00                    2995 	.db #0x00	; 0
      0000C1 01                    2996 	.db #0x01	; 1
      0000C2 02                    2997 	.db #0x02	; 2
      0000C3 78                    2998 	.db #0x78	; 120	'x'
      0000C4 80                    2999 	.db #0x80	; 128
      0000C5 78                    3000 	.db #0x78	; 120	'x'
      0000C6 F8                    3001 	.db #0xf8	; 248
      0000C7 A0                    3002 	.db #0xa0	; 160
      0000C8 E0                    3003 	.db #0xe0	; 224
      0000C9 F8                    3004 	.db #0xf8	; 248
      0000CA A0                    3005 	.db #0xa0	; 160
      0000CB E0                    3006 	.db #0xe0	; 224
      0000CC F0                    3007 	.db #0xf0	; 240
      0000CD 90                    3008 	.db #0x90	; 144
      0000CE F8                    3009 	.db #0xf8	; 248
      0000CF F8                    3010 	.db #0xf8	; 248
      0000D0 A8                    3011 	.db #0xa8	; 168
      0000D1 B8                    3012 	.db #0xb8	; 184
      0000D2 20                    3013 	.db #0x20	; 32
      0000D3 F8                    3014 	.db #0xf8	; 248
      0000D4 28                    3015 	.db #0x28	; 40
      0000D5 08                    3016 	.db #0x08	; 8
      0000D6 14                    3017 	.db #0x14	; 20
      0000D7 54                    3018 	.db #0x54	; 84	'T'
      0000D8 7F                    3019 	.db #0x7f	; 127
      0000D9 08                    3020 	.db #0x08	; 8
      0000DA 04                    3021 	.db #0x04	; 4
      0000DB 00                    3022 	.db #0x00	; 0
      0000DC 44                    3023 	.db #0x44	; 68	'D'
      0000DD 7D                    3024 	.db #0x7d	; 125
      0000DE 20                    3025 	.db #0x20	; 32
      0000DF 40                    3026 	.db #0x40	; 64
      0000E0 44                    3027 	.db #0x44	; 68	'D'
      0000E1 00                    3028 	.db #0x00	; 0
      0000E2 7F                    3029 	.db #0x7f	; 127
      0000E3 10                    3030 	.db #0x10	; 16
      0000E4 00                    3031 	.db #0x00	; 0
      0000E5 41                    3032 	.db #0x41	; 65	'A'
      0000E6 7F                    3033 	.db #0x7f	; 127
      0000E7 7C                    3034 	.db #0x7c	; 124
      0000E8 04                    3035 	.db #0x04	; 4
      0000E9 18                    3036 	.db #0x18	; 24
      0000EA 7C                    3037 	.db #0x7c	; 124
      0000EB 08                    3038 	.db #0x08	; 8
      0000EC 04                    3039 	.db #0x04	; 4
      0000ED 38                    3040 	.db #0x38	; 56	'8'
      0000EE 44                    3041 	.db #0x44	; 68	'D'
      0000EF 44                    3042 	.db #0x44	; 68	'D'
      0000F0 7C                    3043 	.db #0x7c	; 124
      0000F1 14                    3044 	.db #0x14	; 20
      0000F2 14                    3045 	.db #0x14	; 20
      0000F3 08                    3046 	.db #0x08	; 8
      0000F4 14                    3047 	.db #0x14	; 20
      0000F5 14                    3048 	.db #0x14	; 20
      0000F6 7C                    3049 	.db #0x7c	; 124
      0000F7 08                    3050 	.db #0x08	; 8
      0000F8 04                    3051 	.db #0x04	; 4
      0000F9 48                    3052 	.db #0x48	; 72	'H'
      0000FA 54                    3053 	.db #0x54	; 84	'T'
      0000FB 54                    3054 	.db #0x54	; 84	'T'
      0000FC 04                    3055 	.db #0x04	; 4
      0000FD 3F                    3056 	.db #0x3f	; 63
      0000FE 44                    3057 	.db #0x44	; 68	'D'
      0000FF 3C                    3058 	.db #0x3c	; 60
      000100 40                    3059 	.db #0x40	; 64
      000101 40                    3060 	.db #0x40	; 64
      000102 1C                    3061 	.db #0x1c	; 28
      000103 20                    3062 	.db #0x20	; 32
      000104 40                    3063 	.db #0x40	; 64
      000105 3C                    3064 	.db #0x3c	; 60
      000106 40                    3065 	.db #0x40	; 64
      000107 30                    3066 	.db #0x30	; 48	'0'
      000108 44                    3067 	.db #0x44	; 68	'D'
      000109 28                    3068 	.db #0x28	; 40
      00010A 10                    3069 	.db #0x10	; 16
      00010B 0C                    3070 	.db #0x0c	; 12
      00010C 50                    3071 	.db #0x50	; 80	'P'
      00010D 50                    3072 	.db #0x50	; 80	'P'
      00010E 44                    3073 	.db #0x44	; 68	'D'
      00010F 64                    3074 	.db #0x64	; 100	'd'
      000110 54                    3075 	.db #0x54	; 84	'T'
      000111 44                    3076 	.db #0x44	; 68	'D'
      000112 64                    3077 	.db #0x64	; 100	'd'
      000113 54                    3078 	.db #0x54	; 84	'T'
      000114 00                    3079 	.db #0x00	; 0
      000115 F8                    3080 	.db #0xf8	; 248
      000116 00                    3081 	.db #0x00	; 0
      000117 00                    3082 	.db 0x00
      000118 00                    3083 	.db 0x00
      000119 00                    3084 	.db 0x00
      00011A 00                    3085 	.db 0x00
      00011B 00                    3086 	.db 0x00
      00011C 00                    3087 	.db 0x00
      00011D 00                    3088 	.db 0x00
      00011E 00                    3089 	.db 0x00
      00011F 00                    3090 	.db 0x00
      000120 00                    3091 	.db 0x00
      000121 00                    3092 	.db 0x00
      000122 00                    3093 	.db 0x00
      000123 00                    3094 	.db 0x00
      000124 00                    3095 	.db 0x00
      000125 00                    3096 	.db 0x00
      000126 00                    3097 	.db 0x00
      000127 00                    3098 	.db 0x00
      000128 00                    3099 	.db 0x00
      000129 00                    3100 	.db 0x00
      00012A 00                    3101 	.db 0x00
      00012B 00                    3102 	.db 0x00
      00012C 00                    3103 	.db 0x00
      00012D 00                    3104 	.db 0x00
      00012E 00                    3105 	.db 0x00
      00012F 00                    3106 	.db 0x00
      000130 00                    3107 	.db 0x00
      000131 00                    3108 	.db 0x00
      000132 00                    3109 	.db 0x00
      000133 00                    3110 	.db 0x00
      000134 00                    3111 	.db 0x00
      000135 00                    3112 	.db 0x00
      000136 00                    3113 	.db 0x00
      000137 00                    3114 	.db 0x00
      000138 00                    3115 	.db 0x00
      000139 00                    3116 	.db 0x00
      00013A 00                    3117 	.db 0x00
      00013B 00                    3118 	.db 0x00
      00013C 00                    3119 	.db 0x00
      00013D 00                    3120 	.db 0x00
      00013E 00                    3121 	.db 0x00
      00013F 00                    3122 	.db 0x00
      000140 00                    3123 	.db 0x00
      000141 00                    3124 	.db 0x00
      000142 00                    3125 	.db 0x00
      000143 00                    3126 	.db 0x00
      000144 00                    3127 	.db 0x00
      000145 00                    3128 	.db 0x00
      000146 00                    3129 	.db 0x00
      000147 00                    3130 	.db 0x00
      000148 00                    3131 	.db 0x00
      000149 00                    3132 	.db 0x00
      00014A 00                    3133 	.db 0x00
      00014B 00                    3134 	.db 0x00
      00014C 00                    3135 	.db 0x00
      00014D 00                    3136 	.db 0x00
      00014E 00                    3137 	.db 0x00
      00014F 00                    3138 	.db 0x00
      000150 00                    3139 	.db 0x00
      000151 00                    3140 	.db 0x00
      000152 00                    3141 	.db 0x00
      000153 00                    3142 	.db 0x00
      000154 00                    3143 	.db 0x00
      000155 00                    3144 	.db 0x00
      000156 00                    3145 	.db 0x00
      000157 00                    3146 	.db 0x00
      000158 00                    3147 	.db 0x00
      000159 00                    3148 	.db 0x00
      00015A 00                    3149 	.db 0x00
      00015B 00                    3150 	.db 0x00
      00015C 00                    3151 	.db 0x00
      00015D 00                    3152 	.db 0x00
      00015E 00                    3153 	.db 0x00
      00015F 00                    3154 	.db 0x00
      000160 00                    3155 	.db 0x00
      000161 00                    3156 	.db 0x00
      000162 00                    3157 	.db 0x00
      000163 00                    3158 	.db 0x00
      000164 00                    3159 	.db 0x00
      000165 00                    3160 	.db 0x00
      000166 00                    3161 	.db 0x00
      000167 00                    3162 	.db 0x00
      000168 00                    3163 	.db 0x00
      000169 00                    3164 	.db 0x00
      00016A 00                    3165 	.db 0x00
      00016B 00                    3166 	.db 0x00
      00016C 00                    3167 	.db 0x00
      00016D 00                    3168 	.db 0x00
      00016E 00                    3169 	.db 0x00
      00016F 00                    3170 	.db 0x00
      000170 00                    3171 	.db 0x00
      000171 00                    3172 	.db 0x00
      000172 00                    3173 	.db 0x00
      000173 00                    3174 	.db 0x00
      000174 00                    3175 	.db 0x00
      000175 00                    3176 	.db 0x00
      000176 00                    3177 	.db 0x00
      000177 00                    3178 	.db 0x00
      000178 00                    3179 	.db 0x00
      000179 00                    3180 	.db 0x00
      00017A 00                    3181 	.db 0x00
      00017B 00                    3182 	.db 0x00
      00017C 00                    3183 	.db 0x00
      00017D 00                    3184 	.db 0x00
      00017E 00                    3185 	.db 0x00
      00017F 00                    3186 	.db 0x00
      000180 00                    3187 	.db 0x00
      000181 00                    3188 	.db 0x00
      000182 00                    3189 	.db 0x00
      000183 00                    3190 	.db 0x00
      000184 00                    3191 	.db 0x00
      000185 00                    3192 	.db 0x00
      000186 00                    3193 	.db 0x00
      000187 00                    3194 	.db 0x00
      000188 00                    3195 	.db 0x00
      000189 00                    3196 	.db 0x00
      00018A 00                    3197 	.db 0x00
      00018B 00                    3198 	.db 0x00
      00018C 00                    3199 	.db 0x00
      00018D 00                    3200 	.db 0x00
      00018E 00                    3201 	.db 0x00
      00018F 00                    3202 	.db 0x00
      000190 00                    3203 	.db 0x00
      000191 00                    3204 	.db 0x00
      000192 00                    3205 	.db 0x00
      000193 00                    3206 	.db 0x00
      000194 00                    3207 	.db 0x00
      000195 00                    3208 	.db 0x00
      000196 00                    3209 	.db 0x00
      000197 00                    3210 	.db 0x00
      000198 00                    3211 	.db 0x00
      000199 00                    3212 	.db 0x00
      00019A 00                    3213 	.db 0x00
      00019B 00                    3214 	.db 0x00
      00019C 00                    3215 	.db 0x00
      00019D 00                    3216 	.db 0x00
      00019E 00                    3217 	.db 0x00
      00019F 00                    3218 	.db 0x00
      0001A0 00                    3219 	.db 0x00
      0001A1 00                    3220 	.db 0x00
      0001A2 00                    3221 	.db 0x00
      0001A3 00                    3222 	.db 0x00
      0001A4 00                    3223 	.db 0x00
      0001A5 00                    3224 	.db 0x00
      0001A6 00                    3225 	.db 0x00
      0001A7 00                    3226 	.db 0x00
      0001A8 00                    3227 	.db 0x00
      0001A9 00                    3228 	.db 0x00
      0001AA 00                    3229 	.db 0x00
      0001AB 00                    3230 	.db 0x00
      0001AC 00                    3231 	.db 0x00
      0001AD 00                    3232 	.db 0x00
      0001AE 00                    3233 	.db 0x00
      0001AF 00                    3234 	.db 0x00
      0001B0 00                    3235 	.db 0x00
      0001B1 00                    3236 	.db 0x00
      0001B2 00                    3237 	.db 0x00
      0001B3 00                    3238 	.db 0x00
      0001B4 00                    3239 	.db 0x00
      0001B5 00                    3240 	.db 0x00
      0001B6 00                    3241 	.db 0x00
      0001B7 00                    3242 	.db 0x00
      0001B8 00                    3243 	.db 0x00
      0001B9 00                    3244 	.db 0x00
      0001BA 00                    3245 	.db 0x00
      0001BB 00                    3246 	.db 0x00
      0001BC 00                    3247 	.db 0x00
      0001BD 00                    3248 	.db 0x00
      0001BE 00                    3249 	.db 0x00
      0001BF 00                    3250 	.db 0x00
      0001C0 00                    3251 	.db 0x00
      0001C1 00                    3252 	.db 0x00
      0001C2 00                    3253 	.db 0x00
      0001C3 00                    3254 	.db 0x00
      0001C4 00                    3255 	.db 0x00
      0001C5 00                    3256 	.db 0x00
      0001C6 00                    3257 	.db 0x00
      0001C7 00                    3258 	.db 0x00
      0001C8 00                    3259 	.db 0x00
      0001C9 00                    3260 	.db 0x00
      0001CA 00                    3261 	.db 0x00
      0001CB 00                    3262 	.db 0x00
      0001CC 00                    3263 	.db 0x00
      0001CD 00                    3264 	.db 0x00
      0001CE 00                    3265 	.db 0x00
      0001CF 00                    3266 	.db 0x00
      0001D0 00                    3267 	.db 0x00
      0001D1 00                    3268 	.db 0x00
      0001D2 00                    3269 	.db 0x00
      0001D3 00                    3270 	.db 0x00
      0001D4 00                    3271 	.db 0x00
      0001D5 00                    3272 	.db 0x00
      0001D6 00                    3273 	.db 0x00
      0001D7 00                    3274 	.db 0x00
      0001D8 00                    3275 	.db 0x00
      0001D9 00                    3276 	.db 0x00
      0001DA 00                    3277 	.db 0x00
      0001DB 00                    3278 	.db 0x00
      0001DC 00                    3279 	.db 0x00
      0001DD 00                    3280 	.db 0x00
      0001DE 00                    3281 	.db 0x00
      0001DF 00                    3282 	.db 0x00
                                   3283 	.area CONST   (CODE)
      0001E0                       3284 ___str_0:
      0001E0 0A                    3285 	.db 0x0a
      0001E1 0D                    3286 	.db 0x0d
      0001E2 1B                    3287 	.db 0x1b
      0001E3 5B 31 3B 33 31 6D 45  3288 	.ascii "[1;31mERROR: Unknown Memory Addr! = %d"
             52 52 4F 52 3A 20 55
             6E 6B 6E 6F 77 6E 20
             4D 65 6D 6F 72 79 20
             41 64 64 72 21 20 3D
             20 25 64
      000209 00                    3289 	.db 0x00
                                   3290 	.area CSEG    (CODE)
                                   3291 	.area CONST   (CODE)
      00020A                       3292 ___str_1:
      00020A 1B                    3293 	.db 0x1b
      00020B 5B 30 6D              3294 	.ascii "[0m"
      00020E 00                    3295 	.db 0x00
                                   3296 	.area CSEG    (CODE)
                                   3297 	.area CONST   (CODE)
      00020F                       3298 ___str_2:
      00020F 0A                    3299 	.db 0x0a
      000210 0D                    3300 	.db 0x0d
      000211 1B                    3301 	.db 0x1b
      000212 5B 31 3B 33 31 6D 45  3302 	.ascii "[1;31mERROR: UNKNOWN CONTROLLER"
             52 52 4F 52 3A 20 55
             4E 4B 4E 4F 57 4E 20
             43 4F 4E 54 52 4F 4C
             4C 45 52
      000231 00                    3303 	.db 0x00
                                   3304 	.area CSEG    (CODE)
                                   3305 	.area CONST   (CODE)
      000232                       3306 ___str_3:
      000232 53 54 41 54 55 53     3307 	.ascii "STATUS"
      000238 00                    3308 	.db 0x00
                                   3309 	.area CSEG    (CODE)
                                   3310 	.area CONST   (CODE)
      000239                       3311 ___str_4:
      000239 53 50 4F 32           3312 	.ascii "SPO2"
      00023D 00                    3313 	.db 0x00
                                   3314 	.area CSEG    (CODE)
                                   3315 	.area CONST   (CODE)
      00023E                       3316 ___str_5:
      00023E 42 50 4D              3317 	.ascii "BPM"
      000241 00                    3318 	.db 0x00
                                   3319 	.area CSEG    (CODE)
                                   3320 	.area CONST   (CODE)
      000242                       3321 ___str_6:
      000242 0A                    3322 	.db 0x0a
      000243 0D                    3323 	.db 0x0d
      000244 1B                    3324 	.db 0x1b
      000245 5B 33 38 3B 35 3B 32  3325 	.ascii "[38;5;214mLCD Testing"
             31 34 6D 4C 43 44 20
             54 65 73 74 69 6E 67
      00025A 00                    3326 	.db 0x00
                                   3327 	.area CSEG    (CODE)
                                   3328 	.area XINIT   (CODE)
                                   3329 	.area CABS    (ABS,CODE)
