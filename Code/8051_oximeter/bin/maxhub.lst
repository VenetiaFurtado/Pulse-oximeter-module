                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module maxhub
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _lastTest
                                     12 	.globl _checkDeviceType
                                     13 	.globl _setSampleRate
                                     14 	.globl _setPulseWidth
                                     15 	.globl _readSensorBpm
                                     16 	.globl _readBpm
                                     17 	.globl _numSamplesOutFifo
                                     18 	.globl _configSensorBpm
                                     19 	.globl _configBpm
                                     20 	.globl _maximFastAlgoControl
                                     21 	.globl _max30101Control
                                     22 	.globl _agcAlgoControl
                                     23 	.globl _setFifoThreshold
                                     24 	.globl _setOutputMode
                                     25 	.globl _readSensorHubStatus
                                     26 	.globl _setBootloaderMode
                                     27 	.globl _setApplicationMode
                                     28 	.globl _readSensorHubMode
                                     29 	.globl _readRegisterMAX30101
                                     30 	.globl _writeRegisterMAX30101
                                     31 	.globl _i2cMax32664SequentialReadByte
                                     32 	.globl _i2cMax32664ReadByte
                                     33 	.globl _i2cMax32664WriteByte
                                     34 	.globl _i2cMax32664WriteBytes
                                     35 	.globl _hubDelayMs
                                     36 	.globl _printf_tiny
                                     37 	.globl _printf
                                     38 	.globl _i2cByteRead
                                     39 	.globl _i2cByteWrite
                                     40 	.globl _sendNAcknowledge
                                     41 	.globl _sendAcknowledge
                                     42 	.globl _sendControlByteNoAddr
                                     43 	.globl _stop
                                     44 	.globl _start
                                     45 	.globl _checkAcknowledgement
                                     46 	.globl _P5_7
                                     47 	.globl _P5_6
                                     48 	.globl _P5_5
                                     49 	.globl _P5_4
                                     50 	.globl _P5_3
                                     51 	.globl _P5_2
                                     52 	.globl _P5_1
                                     53 	.globl _P5_0
                                     54 	.globl _P4_7
                                     55 	.globl _P4_6
                                     56 	.globl _P4_5
                                     57 	.globl _P4_4
                                     58 	.globl _P4_3
                                     59 	.globl _P4_2
                                     60 	.globl _P4_1
                                     61 	.globl _P4_0
                                     62 	.globl _PX0L
                                     63 	.globl _PT0L
                                     64 	.globl _PX1L
                                     65 	.globl _PT1L
                                     66 	.globl _PSL
                                     67 	.globl _PT2L
                                     68 	.globl _PPCL
                                     69 	.globl _EC
                                     70 	.globl _CCF0
                                     71 	.globl _CCF1
                                     72 	.globl _CCF2
                                     73 	.globl _CCF3
                                     74 	.globl _CCF4
                                     75 	.globl _CR
                                     76 	.globl _CF
                                     77 	.globl _TF2
                                     78 	.globl _EXF2
                                     79 	.globl _RCLK
                                     80 	.globl _TCLK
                                     81 	.globl _EXEN2
                                     82 	.globl _TR2
                                     83 	.globl _C_T2
                                     84 	.globl _CP_RL2
                                     85 	.globl _T2CON_7
                                     86 	.globl _T2CON_6
                                     87 	.globl _T2CON_5
                                     88 	.globl _T2CON_4
                                     89 	.globl _T2CON_3
                                     90 	.globl _T2CON_2
                                     91 	.globl _T2CON_1
                                     92 	.globl _T2CON_0
                                     93 	.globl _PT2
                                     94 	.globl _ET2
                                     95 	.globl _CY
                                     96 	.globl _AC
                                     97 	.globl _F0
                                     98 	.globl _RS1
                                     99 	.globl _RS0
                                    100 	.globl _OV
                                    101 	.globl _F1
                                    102 	.globl _P
                                    103 	.globl _PS
                                    104 	.globl _PT1
                                    105 	.globl _PX1
                                    106 	.globl _PT0
                                    107 	.globl _PX0
                                    108 	.globl _RD
                                    109 	.globl _WR
                                    110 	.globl _T1
                                    111 	.globl _T0
                                    112 	.globl _INT1
                                    113 	.globl _INT0
                                    114 	.globl _TXD
                                    115 	.globl _RXD
                                    116 	.globl _P3_7
                                    117 	.globl _P3_6
                                    118 	.globl _P3_5
                                    119 	.globl _P3_4
                                    120 	.globl _P3_3
                                    121 	.globl _P3_2
                                    122 	.globl _P3_1
                                    123 	.globl _P3_0
                                    124 	.globl _EA
                                    125 	.globl _ES
                                    126 	.globl _ET1
                                    127 	.globl _EX1
                                    128 	.globl _ET0
                                    129 	.globl _EX0
                                    130 	.globl _P2_7
                                    131 	.globl _P2_6
                                    132 	.globl _P2_5
                                    133 	.globl _P2_4
                                    134 	.globl _P2_3
                                    135 	.globl _P2_2
                                    136 	.globl _P2_1
                                    137 	.globl _P2_0
                                    138 	.globl _SM0
                                    139 	.globl _SM1
                                    140 	.globl _SM2
                                    141 	.globl _REN
                                    142 	.globl _TB8
                                    143 	.globl _RB8
                                    144 	.globl _TI
                                    145 	.globl _RI
                                    146 	.globl _P1_7
                                    147 	.globl _P1_6
                                    148 	.globl _P1_5
                                    149 	.globl _P1_4
                                    150 	.globl _P1_3
                                    151 	.globl _P1_2
                                    152 	.globl _P1_1
                                    153 	.globl _P1_0
                                    154 	.globl _TF1
                                    155 	.globl _TR1
                                    156 	.globl _TF0
                                    157 	.globl _TR0
                                    158 	.globl _IE1
                                    159 	.globl _IT1
                                    160 	.globl _IE0
                                    161 	.globl _IT0
                                    162 	.globl _P0_7
                                    163 	.globl _P0_6
                                    164 	.globl _P0_5
                                    165 	.globl _P0_4
                                    166 	.globl _P0_3
                                    167 	.globl _P0_2
                                    168 	.globl _P0_1
                                    169 	.globl _P0_0
                                    170 	.globl _EECON
                                    171 	.globl _KBF
                                    172 	.globl _KBE
                                    173 	.globl _KBLS
                                    174 	.globl _BRL
                                    175 	.globl _BDRCON
                                    176 	.globl _T2MOD
                                    177 	.globl _SPDAT
                                    178 	.globl _SPSTA
                                    179 	.globl _SPCON
                                    180 	.globl _SADEN
                                    181 	.globl _SADDR
                                    182 	.globl _WDTPRG
                                    183 	.globl _WDTRST
                                    184 	.globl _P5
                                    185 	.globl _P4
                                    186 	.globl _IPH1
                                    187 	.globl _IPL1
                                    188 	.globl _IPH0
                                    189 	.globl _IPL0
                                    190 	.globl _IEN1
                                    191 	.globl _IEN0
                                    192 	.globl _CMOD
                                    193 	.globl _CL
                                    194 	.globl _CH
                                    195 	.globl _CCON
                                    196 	.globl _CCAPM4
                                    197 	.globl _CCAPM3
                                    198 	.globl _CCAPM2
                                    199 	.globl _CCAPM1
                                    200 	.globl _CCAPM0
                                    201 	.globl _CCAP4L
                                    202 	.globl _CCAP3L
                                    203 	.globl _CCAP2L
                                    204 	.globl _CCAP1L
                                    205 	.globl _CCAP0L
                                    206 	.globl _CCAP4H
                                    207 	.globl _CCAP3H
                                    208 	.globl _CCAP2H
                                    209 	.globl _CCAP1H
                                    210 	.globl _CCAP0H
                                    211 	.globl _CKCON1
                                    212 	.globl _CKCON0
                                    213 	.globl _CKRL
                                    214 	.globl _AUXR1
                                    215 	.globl _AUXR
                                    216 	.globl _TH2
                                    217 	.globl _TL2
                                    218 	.globl _RCAP2H
                                    219 	.globl _RCAP2L
                                    220 	.globl _T2CON
                                    221 	.globl _B
                                    222 	.globl _ACC
                                    223 	.globl _PSW
                                    224 	.globl _IP
                                    225 	.globl _P3
                                    226 	.globl _IE
                                    227 	.globl _P2
                                    228 	.globl _SBUF
                                    229 	.globl _SCON
                                    230 	.globl _P1
                                    231 	.globl _TH1
                                    232 	.globl _TH0
                                    233 	.globl _TL1
                                    234 	.globl _TL0
                                    235 	.globl _TMOD
                                    236 	.globl _TCON
                                    237 	.globl _PCON
                                    238 	.globl _DPH
                                    239 	.globl _DPL
                                    240 	.globl _SP
                                    241 	.globl _P0
                                    242 	.globl _readSensorBpm_PARM_2
                                    243 	.globl _readBpm_PARM_2
                                    244 	.globl _writeRegisterMAX30101_PARM_2
                                    245 	.globl _i2cMax32664SequentialReadByte_PARM_4
                                    246 	.globl _i2cMax32664SequentialReadByte_PARM_3
                                    247 	.globl _i2cMax32664SequentialReadByte_PARM_2
                                    248 	.globl _i2cMax32664ReadByte_PARM_3
                                    249 	.globl _i2cMax32664ReadByte_PARM_2
                                    250 	.globl _i2cMax32664WriteByte_PARM_3
                                    251 	.globl _i2cMax32664WriteByte_PARM_2
                                    252 	.globl _i2cMax32664WriteBytes_PARM_4
                                    253 	.globl _i2cMax32664WriteBytes_PARM_3
                                    254 	.globl _i2cMax32664WriteBytes_PARM_2
                                    255 	.globl _testMaxHub
                                    256 ;--------------------------------------------------------
                                    257 ; special function registers
                                    258 ;--------------------------------------------------------
                                    259 	.area RSEG    (ABS,DATA)
      000000                        260 	.org 0x0000
                           000080   261 _P0	=	0x0080
                           000081   262 _SP	=	0x0081
                           000082   263 _DPL	=	0x0082
                           000083   264 _DPH	=	0x0083
                           000087   265 _PCON	=	0x0087
                           000088   266 _TCON	=	0x0088
                           000089   267 _TMOD	=	0x0089
                           00008A   268 _TL0	=	0x008a
                           00008B   269 _TL1	=	0x008b
                           00008C   270 _TH0	=	0x008c
                           00008D   271 _TH1	=	0x008d
                           000090   272 _P1	=	0x0090
                           000098   273 _SCON	=	0x0098
                           000099   274 _SBUF	=	0x0099
                           0000A0   275 _P2	=	0x00a0
                           0000A8   276 _IE	=	0x00a8
                           0000B0   277 _P3	=	0x00b0
                           0000B8   278 _IP	=	0x00b8
                           0000D0   279 _PSW	=	0x00d0
                           0000E0   280 _ACC	=	0x00e0
                           0000F0   281 _B	=	0x00f0
                           0000C8   282 _T2CON	=	0x00c8
                           0000CA   283 _RCAP2L	=	0x00ca
                           0000CB   284 _RCAP2H	=	0x00cb
                           0000CC   285 _TL2	=	0x00cc
                           0000CD   286 _TH2	=	0x00cd
                           00008E   287 _AUXR	=	0x008e
                           0000A2   288 _AUXR1	=	0x00a2
                           000097   289 _CKRL	=	0x0097
                           00008F   290 _CKCON0	=	0x008f
                           0000AF   291 _CKCON1	=	0x00af
                           0000FA   292 _CCAP0H	=	0x00fa
                           0000FB   293 _CCAP1H	=	0x00fb
                           0000FC   294 _CCAP2H	=	0x00fc
                           0000FD   295 _CCAP3H	=	0x00fd
                           0000FE   296 _CCAP4H	=	0x00fe
                           0000EA   297 _CCAP0L	=	0x00ea
                           0000EB   298 _CCAP1L	=	0x00eb
                           0000EC   299 _CCAP2L	=	0x00ec
                           0000ED   300 _CCAP3L	=	0x00ed
                           0000EE   301 _CCAP4L	=	0x00ee
                           0000DA   302 _CCAPM0	=	0x00da
                           0000DB   303 _CCAPM1	=	0x00db
                           0000DC   304 _CCAPM2	=	0x00dc
                           0000DD   305 _CCAPM3	=	0x00dd
                           0000DE   306 _CCAPM4	=	0x00de
                           0000D8   307 _CCON	=	0x00d8
                           0000F9   308 _CH	=	0x00f9
                           0000E9   309 _CL	=	0x00e9
                           0000D9   310 _CMOD	=	0x00d9
                           0000A8   311 _IEN0	=	0x00a8
                           0000B1   312 _IEN1	=	0x00b1
                           0000B8   313 _IPL0	=	0x00b8
                           0000B7   314 _IPH0	=	0x00b7
                           0000B2   315 _IPL1	=	0x00b2
                           0000B3   316 _IPH1	=	0x00b3
                           0000C0   317 _P4	=	0x00c0
                           0000E8   318 _P5	=	0x00e8
                           0000A6   319 _WDTRST	=	0x00a6
                           0000A7   320 _WDTPRG	=	0x00a7
                           0000A9   321 _SADDR	=	0x00a9
                           0000B9   322 _SADEN	=	0x00b9
                           0000C3   323 _SPCON	=	0x00c3
                           0000C4   324 _SPSTA	=	0x00c4
                           0000C5   325 _SPDAT	=	0x00c5
                           0000C9   326 _T2MOD	=	0x00c9
                           00009B   327 _BDRCON	=	0x009b
                           00009A   328 _BRL	=	0x009a
                           00009C   329 _KBLS	=	0x009c
                           00009D   330 _KBE	=	0x009d
                           00009E   331 _KBF	=	0x009e
                           0000D2   332 _EECON	=	0x00d2
                                    333 ;--------------------------------------------------------
                                    334 ; special function bits
                                    335 ;--------------------------------------------------------
                                    336 	.area RSEG    (ABS,DATA)
      000000                        337 	.org 0x0000
                           000080   338 _P0_0	=	0x0080
                           000081   339 _P0_1	=	0x0081
                           000082   340 _P0_2	=	0x0082
                           000083   341 _P0_3	=	0x0083
                           000084   342 _P0_4	=	0x0084
                           000085   343 _P0_5	=	0x0085
                           000086   344 _P0_6	=	0x0086
                           000087   345 _P0_7	=	0x0087
                           000088   346 _IT0	=	0x0088
                           000089   347 _IE0	=	0x0089
                           00008A   348 _IT1	=	0x008a
                           00008B   349 _IE1	=	0x008b
                           00008C   350 _TR0	=	0x008c
                           00008D   351 _TF0	=	0x008d
                           00008E   352 _TR1	=	0x008e
                           00008F   353 _TF1	=	0x008f
                           000090   354 _P1_0	=	0x0090
                           000091   355 _P1_1	=	0x0091
                           000092   356 _P1_2	=	0x0092
                           000093   357 _P1_3	=	0x0093
                           000094   358 _P1_4	=	0x0094
                           000095   359 _P1_5	=	0x0095
                           000096   360 _P1_6	=	0x0096
                           000097   361 _P1_7	=	0x0097
                           000098   362 _RI	=	0x0098
                           000099   363 _TI	=	0x0099
                           00009A   364 _RB8	=	0x009a
                           00009B   365 _TB8	=	0x009b
                           00009C   366 _REN	=	0x009c
                           00009D   367 _SM2	=	0x009d
                           00009E   368 _SM1	=	0x009e
                           00009F   369 _SM0	=	0x009f
                           0000A0   370 _P2_0	=	0x00a0
                           0000A1   371 _P2_1	=	0x00a1
                           0000A2   372 _P2_2	=	0x00a2
                           0000A3   373 _P2_3	=	0x00a3
                           0000A4   374 _P2_4	=	0x00a4
                           0000A5   375 _P2_5	=	0x00a5
                           0000A6   376 _P2_6	=	0x00a6
                           0000A7   377 _P2_7	=	0x00a7
                           0000A8   378 _EX0	=	0x00a8
                           0000A9   379 _ET0	=	0x00a9
                           0000AA   380 _EX1	=	0x00aa
                           0000AB   381 _ET1	=	0x00ab
                           0000AC   382 _ES	=	0x00ac
                           0000AF   383 _EA	=	0x00af
                           0000B0   384 _P3_0	=	0x00b0
                           0000B1   385 _P3_1	=	0x00b1
                           0000B2   386 _P3_2	=	0x00b2
                           0000B3   387 _P3_3	=	0x00b3
                           0000B4   388 _P3_4	=	0x00b4
                           0000B5   389 _P3_5	=	0x00b5
                           0000B6   390 _P3_6	=	0x00b6
                           0000B7   391 _P3_7	=	0x00b7
                           0000B0   392 _RXD	=	0x00b0
                           0000B1   393 _TXD	=	0x00b1
                           0000B2   394 _INT0	=	0x00b2
                           0000B3   395 _INT1	=	0x00b3
                           0000B4   396 _T0	=	0x00b4
                           0000B5   397 _T1	=	0x00b5
                           0000B6   398 _WR	=	0x00b6
                           0000B7   399 _RD	=	0x00b7
                           0000B8   400 _PX0	=	0x00b8
                           0000B9   401 _PT0	=	0x00b9
                           0000BA   402 _PX1	=	0x00ba
                           0000BB   403 _PT1	=	0x00bb
                           0000BC   404 _PS	=	0x00bc
                           0000D0   405 _P	=	0x00d0
                           0000D1   406 _F1	=	0x00d1
                           0000D2   407 _OV	=	0x00d2
                           0000D3   408 _RS0	=	0x00d3
                           0000D4   409 _RS1	=	0x00d4
                           0000D5   410 _F0	=	0x00d5
                           0000D6   411 _AC	=	0x00d6
                           0000D7   412 _CY	=	0x00d7
                           0000AD   413 _ET2	=	0x00ad
                           0000BD   414 _PT2	=	0x00bd
                           0000C8   415 _T2CON_0	=	0x00c8
                           0000C9   416 _T2CON_1	=	0x00c9
                           0000CA   417 _T2CON_2	=	0x00ca
                           0000CB   418 _T2CON_3	=	0x00cb
                           0000CC   419 _T2CON_4	=	0x00cc
                           0000CD   420 _T2CON_5	=	0x00cd
                           0000CE   421 _T2CON_6	=	0x00ce
                           0000CF   422 _T2CON_7	=	0x00cf
                           0000C8   423 _CP_RL2	=	0x00c8
                           0000C9   424 _C_T2	=	0x00c9
                           0000CA   425 _TR2	=	0x00ca
                           0000CB   426 _EXEN2	=	0x00cb
                           0000CC   427 _TCLK	=	0x00cc
                           0000CD   428 _RCLK	=	0x00cd
                           0000CE   429 _EXF2	=	0x00ce
                           0000CF   430 _TF2	=	0x00cf
                           0000DF   431 _CF	=	0x00df
                           0000DE   432 _CR	=	0x00de
                           0000DC   433 _CCF4	=	0x00dc
                           0000DB   434 _CCF3	=	0x00db
                           0000DA   435 _CCF2	=	0x00da
                           0000D9   436 _CCF1	=	0x00d9
                           0000D8   437 _CCF0	=	0x00d8
                           0000AE   438 _EC	=	0x00ae
                           0000BE   439 _PPCL	=	0x00be
                           0000BD   440 _PT2L	=	0x00bd
                           0000BC   441 _PSL	=	0x00bc
                           0000BB   442 _PT1L	=	0x00bb
                           0000BA   443 _PX1L	=	0x00ba
                           0000B9   444 _PT0L	=	0x00b9
                           0000B8   445 _PX0L	=	0x00b8
                           0000C0   446 _P4_0	=	0x00c0
                           0000C1   447 _P4_1	=	0x00c1
                           0000C2   448 _P4_2	=	0x00c2
                           0000C3   449 _P4_3	=	0x00c3
                           0000C4   450 _P4_4	=	0x00c4
                           0000C5   451 _P4_5	=	0x00c5
                           0000C6   452 _P4_6	=	0x00c6
                           0000C7   453 _P4_7	=	0x00c7
                           0000E8   454 _P5_0	=	0x00e8
                           0000E9   455 _P5_1	=	0x00e9
                           0000EA   456 _P5_2	=	0x00ea
                           0000EB   457 _P5_3	=	0x00eb
                           0000EC   458 _P5_4	=	0x00ec
                           0000ED   459 _P5_5	=	0x00ed
                           0000EE   460 _P5_6	=	0x00ee
                           0000EF   461 _P5_7	=	0x00ef
                                    462 ;--------------------------------------------------------
                                    463 ; overlayable register banks
                                    464 ;--------------------------------------------------------
                                    465 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        466 	.ds 8
                                    467 ;--------------------------------------------------------
                                    468 ; internal ram data
                                    469 ;--------------------------------------------------------
                                    470 	.area DSEG    (DATA)
      000000                        471 _readBpm_sloc0_1_0:
      000000                        472 	.ds 3
      000003                        473 _readBpm_sloc1_1_0:
      000003                        474 	.ds 1
      000004                        475 _readSensorBpm_sloc0_1_0:
      000004                        476 	.ds 4
      000008                        477 _readSensorBpm_sloc1_1_0:
      000008                        478 	.ds 1
      000009                        479 _readSensorBpm_sloc2_1_0:
      000009                        480 	.ds 2
      00000B                        481 _readSensorBpm_sloc3_1_0:
      00000B                        482 	.ds 3
                                    483 ;--------------------------------------------------------
                                    484 ; overlayable items in internal ram
                                    485 ;--------------------------------------------------------
                                    486 ;--------------------------------------------------------
                                    487 ; indirectly addressable internal ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area ISEG    (DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; absolute internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area IABS    (ABS,DATA)
                                    494 	.area IABS    (ABS,DATA)
                                    495 ;--------------------------------------------------------
                                    496 ; bit data
                                    497 ;--------------------------------------------------------
                                    498 	.area BSEG    (BIT)
                                    499 ;--------------------------------------------------------
                                    500 ; paged external ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area PSEG    (PAG,XDATA)
                                    503 ;--------------------------------------------------------
                                    504 ; external ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area XSEG    (XDATA)
      000000                        507 _hubDelayMs_delayMs_65536_28:
      000000                        508 	.ds 1
      000001                        509 _i2cMax32664WriteBytes_PARM_2:
      000001                        510 	.ds 1
      000002                        511 _i2cMax32664WriteBytes_PARM_3:
      000002                        512 	.ds 3
      000005                        513 _i2cMax32664WriteBytes_PARM_4:
      000005                        514 	.ds 1
      000006                        515 _i2cMax32664WriteBytes_familyByte_65536_34:
      000006                        516 	.ds 1
      000007                        517 _i2cMax32664WriteByte_PARM_2:
      000007                        518 	.ds 1
      000008                        519 _i2cMax32664WriteByte_PARM_3:
      000008                        520 	.ds 1
      000009                        521 _i2cMax32664WriteByte_familyByte_65536_44:
      000009                        522 	.ds 1
      00000A                        523 _i2cMax32664ReadByte_PARM_2:
      00000A                        524 	.ds 1
      00000B                        525 _i2cMax32664ReadByte_PARM_3:
      00000B                        526 	.ds 3
      00000E                        527 _i2cMax32664ReadByte_familyByte_65536_47:
      00000E                        528 	.ds 1
      00000F                        529 _i2cMax32664SequentialReadByte_PARM_2:
      00000F                        530 	.ds 1
      000010                        531 _i2cMax32664SequentialReadByte_PARM_3:
      000010                        532 	.ds 3
      000013                        533 _i2cMax32664SequentialReadByte_PARM_4:
      000013                        534 	.ds 1
      000014                        535 _i2cMax32664SequentialReadByte_familyByte_65536_58:
      000014                        536 	.ds 1
      000015                        537 _writeRegisterMAX30101_PARM_2:
      000015                        538 	.ds 1
      000016                        539 _writeRegisterMAX30101_regAddr_65536_70:
      000016                        540 	.ds 1
      000017                        541 _writeRegisterMAX30101_dataArr_65536_71:
      000017                        542 	.ds 2
      000019                        543 _readRegisterMAX30101_regAddr_65536_72:
      000019                        544 	.ds 1
      00001A                        545 _setOutputMode_outputType_65536_82:
      00001A                        546 	.ds 1
      00001B                        547 _setFifoThreshold_intThresh_65536_86:
      00001B                        548 	.ds 1
      00001C                        549 _agcAlgoControl_enable_65536_89:
      00001C                        550 	.ds 1
      00001D                        551 _max30101Control_senSwitch_65536_94:
      00001D                        552 	.ds 1
      00001E                        553 _maximFastAlgoControl_mode_65536_99:
      00001E                        554 	.ds 1
      00001F                        555 _configBpm_mode_65536_104:
      00001F                        556 	.ds 1
      000020                        557 _configSensorBpm_mode_65536_112:
      000020                        558 	.ds 1
      000021                        559 _readBpm_PARM_2:
      000021                        560 	.ds 3
      000024                        561 _readBpm_mode_65536_122:
      000024                        562 	.ds 1
      000025                        563 _readBpm_statusByte_65538_127:
      000025                        564 	.ds 2
      000027                        565 _readBpm_dataArr_65538_127:
      000027                        566 	.ds 11
      000032                        567 _readSensorBpm_PARM_2:
      000032                        568 	.ds 3
      000035                        569 _readSensorBpm_mode_65536_140:
      000035                        570 	.ds 1
      000036                        571 _readSensorBpm_statusByte_65538_145:
      000036                        572 	.ds 2
      000038                        573 _readSensorBpm_sensorData_65538_145:
      000038                        574 	.ds 23
      00004F                        575 _setPulseWidth_width_65536_158:
      00004F                        576 	.ds 2
      000051                        577 _setPulseWidth_bits_65536_159:
      000051                        578 	.ds 1
      000052                        579 _setSampleRate_sampRate_65536_160:
      000052                        580 	.ds 2
      000054                        581 _setSampleRate_bits_65536_161:
      000054                        582 	.ds 1
      000055                        583 _testMaxHub_data_65538_169:
      000055                        584 	.ds 21
                                    585 ;--------------------------------------------------------
                                    586 ; absolute external ram data
                                    587 ;--------------------------------------------------------
                                    588 	.area XABS    (ABS,XDATA)
                                    589 ;--------------------------------------------------------
                                    590 ; external initialized ram data
                                    591 ;--------------------------------------------------------
                                    592 	.area XISEG   (XDATA)
                                    593 	.area HOME    (CODE)
                                    594 	.area GSINIT0 (CODE)
                                    595 	.area GSINIT1 (CODE)
                                    596 	.area GSINIT2 (CODE)
                                    597 	.area GSINIT3 (CODE)
                                    598 	.area GSINIT4 (CODE)
                                    599 	.area GSINIT5 (CODE)
                                    600 	.area GSINIT  (CODE)
                                    601 	.area GSFINAL (CODE)
                                    602 	.area CSEG    (CODE)
                                    603 ;--------------------------------------------------------
                                    604 ; global & static initialisations
                                    605 ;--------------------------------------------------------
                                    606 	.area HOME    (CODE)
                                    607 	.area GSINIT  (CODE)
                                    608 	.area GSFINAL (CODE)
                                    609 	.area GSINIT  (CODE)
                                    610 ;--------------------------------------------------------
                                    611 ; Home
                                    612 ;--------------------------------------------------------
                                    613 	.area HOME    (CODE)
                                    614 	.area HOME    (CODE)
                                    615 ;--------------------------------------------------------
                                    616 ; code
                                    617 ;--------------------------------------------------------
                                    618 	.area CSEG    (CODE)
                                    619 ;------------------------------------------------------------
                                    620 ;Allocation info for local variables in function 'hubDelayMs'
                                    621 ;------------------------------------------------------------
                                    622 ;delayMs                   Allocated with name '_hubDelayMs_delayMs_65536_28'
                                    623 ;i                         Allocated with name '_hubDelayMs_i_131072_30'
                                    624 ;j                         Allocated with name '_hubDelayMs_j_262144_32'
                                    625 ;------------------------------------------------------------
                                    626 ;	src/maxhub.c:44: void hubDelayMs(const uint8_t delayMs)
                                    627 ;	-----------------------------------------
                                    628 ;	 function hubDelayMs
                                    629 ;	-----------------------------------------
      000000                        630 _hubDelayMs:
                           000007   631 	ar7 = 0x07
                           000006   632 	ar6 = 0x06
                           000005   633 	ar5 = 0x05
                           000004   634 	ar4 = 0x04
                           000003   635 	ar3 = 0x03
                           000002   636 	ar2 = 0x02
                           000001   637 	ar1 = 0x01
                           000000   638 	ar0 = 0x00
      000000 E5 82            [12]  639 	mov	a,dpl
      000002 90r00r00         [24]  640 	mov	dptr,#_hubDelayMs_delayMs_65536_28
      000005 F0               [24]  641 	movx	@dptr,a
                                    642 ;	src/maxhub.c:46: for (uint8_t i = 0; i < delayMs; i++)
      000006 E0               [24]  643 	movx	a,@dptr
      000007 FF               [12]  644 	mov	r7,a
      000008 7E 00            [12]  645 	mov	r6,#0x00
      00000A                        646 00107$:
      00000A C3               [12]  647 	clr	c
      00000B EE               [12]  648 	mov	a,r6
      00000C 9F               [12]  649 	subb	a,r7
      00000D 50 1C            [24]  650 	jnc	00109$
                                    651 ;	src/maxhub.c:49: for (uint16_t j = 0; j < 1000; j++)
      00000F 7C 00            [12]  652 	mov	r4,#0x00
      000011 7D 00            [12]  653 	mov	r5,#0x00
      000013                        654 00104$:
      000013 8C 02            [24]  655 	mov	ar2,r4
      000015 8D 03            [24]  656 	mov	ar3,r5
      000017 C3               [12]  657 	clr	c
      000018 EA               [12]  658 	mov	a,r2
      000019 94 E8            [12]  659 	subb	a,#0xe8
      00001B EB               [12]  660 	mov	a,r3
      00001C 94 03            [12]  661 	subb	a,#0x03
      00001E 50 08            [24]  662 	jnc	00108$
                                    663 ;	src/maxhub.c:51: __asm__("nop");
      000020 00               [12]  664 	nop
                                    665 ;	src/maxhub.c:49: for (uint16_t j = 0; j < 1000; j++)
      000021 0C               [12]  666 	inc	r4
      000022 BC 00 EE         [24]  667 	cjne	r4,#0x00,00104$
      000025 0D               [12]  668 	inc	r5
      000026 80 EB            [24]  669 	sjmp	00104$
      000028                        670 00108$:
                                    671 ;	src/maxhub.c:46: for (uint8_t i = 0; i < delayMs; i++)
      000028 0E               [12]  672 	inc	r6
      000029 80 DF            [24]  673 	sjmp	00107$
      00002B                        674 00109$:
                                    675 ;	src/maxhub.c:54: }
      00002B 22               [24]  676 	ret
                                    677 ;------------------------------------------------------------
                                    678 ;Allocation info for local variables in function 'i2cMax32664WriteBytes'
                                    679 ;------------------------------------------------------------
                                    680 ;indexByte                 Allocated with name '_i2cMax32664WriteBytes_PARM_2'
                                    681 ;dataArray                 Allocated with name '_i2cMax32664WriteBytes_PARM_3'
                                    682 ;size                      Allocated with name '_i2cMax32664WriteBytes_PARM_4'
                                    683 ;familyByte                Allocated with name '_i2cMax32664WriteBytes_familyByte_65536_34'
                                    684 ;i                         Allocated with name '_i2cMax32664WriteBytes_i_131072_39'
                                    685 ;dataByte                  Allocated with name '_i2cMax32664WriteBytes_dataByte_196608_40'
                                    686 ;statusByte                Allocated with name '_i2cMax32664WriteBytes_statusByte_65537_43'
                                    687 ;------------------------------------------------------------
                                    688 ;	src/maxhub.c:65: int i2cMax32664WriteBytes(uint8_t familyByte, uint8_t indexByte, uint8_t dataArray[], uint8_t size)
                                    689 ;	-----------------------------------------
                                    690 ;	 function i2cMax32664WriteBytes
                                    691 ;	-----------------------------------------
      00002C                        692 _i2cMax32664WriteBytes:
      00002C E5 82            [12]  693 	mov	a,dpl
      00002E 90r00r06         [24]  694 	mov	dptr,#_i2cMax32664WriteBytes_familyByte_65536_34
      000031 F0               [24]  695 	movx	@dptr,a
                                    696 ;	src/maxhub.c:67: start();
      000032 12r00r00         [24]  697 	lcall	_start
                                    698 ;	src/maxhub.c:68: sendControlByteNoAddr(WRITE, MAX32664_ADDRESS);
      000035 90r00r00         [24]  699 	mov	dptr,#_sendControlByteNoAddr_PARM_2
      000038 74 55            [12]  700 	mov	a,#0x55
      00003A F0               [24]  701 	movx	@dptr,a
      00003B 75 82 00         [24]  702 	mov	dpl,#0x00
      00003E 12r00r00         [24]  703 	lcall	_sendControlByteNoAddr
                                    704 ;	src/maxhub.c:69: if (checkAcknowledgement() == FAIL)
      000041 12r00r00         [24]  705 	lcall	_checkAcknowledgement
      000044 AE 82            [24]  706 	mov	r6,dpl
      000046 AF 83            [24]  707 	mov	r7,dph
      000048 BE FF 3A         [24]  708 	cjne	r6,#0xff,00102$
      00004B BF FF 37         [24]  709 	cjne	r7,#0xff,00102$
                                    710 ;	src/maxhub.c:71: ERROR_LOG("%s:%d Write address failed!", __func__, __LINE__);
      00004E 74 47            [12]  711 	mov	a,#0x47
      000050 C0 E0            [24]  712 	push	acc
      000052 E4               [12]  713 	clr	a
      000053 C0 E0            [24]  714 	push	acc
      000055 74r2C            [12]  715 	mov	a,#___str_1
      000057 C0 E0            [24]  716 	push	acc
      000059 74s00            [12]  717 	mov	a,#(___str_1 >> 8)
      00005B C0 E0            [24]  718 	push	acc
      00005D 74 80            [12]  719 	mov	a,#0x80
      00005F C0 E0            [24]  720 	push	acc
      000061 74r00            [12]  721 	mov	a,#___str_0
      000063 C0 E0            [24]  722 	push	acc
      000065 74s00            [12]  723 	mov	a,#(___str_0 >> 8)
      000067 C0 E0            [24]  724 	push	acc
      000069 12r00r00         [24]  725 	lcall	_printf_tiny
      00006C E5 81            [12]  726 	mov	a,sp
      00006E 24 F9            [12]  727 	add	a,#0xf9
      000070 F5 81            [12]  728 	mov	sp,a
      000072 74r42            [12]  729 	mov	a,#___str_2
      000074 C0 E0            [24]  730 	push	acc
      000076 74s00            [12]  731 	mov	a,#(___str_2 >> 8)
      000078 C0 E0            [24]  732 	push	acc
      00007A 12r00r00         [24]  733 	lcall	_printf_tiny
      00007D 15 81            [12]  734 	dec	sp
      00007F 15 81            [12]  735 	dec	sp
                                    736 ;	src/maxhub.c:72: return FAIL;
      000081 90 FF FF         [24]  737 	mov	dptr,#0xffff
      000084 22               [24]  738 	ret
      000085                        739 00102$:
                                    740 ;	src/maxhub.c:76: i2cByteWrite(familyByte);
      000085 90r00r06         [24]  741 	mov	dptr,#_i2cMax32664WriteBytes_familyByte_65536_34
      000088 E0               [24]  742 	movx	a,@dptr
      000089 F5 82            [12]  743 	mov	dpl,a
      00008B 12r00r00         [24]  744 	lcall	_i2cByteWrite
                                    745 ;	src/maxhub.c:77: if (checkAcknowledgement() == FAIL)
      00008E 12r00r00         [24]  746 	lcall	_checkAcknowledgement
      000091 AE 82            [24]  747 	mov	r6,dpl
      000093 AF 83            [24]  748 	mov	r7,dph
      000095 BE FF 33         [24]  749 	cjne	r6,#0xff,00104$
      000098 BF FF 30         [24]  750 	cjne	r7,#0xff,00104$
                                    751 ;	src/maxhub.c:79: ERROR_LOG("%s Family Byte Write address failed!", __func__);
      00009B 74r2C            [12]  752 	mov	a,#___str_1
      00009D C0 E0            [24]  753 	push	acc
      00009F 74s00            [12]  754 	mov	a,#(___str_1 >> 8)
      0000A1 C0 E0            [24]  755 	push	acc
      0000A3 74 80            [12]  756 	mov	a,#0x80
      0000A5 C0 E0            [24]  757 	push	acc
      0000A7 74r47            [12]  758 	mov	a,#___str_3
      0000A9 C0 E0            [24]  759 	push	acc
      0000AB 74s00            [12]  760 	mov	a,#(___str_3 >> 8)
      0000AD C0 E0            [24]  761 	push	acc
      0000AF 12r00r00         [24]  762 	lcall	_printf_tiny
      0000B2 E5 81            [12]  763 	mov	a,sp
      0000B4 24 FB            [12]  764 	add	a,#0xfb
      0000B6 F5 81            [12]  765 	mov	sp,a
      0000B8 74r42            [12]  766 	mov	a,#___str_2
      0000BA C0 E0            [24]  767 	push	acc
      0000BC 74s00            [12]  768 	mov	a,#(___str_2 >> 8)
      0000BE C0 E0            [24]  769 	push	acc
      0000C0 12r00r00         [24]  770 	lcall	_printf_tiny
      0000C3 15 81            [12]  771 	dec	sp
      0000C5 15 81            [12]  772 	dec	sp
                                    773 ;	src/maxhub.c:80: return FAIL;
      0000C7 90 FF FF         [24]  774 	mov	dptr,#0xffff
      0000CA 22               [24]  775 	ret
      0000CB                        776 00104$:
                                    777 ;	src/maxhub.c:84: i2cByteWrite(indexByte);
      0000CB 90r00r01         [24]  778 	mov	dptr,#_i2cMax32664WriteBytes_PARM_2
      0000CE E0               [24]  779 	movx	a,@dptr
      0000CF F5 82            [12]  780 	mov	dpl,a
      0000D1 12r00r00         [24]  781 	lcall	_i2cByteWrite
                                    782 ;	src/maxhub.c:85: if (checkAcknowledgement() == FAIL)
      0000D4 12r00r00         [24]  783 	lcall	_checkAcknowledgement
      0000D7 AE 82            [24]  784 	mov	r6,dpl
      0000D9 AF 83            [24]  785 	mov	r7,dph
      0000DB BE FF 33         [24]  786 	cjne	r6,#0xff,00122$
      0000DE BF FF 30         [24]  787 	cjne	r7,#0xff,00122$
                                    788 ;	src/maxhub.c:87: ERROR_LOG("%s Index Byte Write address failed!", __func__);
      0000E1 74r2C            [12]  789 	mov	a,#___str_1
      0000E3 C0 E0            [24]  790 	push	acc
      0000E5 74s00            [12]  791 	mov	a,#(___str_1 >> 8)
      0000E7 C0 E0            [24]  792 	push	acc
      0000E9 74 80            [12]  793 	mov	a,#0x80
      0000EB C0 E0            [24]  794 	push	acc
      0000ED 74r7C            [12]  795 	mov	a,#___str_4
      0000EF C0 E0            [24]  796 	push	acc
      0000F1 74s00            [12]  797 	mov	a,#(___str_4 >> 8)
      0000F3 C0 E0            [24]  798 	push	acc
      0000F5 12r00r00         [24]  799 	lcall	_printf_tiny
      0000F8 E5 81            [12]  800 	mov	a,sp
      0000FA 24 FB            [12]  801 	add	a,#0xfb
      0000FC F5 81            [12]  802 	mov	sp,a
      0000FE 74r42            [12]  803 	mov	a,#___str_2
      000100 C0 E0            [24]  804 	push	acc
      000102 74s00            [12]  805 	mov	a,#(___str_2 >> 8)
      000104 C0 E0            [24]  806 	push	acc
      000106 12r00r00         [24]  807 	lcall	_printf_tiny
      000109 15 81            [12]  808 	dec	sp
      00010B 15 81            [12]  809 	dec	sp
                                    810 ;	src/maxhub.c:88: return FAIL;
      00010D 90 FF FF         [24]  811 	mov	dptr,#0xffff
      000110 22               [24]  812 	ret
                                    813 ;	src/maxhub.c:91: for (uint8_t i = 0; i < size; i++)
      000111                        814 00122$:
      000111 90r00r02         [24]  815 	mov	dptr,#_i2cMax32664WriteBytes_PARM_3
      000114 E0               [24]  816 	movx	a,@dptr
      000115 FD               [12]  817 	mov	r5,a
      000116 A3               [24]  818 	inc	dptr
      000117 E0               [24]  819 	movx	a,@dptr
      000118 FE               [12]  820 	mov	r6,a
      000119 A3               [24]  821 	inc	dptr
      00011A E0               [24]  822 	movx	a,@dptr
      00011B FF               [12]  823 	mov	r7,a
      00011C 90r00r05         [24]  824 	mov	dptr,#_i2cMax32664WriteBytes_PARM_4
      00011F E0               [24]  825 	movx	a,@dptr
      000120 FC               [12]  826 	mov	r4,a
      000121 7B 00            [12]  827 	mov	r3,#0x00
      000123                        828 00113$:
      000123 C3               [12]  829 	clr	c
      000124 EB               [12]  830 	mov	a,r3
      000125 9C               [12]  831 	subb	a,r4
      000126 50 72            [24]  832 	jnc	00109$
                                    833 ;	src/maxhub.c:93: uint8_t dataByte = dataArray[i];
      000128 EB               [12]  834 	mov	a,r3
      000129 2D               [12]  835 	add	a,r5
      00012A F8               [12]  836 	mov	r0,a
      00012B E4               [12]  837 	clr	a
      00012C 3E               [12]  838 	addc	a,r6
      00012D F9               [12]  839 	mov	r1,a
      00012E 8F 02            [24]  840 	mov	ar2,r7
      000130 88 82            [24]  841 	mov	dpl,r0
      000132 89 83            [24]  842 	mov	dph,r1
      000134 8A F0            [24]  843 	mov	b,r2
      000136 12r00r00         [24]  844 	lcall	__gptrget
                                    845 ;	src/maxhub.c:94: i2cByteWrite(dataByte);
      000139 F5 82            [12]  846 	mov	dpl,a
      00013B C0 07            [24]  847 	push	ar7
      00013D C0 06            [24]  848 	push	ar6
      00013F C0 05            [24]  849 	push	ar5
      000141 C0 04            [24]  850 	push	ar4
      000143 C0 03            [24]  851 	push	ar3
      000145 12r00r00         [24]  852 	lcall	_i2cByteWrite
                                    853 ;	src/maxhub.c:95: if (checkAcknowledgement() == FAIL)
      000148 12r00r00         [24]  854 	lcall	_checkAcknowledgement
      00014B A9 82            [24]  855 	mov	r1,dpl
      00014D AA 83            [24]  856 	mov	r2,dph
      00014F D0 03            [24]  857 	pop	ar3
      000151 D0 04            [24]  858 	pop	ar4
      000153 D0 05            [24]  859 	pop	ar5
      000155 D0 06            [24]  860 	pop	ar6
      000157 D0 07            [24]  861 	pop	ar7
      000159 B9 FF 3B         [24]  862 	cjne	r1,#0xff,00114$
      00015C BA FF 38         [24]  863 	cjne	r2,#0xff,00114$
                                    864 ;	src/maxhub.c:97: ERROR_LOG("%s Data Byte Write %d failed!", __func__, i);
      00015F 8B 01            [24]  865 	mov	ar1,r3
      000161 7A 00            [12]  866 	mov	r2,#0x00
      000163 C0 01            [24]  867 	push	ar1
      000165 C0 02            [24]  868 	push	ar2
      000167 74r2C            [12]  869 	mov	a,#___str_1
      000169 C0 E0            [24]  870 	push	acc
      00016B 74s00            [12]  871 	mov	a,#(___str_1 >> 8)
      00016D C0 E0            [24]  872 	push	acc
      00016F 74 80            [12]  873 	mov	a,#0x80
      000171 C0 E0            [24]  874 	push	acc
      000173 74rB0            [12]  875 	mov	a,#___str_5
      000175 C0 E0            [24]  876 	push	acc
      000177 74s00            [12]  877 	mov	a,#(___str_5 >> 8)
      000179 C0 E0            [24]  878 	push	acc
      00017B 12r00r00         [24]  879 	lcall	_printf_tiny
      00017E E5 81            [12]  880 	mov	a,sp
      000180 24 F9            [12]  881 	add	a,#0xf9
      000182 F5 81            [12]  882 	mov	sp,a
      000184 74r42            [12]  883 	mov	a,#___str_2
      000186 C0 E0            [24]  884 	push	acc
      000188 74s00            [12]  885 	mov	a,#(___str_2 >> 8)
      00018A C0 E0            [24]  886 	push	acc
      00018C 12r00r00         [24]  887 	lcall	_printf_tiny
      00018F 15 81            [12]  888 	dec	sp
      000191 15 81            [12]  889 	dec	sp
                                    890 ;	src/maxhub.c:98: return FAIL;
      000193 90 FF FF         [24]  891 	mov	dptr,#0xffff
      000196 22               [24]  892 	ret
      000197                        893 00114$:
                                    894 ;	src/maxhub.c:91: for (uint8_t i = 0; i < size; i++)
      000197 0B               [12]  895 	inc	r3
      000198 80 89            [24]  896 	sjmp	00113$
      00019A                        897 00109$:
                                    898 ;	src/maxhub.c:101: stop();
      00019A 12r00r00         [24]  899 	lcall	_stop
                                    900 ;	src/maxhub.c:103: hubDelayMs(CMD_DELAY);
      00019D 75 82 14         [24]  901 	mov	dpl,#0x14
      0001A0 12r00r00         [24]  902 	lcall	_hubDelayMs
                                    903 ;	src/maxhub.c:105: start();
      0001A3 12r00r00         [24]  904 	lcall	_start
                                    905 ;	src/maxhub.c:106: sendControlByteNoAddr(READ, MAX32664_ADDRESS);
      0001A6 90r00r00         [24]  906 	mov	dptr,#_sendControlByteNoAddr_PARM_2
      0001A9 74 55            [12]  907 	mov	a,#0x55
      0001AB F0               [24]  908 	movx	@dptr,a
      0001AC 75 82 01         [24]  909 	mov	dpl,#0x01
      0001AF 12r00r00         [24]  910 	lcall	_sendControlByteNoAddr
                                    911 ;	src/maxhub.c:107: if (checkAcknowledgement() == FAIL)
      0001B2 12r00r00         [24]  912 	lcall	_checkAcknowledgement
      0001B5 AE 82            [24]  913 	mov	r6,dpl
      0001B7 AF 83            [24]  914 	mov	r7,dph
      0001B9 BE FF 33         [24]  915 	cjne	r6,#0xff,00111$
      0001BC BF FF 30         [24]  916 	cjne	r7,#0xff,00111$
                                    917 ;	src/maxhub.c:109: ERROR_LOG("%s Read Byte failed!", __func__);
      0001BF 74r2C            [12]  918 	mov	a,#___str_1
      0001C1 C0 E0            [24]  919 	push	acc
      0001C3 74s00            [12]  920 	mov	a,#(___str_1 >> 8)
      0001C5 C0 E0            [24]  921 	push	acc
      0001C7 74 80            [12]  922 	mov	a,#0x80
      0001C9 C0 E0            [24]  923 	push	acc
      0001CB 74rDE            [12]  924 	mov	a,#___str_6
      0001CD C0 E0            [24]  925 	push	acc
      0001CF 74s00            [12]  926 	mov	a,#(___str_6 >> 8)
      0001D1 C0 E0            [24]  927 	push	acc
      0001D3 12r00r00         [24]  928 	lcall	_printf_tiny
      0001D6 E5 81            [12]  929 	mov	a,sp
      0001D8 24 FB            [12]  930 	add	a,#0xfb
      0001DA F5 81            [12]  931 	mov	sp,a
      0001DC 74r42            [12]  932 	mov	a,#___str_2
      0001DE C0 E0            [24]  933 	push	acc
      0001E0 74s00            [12]  934 	mov	a,#(___str_2 >> 8)
      0001E2 C0 E0            [24]  935 	push	acc
      0001E4 12r00r00         [24]  936 	lcall	_printf_tiny
      0001E7 15 81            [12]  937 	dec	sp
      0001E9 15 81            [12]  938 	dec	sp
                                    939 ;	src/maxhub.c:110: return FAIL;
      0001EB 90 FF FF         [24]  940 	mov	dptr,#0xffff
      0001EE 22               [24]  941 	ret
      0001EF                        942 00111$:
                                    943 ;	src/maxhub.c:113: uint8_t statusByte = i2cByteRead();
      0001EF 12r00r00         [24]  944 	lcall	_i2cByteRead
      0001F2 AF 82            [24]  945 	mov	r7,dpl
                                    946 ;	src/maxhub.c:114: sendNAcknowledge();
      0001F4 C0 07            [24]  947 	push	ar7
      0001F6 12r00r00         [24]  948 	lcall	_sendNAcknowledge
                                    949 ;	src/maxhub.c:115: stop();
      0001F9 12r00r00         [24]  950 	lcall	_stop
      0001FC D0 07            [24]  951 	pop	ar7
                                    952 ;	src/maxhub.c:117: return statusByte;
      0001FE 7E 00            [12]  953 	mov	r6,#0x00
      000200 8F 82            [24]  954 	mov	dpl,r7
      000202 8E 83            [24]  955 	mov	dph,r6
                                    956 ;	src/maxhub.c:118: }
      000204 22               [24]  957 	ret
                                    958 ;------------------------------------------------------------
                                    959 ;Allocation info for local variables in function 'i2cMax32664WriteByte'
                                    960 ;------------------------------------------------------------
                                    961 ;indexByte                 Allocated with name '_i2cMax32664WriteByte_PARM_2'
                                    962 ;dataByte                  Allocated with name '_i2cMax32664WriteByte_PARM_3'
                                    963 ;familyByte                Allocated with name '_i2cMax32664WriteByte_familyByte_65536_44'
                                    964 ;status                    Allocated with name '_i2cMax32664WriteByte_status_65536_45'
                                    965 ;------------------------------------------------------------
                                    966 ;	src/maxhub.c:128: int i2cMax32664WriteByte(uint8_t familyByte, uint8_t indexByte, uint8_t dataByte)
                                    967 ;	-----------------------------------------
                                    968 ;	 function i2cMax32664WriteByte
                                    969 ;	-----------------------------------------
      000205                        970 _i2cMax32664WriteByte:
      000205 E5 82            [12]  971 	mov	a,dpl
      000207 90r00r09         [24]  972 	mov	dptr,#_i2cMax32664WriteByte_familyByte_65536_44
      00020A F0               [24]  973 	movx	@dptr,a
                                    974 ;	src/maxhub.c:132: do
      00020B E0               [24]  975 	movx	a,@dptr
      00020C FF               [12]  976 	mov	r7,a
      00020D 90r00r07         [24]  977 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      000210 E0               [24]  978 	movx	a,@dptr
      000211 FE               [12]  979 	mov	r6,a
      000212                        980 00101$:
                                    981 ;	src/maxhub.c:134: status = i2cMax32664WriteBytes(familyByte, indexByte, &dataByte, 1);
      000212 90r00r01         [24]  982 	mov	dptr,#_i2cMax32664WriteBytes_PARM_2
      000215 EE               [12]  983 	mov	a,r6
      000216 F0               [24]  984 	movx	@dptr,a
      000217 90r00r02         [24]  985 	mov	dptr,#_i2cMax32664WriteBytes_PARM_3
      00021A 74r08            [12]  986 	mov	a,#_i2cMax32664WriteByte_PARM_3
      00021C F0               [24]  987 	movx	@dptr,a
      00021D 74s00            [12]  988 	mov	a,#(_i2cMax32664WriteByte_PARM_3 >> 8)
      00021F A3               [24]  989 	inc	dptr
      000220 F0               [24]  990 	movx	@dptr,a
      000221 E4               [12]  991 	clr	a
      000222 A3               [24]  992 	inc	dptr
      000223 F0               [24]  993 	movx	@dptr,a
      000224 90r00r05         [24]  994 	mov	dptr,#_i2cMax32664WriteBytes_PARM_4
      000227 04               [12]  995 	inc	a
      000228 F0               [24]  996 	movx	@dptr,a
      000229 8F 82            [24]  997 	mov	dpl,r7
      00022B C0 07            [24]  998 	push	ar7
      00022D C0 06            [24]  999 	push	ar6
      00022F 12r00r2C         [24] 1000 	lcall	_i2cMax32664WriteBytes
      000232 AC 82            [24] 1001 	mov	r4,dpl
      000234 AD 83            [24] 1002 	mov	r5,dph
                                   1003 ;	src/maxhub.c:135: INFO_LOG("retrying write");
      000236 C0 05            [24] 1004 	push	ar5
      000238 C0 04            [24] 1005 	push	ar4
      00023A 74r03            [12] 1006 	mov	a,#___str_7
      00023C C0 E0            [24] 1007 	push	acc
      00023E 74s01            [12] 1008 	mov	a,#(___str_7 >> 8)
      000240 C0 E0            [24] 1009 	push	acc
      000242 74 80            [12] 1010 	mov	a,#0x80
      000244 C0 E0            [24] 1011 	push	acc
      000246 12r00r00         [24] 1012 	lcall	_printf
      000249 15 81            [12] 1013 	dec	sp
      00024B 15 81            [12] 1014 	dec	sp
      00024D 15 81            [12] 1015 	dec	sp
      00024F 74r42            [12] 1016 	mov	a,#___str_2
      000251 C0 E0            [24] 1017 	push	acc
      000253 74s00            [12] 1018 	mov	a,#(___str_2 >> 8)
      000255 C0 E0            [24] 1019 	push	acc
      000257 12r00r00         [24] 1020 	lcall	_printf_tiny
      00025A 15 81            [12] 1021 	dec	sp
      00025C 15 81            [12] 1022 	dec	sp
      00025E D0 04            [24] 1023 	pop	ar4
      000260 D0 05            [24] 1024 	pop	ar5
      000262 D0 06            [24] 1025 	pop	ar6
      000264 D0 07            [24] 1026 	pop	ar7
                                   1027 ;	src/maxhub.c:136: } while (ERR_DEVICE_BUSY == status);
      000266 BC FE 05         [24] 1028 	cjne	r4,#0xfe,00114$
      000269 BD 00 02         [24] 1029 	cjne	r5,#0x00,00114$
      00026C 80 A4            [24] 1030 	sjmp	00101$
      00026E                       1031 00114$:
                                   1032 ;	src/maxhub.c:138: return status;
      00026E 8C 82            [24] 1033 	mov	dpl,r4
      000270 8D 83            [24] 1034 	mov	dph,r5
                                   1035 ;	src/maxhub.c:139: }
      000272 22               [24] 1036 	ret
                                   1037 ;------------------------------------------------------------
                                   1038 ;Allocation info for local variables in function 'i2cMax32664ReadByte'
                                   1039 ;------------------------------------------------------------
                                   1040 ;indexByte                 Allocated with name '_i2cMax32664ReadByte_PARM_2'
                                   1041 ;writeByte                 Allocated with name '_i2cMax32664ReadByte_PARM_3'
                                   1042 ;familyByte                Allocated with name '_i2cMax32664ReadByte_familyByte_65536_47'
                                   1043 ;statusByte                Allocated with name '_i2cMax32664ReadByte_statusByte_65537_55'
                                   1044 ;readByte                  Allocated with name '_i2cMax32664ReadByte_readByte_65538_57'
                                   1045 ;------------------------------------------------------------
                                   1046 ;	src/maxhub.c:149: int i2cMax32664ReadByte(uint8_t familyByte, uint8_t indexByte, uint8_t *writeByte)
                                   1047 ;	-----------------------------------------
                                   1048 ;	 function i2cMax32664ReadByte
                                   1049 ;	-----------------------------------------
      000273                       1050 _i2cMax32664ReadByte:
      000273 E5 82            [12] 1051 	mov	a,dpl
      000275 90r00r0E         [24] 1052 	mov	dptr,#_i2cMax32664ReadByte_familyByte_65536_47
      000278 F0               [24] 1053 	movx	@dptr,a
                                   1054 ;	src/maxhub.c:151: start();
      000279 12r00r00         [24] 1055 	lcall	_start
                                   1056 ;	src/maxhub.c:152: sendControlByteNoAddr(WRITE, MAX32664_ADDRESS);
      00027C 90r00r00         [24] 1057 	mov	dptr,#_sendControlByteNoAddr_PARM_2
      00027F 74 55            [12] 1058 	mov	a,#0x55
      000281 F0               [24] 1059 	movx	@dptr,a
      000282 75 82 00         [24] 1060 	mov	dpl,#0x00
      000285 12r00r00         [24] 1061 	lcall	_sendControlByteNoAddr
                                   1062 ;	src/maxhub.c:153: if (checkAcknowledgement() == FAIL)
      000288 12r00r00         [24] 1063 	lcall	_checkAcknowledgement
      00028B AE 82            [24] 1064 	mov	r6,dpl
      00028D AF 83            [24] 1065 	mov	r7,dph
      00028F BE FF 33         [24] 1066 	cjne	r6,#0xff,00102$
      000292 BF FF 30         [24] 1067 	cjne	r7,#0xff,00102$
                                   1068 ;	src/maxhub.c:155: ERROR_LOG("%s Write address failed!", __func__);
      000295 74r48            [12] 1069 	mov	a,#___str_9
      000297 C0 E0            [24] 1070 	push	acc
      000299 74s01            [12] 1071 	mov	a,#(___str_9 >> 8)
      00029B C0 E0            [24] 1072 	push	acc
      00029D 74 80            [12] 1073 	mov	a,#0x80
      00029F C0 E0            [24] 1074 	push	acc
      0002A1 74r1F            [12] 1075 	mov	a,#___str_8
      0002A3 C0 E0            [24] 1076 	push	acc
      0002A5 74s01            [12] 1077 	mov	a,#(___str_8 >> 8)
      0002A7 C0 E0            [24] 1078 	push	acc
      0002A9 12r00r00         [24] 1079 	lcall	_printf_tiny
      0002AC E5 81            [12] 1080 	mov	a,sp
      0002AE 24 FB            [12] 1081 	add	a,#0xfb
      0002B0 F5 81            [12] 1082 	mov	sp,a
      0002B2 74r42            [12] 1083 	mov	a,#___str_2
      0002B4 C0 E0            [24] 1084 	push	acc
      0002B6 74s00            [12] 1085 	mov	a,#(___str_2 >> 8)
      0002B8 C0 E0            [24] 1086 	push	acc
      0002BA 12r00r00         [24] 1087 	lcall	_printf_tiny
      0002BD 15 81            [12] 1088 	dec	sp
      0002BF 15 81            [12] 1089 	dec	sp
                                   1090 ;	src/maxhub.c:156: return FAIL;
      0002C1 90 FF FF         [24] 1091 	mov	dptr,#0xffff
      0002C4 22               [24] 1092 	ret
      0002C5                       1093 00102$:
                                   1094 ;	src/maxhub.c:160: i2cByteWrite(familyByte);
      0002C5 90r00r0E         [24] 1095 	mov	dptr,#_i2cMax32664ReadByte_familyByte_65536_47
      0002C8 E0               [24] 1096 	movx	a,@dptr
      0002C9 F5 82            [12] 1097 	mov	dpl,a
      0002CB 12r00r00         [24] 1098 	lcall	_i2cByteWrite
                                   1099 ;	src/maxhub.c:161: if (checkAcknowledgement() == FAIL)
      0002CE 12r00r00         [24] 1100 	lcall	_checkAcknowledgement
      0002D1 AE 82            [24] 1101 	mov	r6,dpl
      0002D3 AF 83            [24] 1102 	mov	r7,dph
      0002D5 BE FF 33         [24] 1103 	cjne	r6,#0xff,00104$
      0002D8 BF FF 30         [24] 1104 	cjne	r7,#0xff,00104$
                                   1105 ;	src/maxhub.c:163: ERROR_LOG("%s Family Byte Write address failed!", __func__);
      0002DB 74r48            [12] 1106 	mov	a,#___str_9
      0002DD C0 E0            [24] 1107 	push	acc
      0002DF 74s01            [12] 1108 	mov	a,#(___str_9 >> 8)
      0002E1 C0 E0            [24] 1109 	push	acc
      0002E3 74 80            [12] 1110 	mov	a,#0x80
      0002E5 C0 E0            [24] 1111 	push	acc
      0002E7 74r47            [12] 1112 	mov	a,#___str_3
      0002E9 C0 E0            [24] 1113 	push	acc
      0002EB 74s00            [12] 1114 	mov	a,#(___str_3 >> 8)
      0002ED C0 E0            [24] 1115 	push	acc
      0002EF 12r00r00         [24] 1116 	lcall	_printf_tiny
      0002F2 E5 81            [12] 1117 	mov	a,sp
      0002F4 24 FB            [12] 1118 	add	a,#0xfb
      0002F6 F5 81            [12] 1119 	mov	sp,a
      0002F8 74r42            [12] 1120 	mov	a,#___str_2
      0002FA C0 E0            [24] 1121 	push	acc
      0002FC 74s00            [12] 1122 	mov	a,#(___str_2 >> 8)
      0002FE C0 E0            [24] 1123 	push	acc
      000300 12r00r00         [24] 1124 	lcall	_printf_tiny
      000303 15 81            [12] 1125 	dec	sp
      000305 15 81            [12] 1126 	dec	sp
                                   1127 ;	src/maxhub.c:164: return FAIL;
      000307 90 FF FF         [24] 1128 	mov	dptr,#0xffff
      00030A 22               [24] 1129 	ret
      00030B                       1130 00104$:
                                   1131 ;	src/maxhub.c:168: i2cByteWrite(indexByte);
      00030B 90r00r0A         [24] 1132 	mov	dptr,#_i2cMax32664ReadByte_PARM_2
      00030E E0               [24] 1133 	movx	a,@dptr
      00030F F5 82            [12] 1134 	mov	dpl,a
      000311 12r00r00         [24] 1135 	lcall	_i2cByteWrite
                                   1136 ;	src/maxhub.c:169: if (checkAcknowledgement() == FAIL)
      000314 12r00r00         [24] 1137 	lcall	_checkAcknowledgement
      000317 AE 82            [24] 1138 	mov	r6,dpl
      000319 AF 83            [24] 1139 	mov	r7,dph
      00031B BE FF 33         [24] 1140 	cjne	r6,#0xff,00106$
      00031E BF FF 30         [24] 1141 	cjne	r7,#0xff,00106$
                                   1142 ;	src/maxhub.c:171: ERROR_LOG("%s Index Byte Write address failed!", __func__);
      000321 74r48            [12] 1143 	mov	a,#___str_9
      000323 C0 E0            [24] 1144 	push	acc
      000325 74s01            [12] 1145 	mov	a,#(___str_9 >> 8)
      000327 C0 E0            [24] 1146 	push	acc
      000329 74 80            [12] 1147 	mov	a,#0x80
      00032B C0 E0            [24] 1148 	push	acc
      00032D 74r7C            [12] 1149 	mov	a,#___str_4
      00032F C0 E0            [24] 1150 	push	acc
      000331 74s00            [12] 1151 	mov	a,#(___str_4 >> 8)
      000333 C0 E0            [24] 1152 	push	acc
      000335 12r00r00         [24] 1153 	lcall	_printf_tiny
      000338 E5 81            [12] 1154 	mov	a,sp
      00033A 24 FB            [12] 1155 	add	a,#0xfb
      00033C F5 81            [12] 1156 	mov	sp,a
      00033E 74r42            [12] 1157 	mov	a,#___str_2
      000340 C0 E0            [24] 1158 	push	acc
      000342 74s00            [12] 1159 	mov	a,#(___str_2 >> 8)
      000344 C0 E0            [24] 1160 	push	acc
      000346 12r00r00         [24] 1161 	lcall	_printf_tiny
      000349 15 81            [12] 1162 	dec	sp
      00034B 15 81            [12] 1163 	dec	sp
                                   1164 ;	src/maxhub.c:172: return FAIL;
      00034D 90 FF FF         [24] 1165 	mov	dptr,#0xffff
      000350 22               [24] 1166 	ret
      000351                       1167 00106$:
                                   1168 ;	src/maxhub.c:176: if (writeByte != NULL)
      000351 90r00r0B         [24] 1169 	mov	dptr,#_i2cMax32664ReadByte_PARM_3
      000354 E0               [24] 1170 	movx	a,@dptr
      000355 FD               [12] 1171 	mov	r5,a
      000356 A3               [24] 1172 	inc	dptr
      000357 E0               [24] 1173 	movx	a,@dptr
      000358 FE               [12] 1174 	mov	r6,a
      000359 A3               [24] 1175 	inc	dptr
      00035A E0               [24] 1176 	movx	a,@dptr
      00035B FF               [12] 1177 	mov	r7,a
      00035C 90r00r0B         [24] 1178 	mov	dptr,#_i2cMax32664ReadByte_PARM_3
      00035F E0               [24] 1179 	movx	a,@dptr
      000360 F5 F0            [12] 1180 	mov	b,a
      000362 A3               [24] 1181 	inc	dptr
      000363 E0               [24] 1182 	movx	a,@dptr
      000364 45 F0            [12] 1183 	orl	a,b
      000366 60 4B            [24] 1184 	jz	00110$
                                   1185 ;	src/maxhub.c:178: i2cByteWrite(*writeByte);
      000368 8D 82            [24] 1186 	mov	dpl,r5
      00036A 8E 83            [24] 1187 	mov	dph,r6
      00036C 8F F0            [24] 1188 	mov	b,r7
      00036E 12r00r00         [24] 1189 	lcall	__gptrget
      000371 F5 82            [12] 1190 	mov	dpl,a
      000373 12r00r00         [24] 1191 	lcall	_i2cByteWrite
                                   1192 ;	src/maxhub.c:179: if (checkAcknowledgement() == FAIL)
      000376 12r00r00         [24] 1193 	lcall	_checkAcknowledgement
      000379 AE 82            [24] 1194 	mov	r6,dpl
      00037B AF 83            [24] 1195 	mov	r7,dph
      00037D BE FF 33         [24] 1196 	cjne	r6,#0xff,00110$
      000380 BF FF 30         [24] 1197 	cjne	r7,#0xff,00110$
                                   1198 ;	src/maxhub.c:181: ERROR_LOG("%s Write Byte Write address failed!", __func__);
      000383 74r48            [12] 1199 	mov	a,#___str_9
      000385 C0 E0            [24] 1200 	push	acc
      000387 74s01            [12] 1201 	mov	a,#(___str_9 >> 8)
      000389 C0 E0            [24] 1202 	push	acc
      00038B 74 80            [12] 1203 	mov	a,#0x80
      00038D C0 E0            [24] 1204 	push	acc
      00038F 74r5C            [12] 1205 	mov	a,#___str_10
      000391 C0 E0            [24] 1206 	push	acc
      000393 74s01            [12] 1207 	mov	a,#(___str_10 >> 8)
      000395 C0 E0            [24] 1208 	push	acc
      000397 12r00r00         [24] 1209 	lcall	_printf_tiny
      00039A E5 81            [12] 1210 	mov	a,sp
      00039C 24 FB            [12] 1211 	add	a,#0xfb
      00039E F5 81            [12] 1212 	mov	sp,a
      0003A0 74r42            [12] 1213 	mov	a,#___str_2
      0003A2 C0 E0            [24] 1214 	push	acc
      0003A4 74s00            [12] 1215 	mov	a,#(___str_2 >> 8)
      0003A6 C0 E0            [24] 1216 	push	acc
      0003A8 12r00r00         [24] 1217 	lcall	_printf_tiny
      0003AB 15 81            [12] 1218 	dec	sp
      0003AD 15 81            [12] 1219 	dec	sp
                                   1220 ;	src/maxhub.c:182: return FAIL;
      0003AF 90 FF FF         [24] 1221 	mov	dptr,#0xffff
      0003B2 22               [24] 1222 	ret
      0003B3                       1223 00110$:
                                   1224 ;	src/maxhub.c:186: stop();
      0003B3 12r00r00         [24] 1225 	lcall	_stop
                                   1226 ;	src/maxhub.c:188: hubDelayMs(CMD_DELAY);
      0003B6 75 82 14         [24] 1227 	mov	dpl,#0x14
      0003B9 12r00r00         [24] 1228 	lcall	_hubDelayMs
                                   1229 ;	src/maxhub.c:190: start();
      0003BC 12r00r00         [24] 1230 	lcall	_start
                                   1231 ;	src/maxhub.c:191: sendControlByteNoAddr(READ, MAX32664_ADDRESS);
      0003BF 90r00r00         [24] 1232 	mov	dptr,#_sendControlByteNoAddr_PARM_2
      0003C2 74 55            [12] 1233 	mov	a,#0x55
      0003C4 F0               [24] 1234 	movx	@dptr,a
      0003C5 75 82 01         [24] 1235 	mov	dpl,#0x01
      0003C8 12r00r00         [24] 1236 	lcall	_sendControlByteNoAddr
                                   1237 ;	src/maxhub.c:192: if (checkAcknowledgement() == FAIL)
      0003CB 12r00r00         [24] 1238 	lcall	_checkAcknowledgement
      0003CE AE 82            [24] 1239 	mov	r6,dpl
      0003D0 AF 83            [24] 1240 	mov	r7,dph
      0003D2 BE FF 33         [24] 1241 	cjne	r6,#0xff,00112$
      0003D5 BF FF 30         [24] 1242 	cjne	r7,#0xff,00112$
                                   1243 ;	src/maxhub.c:194: ERROR_LOG("%s Read Byte failed!", __func__);
      0003D8 74r48            [12] 1244 	mov	a,#___str_9
      0003DA C0 E0            [24] 1245 	push	acc
      0003DC 74s01            [12] 1246 	mov	a,#(___str_9 >> 8)
      0003DE C0 E0            [24] 1247 	push	acc
      0003E0 74 80            [12] 1248 	mov	a,#0x80
      0003E2 C0 E0            [24] 1249 	push	acc
      0003E4 74rDE            [12] 1250 	mov	a,#___str_6
      0003E6 C0 E0            [24] 1251 	push	acc
      0003E8 74s00            [12] 1252 	mov	a,#(___str_6 >> 8)
      0003EA C0 E0            [24] 1253 	push	acc
      0003EC 12r00r00         [24] 1254 	lcall	_printf_tiny
      0003EF E5 81            [12] 1255 	mov	a,sp
      0003F1 24 FB            [12] 1256 	add	a,#0xfb
      0003F3 F5 81            [12] 1257 	mov	sp,a
      0003F5 74r42            [12] 1258 	mov	a,#___str_2
      0003F7 C0 E0            [24] 1259 	push	acc
      0003F9 74s00            [12] 1260 	mov	a,#(___str_2 >> 8)
      0003FB C0 E0            [24] 1261 	push	acc
      0003FD 12r00r00         [24] 1262 	lcall	_printf_tiny
      000400 15 81            [12] 1263 	dec	sp
      000402 15 81            [12] 1264 	dec	sp
                                   1265 ;	src/maxhub.c:195: return FAIL;
      000404 90 FF FF         [24] 1266 	mov	dptr,#0xffff
      000407 22               [24] 1267 	ret
      000408                       1268 00112$:
                                   1269 ;	src/maxhub.c:198: uint8_t statusByte = i2cByteRead();
      000408 12r00r00         [24] 1270 	lcall	_i2cByteRead
      00040B AF 82            [24] 1271 	mov	r7,dpl
                                   1272 ;	src/maxhub.c:199: sendAcknowledge();
      00040D C0 07            [24] 1273 	push	ar7
      00040F 12r00r00         [24] 1274 	lcall	_sendAcknowledge
      000412 D0 07            [24] 1275 	pop	ar7
                                   1276 ;	src/maxhub.c:201: if (statusByte != SFE_BIO_SUCCESS)
      000414 EF               [12] 1277 	mov	a,r7
      000415 60 07            [24] 1278 	jz	00114$
                                   1279 ;	src/maxhub.c:203: return statusByte;
      000417 7E 00            [12] 1280 	mov	r6,#0x00
      000419 8F 82            [24] 1281 	mov	dpl,r7
      00041B 8E 83            [24] 1282 	mov	dph,r6
      00041D 22               [24] 1283 	ret
      00041E                       1284 00114$:
                                   1285 ;	src/maxhub.c:206: uint8_t readByte = i2cByteRead();
      00041E 12r00r00         [24] 1286 	lcall	_i2cByteRead
      000421 AF 82            [24] 1287 	mov	r7,dpl
                                   1288 ;	src/maxhub.c:208: sendNAcknowledge();
      000423 C0 07            [24] 1289 	push	ar7
      000425 12r00r00         [24] 1290 	lcall	_sendNAcknowledge
                                   1291 ;	src/maxhub.c:210: stop();
      000428 12r00r00         [24] 1292 	lcall	_stop
      00042B D0 07            [24] 1293 	pop	ar7
                                   1294 ;	src/maxhub.c:212: return readByte;
      00042D 7E 00            [12] 1295 	mov	r6,#0x00
      00042F 8F 82            [24] 1296 	mov	dpl,r7
      000431 8E 83            [24] 1297 	mov	dph,r6
                                   1298 ;	src/maxhub.c:213: }
      000433 22               [24] 1299 	ret
                                   1300 ;------------------------------------------------------------
                                   1301 ;Allocation info for local variables in function 'i2cMax32664SequentialReadByte'
                                   1302 ;------------------------------------------------------------
                                   1303 ;indexByte                 Allocated with name '_i2cMax32664SequentialReadByte_PARM_2'
                                   1304 ;readArr                   Allocated with name '_i2cMax32664SequentialReadByte_PARM_3'
                                   1305 ;size                      Allocated with name '_i2cMax32664SequentialReadByte_PARM_4'
                                   1306 ;familyByte                Allocated with name '_i2cMax32664SequentialReadByte_familyByte_65536_58'
                                   1307 ;i                         Allocated with name '_i2cMax32664SequentialReadByte_i_131072_60'
                                   1308 ;statusByte                Allocated with name '_i2cMax32664SequentialReadByte_statusByte_65537_66'
                                   1309 ;i                         Allocated with name '_i2cMax32664SequentialReadByte_i_131073_68'
                                   1310 ;------------------------------------------------------------
                                   1311 ;	src/maxhub.c:224: int i2cMax32664SequentialReadByte(uint8_t familyByte, uint8_t indexByte, uint8_t readArr[], uint8_t size)
                                   1312 ;	-----------------------------------------
                                   1313 ;	 function i2cMax32664SequentialReadByte
                                   1314 ;	-----------------------------------------
      000434                       1315 _i2cMax32664SequentialReadByte:
      000434 E5 82            [12] 1316 	mov	a,dpl
      000436 90r00r14         [24] 1317 	mov	dptr,#_i2cMax32664SequentialReadByte_familyByte_65536_58
      000439 F0               [24] 1318 	movx	@dptr,a
                                   1319 ;	src/maxhub.c:226: for (uint8_t i = 0; i < size; i++)
      00043A 90r00r10         [24] 1320 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_3
      00043D E0               [24] 1321 	movx	a,@dptr
      00043E FD               [12] 1322 	mov	r5,a
      00043F A3               [24] 1323 	inc	dptr
      000440 E0               [24] 1324 	movx	a,@dptr
      000441 FE               [12] 1325 	mov	r6,a
      000442 A3               [24] 1326 	inc	dptr
      000443 E0               [24] 1327 	movx	a,@dptr
      000444 FF               [12] 1328 	mov	r7,a
      000445 90r00r13         [24] 1329 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_4
      000448 E0               [24] 1330 	movx	a,@dptr
      000449 FC               [12] 1331 	mov	r4,a
      00044A 7B 00            [12] 1332 	mov	r3,#0x00
      00044C                       1333 00114$:
      00044C C3               [12] 1334 	clr	c
      00044D EB               [12] 1335 	mov	a,r3
      00044E 9C               [12] 1336 	subb	a,r4
      00044F 50 15            [24] 1337 	jnc	00101$
                                   1338 ;	src/maxhub.c:228: readArr[i] = 0;
      000451 EB               [12] 1339 	mov	a,r3
      000452 2D               [12] 1340 	add	a,r5
      000453 F8               [12] 1341 	mov	r0,a
      000454 E4               [12] 1342 	clr	a
      000455 3E               [12] 1343 	addc	a,r6
      000456 F9               [12] 1344 	mov	r1,a
      000457 8F 02            [24] 1345 	mov	ar2,r7
      000459 88 82            [24] 1346 	mov	dpl,r0
      00045B 89 83            [24] 1347 	mov	dph,r1
      00045D 8A F0            [24] 1348 	mov	b,r2
      00045F E4               [12] 1349 	clr	a
      000460 12r00r00         [24] 1350 	lcall	__gptrput
                                   1351 ;	src/maxhub.c:226: for (uint8_t i = 0; i < size; i++)
      000463 0B               [12] 1352 	inc	r3
      000464 80 E6            [24] 1353 	sjmp	00114$
      000466                       1354 00101$:
                                   1355 ;	src/maxhub.c:231: start();
      000466 C0 07            [24] 1356 	push	ar7
      000468 C0 06            [24] 1357 	push	ar6
      00046A C0 05            [24] 1358 	push	ar5
      00046C C0 04            [24] 1359 	push	ar4
      00046E 12r00r00         [24] 1360 	lcall	_start
                                   1361 ;	src/maxhub.c:232: sendControlByteNoAddr(WRITE, MAX32664_ADDRESS);
      000471 90r00r00         [24] 1362 	mov	dptr,#_sendControlByteNoAddr_PARM_2
      000474 74 55            [12] 1363 	mov	a,#0x55
      000476 F0               [24] 1364 	movx	@dptr,a
      000477 75 82 00         [24] 1365 	mov	dpl,#0x00
      00047A 12r00r00         [24] 1366 	lcall	_sendControlByteNoAddr
                                   1367 ;	src/maxhub.c:233: if (checkAcknowledgement() == FAIL)
      00047D 12r00r00         [24] 1368 	lcall	_checkAcknowledgement
      000480 AA 82            [24] 1369 	mov	r2,dpl
      000482 AB 83            [24] 1370 	mov	r3,dph
      000484 D0 04            [24] 1371 	pop	ar4
      000486 D0 05            [24] 1372 	pop	ar5
      000488 D0 06            [24] 1373 	pop	ar6
      00048A D0 07            [24] 1374 	pop	ar7
      00048C BA FF 33         [24] 1375 	cjne	r2,#0xff,00103$
      00048F BB FF 30         [24] 1376 	cjne	r3,#0xff,00103$
                                   1377 ;	src/maxhub.c:235: ERROR_LOG("%s Write address failed!", __func__);
      000492 74r90            [12] 1378 	mov	a,#___str_11
      000494 C0 E0            [24] 1379 	push	acc
      000496 74s01            [12] 1380 	mov	a,#(___str_11 >> 8)
      000498 C0 E0            [24] 1381 	push	acc
      00049A 74 80            [12] 1382 	mov	a,#0x80
      00049C C0 E0            [24] 1383 	push	acc
      00049E 74r1F            [12] 1384 	mov	a,#___str_8
      0004A0 C0 E0            [24] 1385 	push	acc
      0004A2 74s01            [12] 1386 	mov	a,#(___str_8 >> 8)
      0004A4 C0 E0            [24] 1387 	push	acc
      0004A6 12r00r00         [24] 1388 	lcall	_printf_tiny
      0004A9 E5 81            [12] 1389 	mov	a,sp
      0004AB 24 FB            [12] 1390 	add	a,#0xfb
      0004AD F5 81            [12] 1391 	mov	sp,a
      0004AF 74r42            [12] 1392 	mov	a,#___str_2
      0004B1 C0 E0            [24] 1393 	push	acc
      0004B3 74s00            [12] 1394 	mov	a,#(___str_2 >> 8)
      0004B5 C0 E0            [24] 1395 	push	acc
      0004B7 12r00r00         [24] 1396 	lcall	_printf_tiny
      0004BA 15 81            [12] 1397 	dec	sp
      0004BC 15 81            [12] 1398 	dec	sp
                                   1399 ;	src/maxhub.c:236: return FAIL;
      0004BE 90 FF FF         [24] 1400 	mov	dptr,#0xffff
      0004C1 22               [24] 1401 	ret
      0004C2                       1402 00103$:
                                   1403 ;	src/maxhub.c:240: i2cByteWrite(familyByte);
      0004C2 90r00r14         [24] 1404 	mov	dptr,#_i2cMax32664SequentialReadByte_familyByte_65536_58
      0004C5 E0               [24] 1405 	movx	a,@dptr
      0004C6 F5 82            [12] 1406 	mov	dpl,a
      0004C8 C0 07            [24] 1407 	push	ar7
      0004CA C0 06            [24] 1408 	push	ar6
      0004CC C0 05            [24] 1409 	push	ar5
      0004CE C0 04            [24] 1410 	push	ar4
      0004D0 12r00r00         [24] 1411 	lcall	_i2cByteWrite
                                   1412 ;	src/maxhub.c:241: if (checkAcknowledgement() == FAIL)
      0004D3 12r00r00         [24] 1413 	lcall	_checkAcknowledgement
      0004D6 AA 82            [24] 1414 	mov	r2,dpl
      0004D8 AB 83            [24] 1415 	mov	r3,dph
      0004DA D0 04            [24] 1416 	pop	ar4
      0004DC D0 05            [24] 1417 	pop	ar5
      0004DE D0 06            [24] 1418 	pop	ar6
      0004E0 D0 07            [24] 1419 	pop	ar7
      0004E2 BA FF 33         [24] 1420 	cjne	r2,#0xff,00105$
      0004E5 BB FF 30         [24] 1421 	cjne	r3,#0xff,00105$
                                   1422 ;	src/maxhub.c:243: ERROR_LOG("%s Family Byte Write address failed!", __func__);
      0004E8 74r90            [12] 1423 	mov	a,#___str_11
      0004EA C0 E0            [24] 1424 	push	acc
      0004EC 74s01            [12] 1425 	mov	a,#(___str_11 >> 8)
      0004EE C0 E0            [24] 1426 	push	acc
      0004F0 74 80            [12] 1427 	mov	a,#0x80
      0004F2 C0 E0            [24] 1428 	push	acc
      0004F4 74r47            [12] 1429 	mov	a,#___str_3
      0004F6 C0 E0            [24] 1430 	push	acc
      0004F8 74s00            [12] 1431 	mov	a,#(___str_3 >> 8)
      0004FA C0 E0            [24] 1432 	push	acc
      0004FC 12r00r00         [24] 1433 	lcall	_printf_tiny
      0004FF E5 81            [12] 1434 	mov	a,sp
      000501 24 FB            [12] 1435 	add	a,#0xfb
      000503 F5 81            [12] 1436 	mov	sp,a
      000505 74r42            [12] 1437 	mov	a,#___str_2
      000507 C0 E0            [24] 1438 	push	acc
      000509 74s00            [12] 1439 	mov	a,#(___str_2 >> 8)
      00050B C0 E0            [24] 1440 	push	acc
      00050D 12r00r00         [24] 1441 	lcall	_printf_tiny
      000510 15 81            [12] 1442 	dec	sp
      000512 15 81            [12] 1443 	dec	sp
                                   1444 ;	src/maxhub.c:244: return FAIL;
      000514 90 FF FF         [24] 1445 	mov	dptr,#0xffff
      000517 22               [24] 1446 	ret
      000518                       1447 00105$:
                                   1448 ;	src/maxhub.c:248: i2cByteWrite(indexByte);
      000518 90r00r0F         [24] 1449 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_2
      00051B E0               [24] 1450 	movx	a,@dptr
      00051C F5 82            [12] 1451 	mov	dpl,a
      00051E C0 07            [24] 1452 	push	ar7
      000520 C0 06            [24] 1453 	push	ar6
      000522 C0 05            [24] 1454 	push	ar5
      000524 C0 04            [24] 1455 	push	ar4
      000526 12r00r00         [24] 1456 	lcall	_i2cByteWrite
                                   1457 ;	src/maxhub.c:249: if (checkAcknowledgement() == FAIL)
      000529 12r00r00         [24] 1458 	lcall	_checkAcknowledgement
      00052C AA 82            [24] 1459 	mov	r2,dpl
      00052E AB 83            [24] 1460 	mov	r3,dph
      000530 D0 04            [24] 1461 	pop	ar4
      000532 D0 05            [24] 1462 	pop	ar5
      000534 D0 06            [24] 1463 	pop	ar6
      000536 D0 07            [24] 1464 	pop	ar7
      000538 BA FF 33         [24] 1465 	cjne	r2,#0xff,00107$
      00053B BB FF 30         [24] 1466 	cjne	r3,#0xff,00107$
                                   1467 ;	src/maxhub.c:251: ERROR_LOG("%s Index Byte Write address failed!", __func__);
      00053E 74r90            [12] 1468 	mov	a,#___str_11
      000540 C0 E0            [24] 1469 	push	acc
      000542 74s01            [12] 1470 	mov	a,#(___str_11 >> 8)
      000544 C0 E0            [24] 1471 	push	acc
      000546 74 80            [12] 1472 	mov	a,#0x80
      000548 C0 E0            [24] 1473 	push	acc
      00054A 74r7C            [12] 1474 	mov	a,#___str_4
      00054C C0 E0            [24] 1475 	push	acc
      00054E 74s00            [12] 1476 	mov	a,#(___str_4 >> 8)
      000550 C0 E0            [24] 1477 	push	acc
      000552 12r00r00         [24] 1478 	lcall	_printf_tiny
      000555 E5 81            [12] 1479 	mov	a,sp
      000557 24 FB            [12] 1480 	add	a,#0xfb
      000559 F5 81            [12] 1481 	mov	sp,a
      00055B 74r42            [12] 1482 	mov	a,#___str_2
      00055D C0 E0            [24] 1483 	push	acc
      00055F 74s00            [12] 1484 	mov	a,#(___str_2 >> 8)
      000561 C0 E0            [24] 1485 	push	acc
      000563 12r00r00         [24] 1486 	lcall	_printf_tiny
      000566 15 81            [12] 1487 	dec	sp
      000568 15 81            [12] 1488 	dec	sp
                                   1489 ;	src/maxhub.c:252: return FAIL;
      00056A 90 FF FF         [24] 1490 	mov	dptr,#0xffff
      00056D 22               [24] 1491 	ret
      00056E                       1492 00107$:
                                   1493 ;	src/maxhub.c:255: stop();
      00056E C0 07            [24] 1494 	push	ar7
      000570 C0 06            [24] 1495 	push	ar6
      000572 C0 05            [24] 1496 	push	ar5
      000574 C0 04            [24] 1497 	push	ar4
      000576 12r00r00         [24] 1498 	lcall	_stop
                                   1499 ;	src/maxhub.c:257: hubDelayMs(CMD_DELAY);
      000579 75 82 14         [24] 1500 	mov	dpl,#0x14
      00057C 12r00r00         [24] 1501 	lcall	_hubDelayMs
                                   1502 ;	src/maxhub.c:259: start();
      00057F 12r00r00         [24] 1503 	lcall	_start
                                   1504 ;	src/maxhub.c:260: sendControlByteNoAddr(READ, MAX32664_ADDRESS);
      000582 90r00r00         [24] 1505 	mov	dptr,#_sendControlByteNoAddr_PARM_2
      000585 74 55            [12] 1506 	mov	a,#0x55
      000587 F0               [24] 1507 	movx	@dptr,a
      000588 75 82 01         [24] 1508 	mov	dpl,#0x01
      00058B 12r00r00         [24] 1509 	lcall	_sendControlByteNoAddr
                                   1510 ;	src/maxhub.c:261: if (checkAcknowledgement() == FAIL)
      00058E 12r00r00         [24] 1511 	lcall	_checkAcknowledgement
      000591 AA 82            [24] 1512 	mov	r2,dpl
      000593 AB 83            [24] 1513 	mov	r3,dph
      000595 D0 04            [24] 1514 	pop	ar4
      000597 D0 05            [24] 1515 	pop	ar5
      000599 D0 06            [24] 1516 	pop	ar6
      00059B D0 07            [24] 1517 	pop	ar7
      00059D BA FF 33         [24] 1518 	cjne	r2,#0xff,00109$
      0005A0 BB FF 30         [24] 1519 	cjne	r3,#0xff,00109$
                                   1520 ;	src/maxhub.c:263: ERROR_LOG("%s Read Byte failed!", __func__);
      0005A3 74r90            [12] 1521 	mov	a,#___str_11
      0005A5 C0 E0            [24] 1522 	push	acc
      0005A7 74s01            [12] 1523 	mov	a,#(___str_11 >> 8)
      0005A9 C0 E0            [24] 1524 	push	acc
      0005AB 74 80            [12] 1525 	mov	a,#0x80
      0005AD C0 E0            [24] 1526 	push	acc
      0005AF 74rDE            [12] 1527 	mov	a,#___str_6
      0005B1 C0 E0            [24] 1528 	push	acc
      0005B3 74s00            [12] 1529 	mov	a,#(___str_6 >> 8)
      0005B5 C0 E0            [24] 1530 	push	acc
      0005B7 12r00r00         [24] 1531 	lcall	_printf_tiny
      0005BA E5 81            [12] 1532 	mov	a,sp
      0005BC 24 FB            [12] 1533 	add	a,#0xfb
      0005BE F5 81            [12] 1534 	mov	sp,a
      0005C0 74r42            [12] 1535 	mov	a,#___str_2
      0005C2 C0 E0            [24] 1536 	push	acc
      0005C4 74s00            [12] 1537 	mov	a,#(___str_2 >> 8)
      0005C6 C0 E0            [24] 1538 	push	acc
      0005C8 12r00r00         [24] 1539 	lcall	_printf_tiny
      0005CB 15 81            [12] 1540 	dec	sp
      0005CD 15 81            [12] 1541 	dec	sp
                                   1542 ;	src/maxhub.c:264: return FAIL;
      0005CF 90 FF FF         [24] 1543 	mov	dptr,#0xffff
      0005D2 22               [24] 1544 	ret
      0005D3                       1545 00109$:
                                   1546 ;	src/maxhub.c:267: uint8_t statusByte = i2cByteRead();
      0005D3 C0 07            [24] 1547 	push	ar7
      0005D5 C0 06            [24] 1548 	push	ar6
      0005D7 C0 05            [24] 1549 	push	ar5
      0005D9 C0 04            [24] 1550 	push	ar4
      0005DB 12r00r00         [24] 1551 	lcall	_i2cByteRead
      0005DE AB 82            [24] 1552 	mov	r3,dpl
                                   1553 ;	src/maxhub.c:268: sendAcknowledge();
      0005E0 C0 03            [24] 1554 	push	ar3
      0005E2 12r00r00         [24] 1555 	lcall	_sendAcknowledge
      0005E5 D0 03            [24] 1556 	pop	ar3
      0005E7 D0 04            [24] 1557 	pop	ar4
      0005E9 D0 05            [24] 1558 	pop	ar5
      0005EB D0 06            [24] 1559 	pop	ar6
      0005ED D0 07            [24] 1560 	pop	ar7
                                   1561 ;	src/maxhub.c:270: if (statusByte != SFE_BIO_SUCCESS)
      0005EF EB               [12] 1562 	mov	a,r3
      0005F0 60 3F            [24] 1563 	jz	00129$
                                   1564 ;	src/maxhub.c:272: ERROR_LOG("%s Status Byte = %d", __func__, statusByte);
      0005F2 7A 00            [12] 1565 	mov	r2,#0x00
      0005F4 C0 03            [24] 1566 	push	ar3
      0005F6 C0 02            [24] 1567 	push	ar2
      0005F8 C0 03            [24] 1568 	push	ar3
      0005FA C0 02            [24] 1569 	push	ar2
      0005FC 74r90            [12] 1570 	mov	a,#___str_11
      0005FE C0 E0            [24] 1571 	push	acc
      000600 74s01            [12] 1572 	mov	a,#(___str_11 >> 8)
      000602 C0 E0            [24] 1573 	push	acc
      000604 74 80            [12] 1574 	mov	a,#0x80
      000606 C0 E0            [24] 1575 	push	acc
      000608 74rAE            [12] 1576 	mov	a,#___str_12
      00060A C0 E0            [24] 1577 	push	acc
      00060C 74s01            [12] 1578 	mov	a,#(___str_12 >> 8)
      00060E C0 E0            [24] 1579 	push	acc
      000610 12r00r00         [24] 1580 	lcall	_printf_tiny
      000613 E5 81            [12] 1581 	mov	a,sp
      000615 24 F9            [12] 1582 	add	a,#0xf9
      000617 F5 81            [12] 1583 	mov	sp,a
      000619 74r42            [12] 1584 	mov	a,#___str_2
      00061B C0 E0            [24] 1585 	push	acc
      00061D 74s00            [12] 1586 	mov	a,#(___str_2 >> 8)
      00061F C0 E0            [24] 1587 	push	acc
      000621 12r00r00         [24] 1588 	lcall	_printf_tiny
      000624 15 81            [12] 1589 	dec	sp
      000626 15 81            [12] 1590 	dec	sp
      000628 D0 02            [24] 1591 	pop	ar2
      00062A D0 03            [24] 1592 	pop	ar3
                                   1593 ;	src/maxhub.c:273: return statusByte;
      00062C 8B 82            [24] 1594 	mov	dpl,r3
      00062E 8A 83            [24] 1595 	mov	dph,r2
      000630 22               [24] 1596 	ret
                                   1597 ;	src/maxhub.c:276: for (uint8_t i = 0; i < size; i++)
      000631                       1598 00129$:
      000631 7B 00            [12] 1599 	mov	r3,#0x00
      000633                       1600 00117$:
      000633 C3               [12] 1601 	clr	c
      000634 EB               [12] 1602 	mov	a,r3
      000635 9C               [12] 1603 	subb	a,r4
      000636 50 4B            [24] 1604 	jnc	00112$
                                   1605 ;	src/maxhub.c:278: readArr[i] = i2cByteRead();
      000638 C0 04            [24] 1606 	push	ar4
      00063A EB               [12] 1607 	mov	a,r3
      00063B 2D               [12] 1608 	add	a,r5
      00063C F8               [12] 1609 	mov	r0,a
      00063D E4               [12] 1610 	clr	a
      00063E 3E               [12] 1611 	addc	a,r6
      00063F F9               [12] 1612 	mov	r1,a
      000640 8F 02            [24] 1613 	mov	ar2,r7
      000642 C0 07            [24] 1614 	push	ar7
      000644 C0 06            [24] 1615 	push	ar6
      000646 C0 05            [24] 1616 	push	ar5
      000648 C0 03            [24] 1617 	push	ar3
      00064A C0 02            [24] 1618 	push	ar2
      00064C C0 01            [24] 1619 	push	ar1
      00064E C0 00            [24] 1620 	push	ar0
      000650 12r00r00         [24] 1621 	lcall	_i2cByteRead
      000653 AC 82            [24] 1622 	mov	r4,dpl
      000655 D0 00            [24] 1623 	pop	ar0
      000657 D0 01            [24] 1624 	pop	ar1
      000659 D0 02            [24] 1625 	pop	ar2
      00065B D0 03            [24] 1626 	pop	ar3
      00065D 88 82            [24] 1627 	mov	dpl,r0
      00065F 89 83            [24] 1628 	mov	dph,r1
      000661 8A F0            [24] 1629 	mov	b,r2
      000663 EC               [12] 1630 	mov	a,r4
      000664 12r00r00         [24] 1631 	lcall	__gptrput
                                   1632 ;	src/maxhub.c:279: sendAcknowledge();
      000667 C0 04            [24] 1633 	push	ar4
      000669 C0 03            [24] 1634 	push	ar3
      00066B 12r00r00         [24] 1635 	lcall	_sendAcknowledge
                                   1636 ;	src/maxhub.c:280: hubDelayMs(CMD_DELAY);
      00066E 75 82 14         [24] 1637 	mov	dpl,#0x14
      000671 12r00r00         [24] 1638 	lcall	_hubDelayMs
      000674 D0 03            [24] 1639 	pop	ar3
      000676 D0 04            [24] 1640 	pop	ar4
      000678 D0 05            [24] 1641 	pop	ar5
      00067A D0 06            [24] 1642 	pop	ar6
      00067C D0 07            [24] 1643 	pop	ar7
                                   1644 ;	src/maxhub.c:276: for (uint8_t i = 0; i < size; i++)
      00067E 0B               [12] 1645 	inc	r3
      00067F D0 04            [24] 1646 	pop	ar4
      000681 80 B0            [24] 1647 	sjmp	00117$
      000683                       1648 00112$:
                                   1649 ;	src/maxhub.c:294: stop();
      000683 12r00r00         [24] 1650 	lcall	_stop
                                   1651 ;	src/maxhub.c:295: return SUCCESS;
      000686 90 00 00         [24] 1652 	mov	dptr,#0x0000
                                   1653 ;	src/maxhub.c:296: }
      000689 22               [24] 1654 	ret
                                   1655 ;------------------------------------------------------------
                                   1656 ;Allocation info for local variables in function 'writeRegisterMAX30101'
                                   1657 ;------------------------------------------------------------
                                   1658 ;regVal                    Allocated with name '_writeRegisterMAX30101_PARM_2'
                                   1659 ;regAddr                   Allocated with name '_writeRegisterMAX30101_regAddr_65536_70'
                                   1660 ;dataArr                   Allocated with name '_writeRegisterMAX30101_dataArr_65536_71'
                                   1661 ;------------------------------------------------------------
                                   1662 ;	src/maxhub.c:308: int writeRegisterMAX30101(uint8_t regAddr, uint8_t regVal)
                                   1663 ;	-----------------------------------------
                                   1664 ;	 function writeRegisterMAX30101
                                   1665 ;	-----------------------------------------
      00068A                       1666 _writeRegisterMAX30101:
      00068A E5 82            [12] 1667 	mov	a,dpl
      00068C 90r00r16         [24] 1668 	mov	dptr,#_writeRegisterMAX30101_regAddr_65536_70
      00068F F0               [24] 1669 	movx	@dptr,a
                                   1670 ;	src/maxhub.c:312: dataArr[0] = regAddr;
      000690 E0               [24] 1671 	movx	a,@dptr
      000691 90r00r17         [24] 1672 	mov	dptr,#_writeRegisterMAX30101_dataArr_65536_71
      000694 F0               [24] 1673 	movx	@dptr,a
                                   1674 ;	src/maxhub.c:313: dataArr[1] = regVal;
      000695 90r00r15         [24] 1675 	mov	dptr,#_writeRegisterMAX30101_PARM_2
      000698 E0               [24] 1676 	movx	a,@dptr
      000699 90r00r18         [24] 1677 	mov	dptr,#(_writeRegisterMAX30101_dataArr_65536_71 + 0x0001)
      00069C F0               [24] 1678 	movx	@dptr,a
                                   1679 ;	src/maxhub.c:315: return i2cMax32664WriteBytes(WRITE_REGISTER, WRITE_MAX30101, dataArr, 2);
      00069D 90r00r01         [24] 1680 	mov	dptr,#_i2cMax32664WriteBytes_PARM_2
      0006A0 74 03            [12] 1681 	mov	a,#0x03
      0006A2 F0               [24] 1682 	movx	@dptr,a
      0006A3 90r00r02         [24] 1683 	mov	dptr,#_i2cMax32664WriteBytes_PARM_3
      0006A6 74r17            [12] 1684 	mov	a,#_writeRegisterMAX30101_dataArr_65536_71
      0006A8 F0               [24] 1685 	movx	@dptr,a
      0006A9 74s00            [12] 1686 	mov	a,#(_writeRegisterMAX30101_dataArr_65536_71 >> 8)
      0006AB A3               [24] 1687 	inc	dptr
      0006AC F0               [24] 1688 	movx	@dptr,a
      0006AD E4               [12] 1689 	clr	a
      0006AE A3               [24] 1690 	inc	dptr
      0006AF F0               [24] 1691 	movx	@dptr,a
      0006B0 90r00r05         [24] 1692 	mov	dptr,#_i2cMax32664WriteBytes_PARM_4
      0006B3 74 02            [12] 1693 	mov	a,#0x02
      0006B5 F0               [24] 1694 	movx	@dptr,a
      0006B6 75 82 40         [24] 1695 	mov	dpl,#0x40
                                   1696 ;	src/maxhub.c:316: }
      0006B9 02r00r2C         [24] 1697 	ljmp	_i2cMax32664WriteBytes
                                   1698 ;------------------------------------------------------------
                                   1699 ;Allocation info for local variables in function 'readRegisterMAX30101'
                                   1700 ;------------------------------------------------------------
                                   1701 ;regAddr                   Allocated with name '_readRegisterMAX30101_regAddr_65536_72'
                                   1702 ;data                      Allocated with name '_readRegisterMAX30101_data_65536_73'
                                   1703 ;------------------------------------------------------------
                                   1704 ;	src/maxhub.c:326: uint8_t readRegisterMAX30101(uint8_t regAddr)
                                   1705 ;	-----------------------------------------
                                   1706 ;	 function readRegisterMAX30101
                                   1707 ;	-----------------------------------------
      0006BC                       1708 _readRegisterMAX30101:
      0006BC E5 82            [12] 1709 	mov	a,dpl
      0006BE 90r00r19         [24] 1710 	mov	dptr,#_readRegisterMAX30101_regAddr_65536_72
      0006C1 F0               [24] 1711 	movx	@dptr,a
                                   1712 ;	src/maxhub.c:329: uint8_t data = i2cMax32664ReadByte(READ_REGISTER, READ_MAX30101, &regAddr);
      0006C2 90r00r0A         [24] 1713 	mov	dptr,#_i2cMax32664ReadByte_PARM_2
      0006C5 74 03            [12] 1714 	mov	a,#0x03
      0006C7 F0               [24] 1715 	movx	@dptr,a
      0006C8 90r00r0B         [24] 1716 	mov	dptr,#_i2cMax32664ReadByte_PARM_3
      0006CB 74r19            [12] 1717 	mov	a,#_readRegisterMAX30101_regAddr_65536_72
      0006CD F0               [24] 1718 	movx	@dptr,a
      0006CE 74s00            [12] 1719 	mov	a,#(_readRegisterMAX30101_regAddr_65536_72 >> 8)
      0006D0 A3               [24] 1720 	inc	dptr
      0006D1 F0               [24] 1721 	movx	@dptr,a
      0006D2 E4               [12] 1722 	clr	a
      0006D3 A3               [24] 1723 	inc	dptr
      0006D4 F0               [24] 1724 	movx	@dptr,a
      0006D5 75 82 41         [24] 1725 	mov	dpl,#0x41
                                   1726 ;	src/maxhub.c:330: return data;
                                   1727 ;	src/maxhub.c:331: }
      0006D8 02r02r73         [24] 1728 	ljmp	_i2cMax32664ReadByte
                                   1729 ;------------------------------------------------------------
                                   1730 ;Allocation info for local variables in function 'readSensorHubMode'
                                   1731 ;------------------------------------------------------------
                                   1732 ;mode                      Allocated with name '_readSensorHubMode_mode_65536_74'
                                   1733 ;------------------------------------------------------------
                                   1734 ;	src/maxhub.c:338: uint8_t readSensorHubMode()
                                   1735 ;	-----------------------------------------
                                   1736 ;	 function readSensorHubMode
                                   1737 ;	-----------------------------------------
      0006DB                       1738 _readSensorHubMode:
                                   1739 ;	src/maxhub.c:340: int mode = i2cMax32664ReadByte(READ_DEVICE_MODE, 0x00, NULL); // family and index byte.
      0006DB 90r00r0A         [24] 1740 	mov	dptr,#_i2cMax32664ReadByte_PARM_2
      0006DE E4               [12] 1741 	clr	a
      0006DF F0               [24] 1742 	movx	@dptr,a
      0006E0 90r00r0B         [24] 1743 	mov	dptr,#_i2cMax32664ReadByte_PARM_3
      0006E3 F0               [24] 1744 	movx	@dptr,a
      0006E4 A3               [24] 1745 	inc	dptr
      0006E5 F0               [24] 1746 	movx	@dptr,a
      0006E6 A3               [24] 1747 	inc	dptr
      0006E7 F0               [24] 1748 	movx	@dptr,a
      0006E8 75 82 02         [24] 1749 	mov	dpl,#0x02
      0006EB 12r02r73         [24] 1750 	lcall	_i2cMax32664ReadByte
      0006EE AE 82            [24] 1751 	mov	r6,dpl
      0006F0 AF 83            [24] 1752 	mov	r7,dph
                                   1753 ;	src/maxhub.c:341: if (mode == FAIL)
      0006F2 BE FF 29         [24] 1754 	cjne	r6,#0xff,00102$
      0006F5 BF FF 26         [24] 1755 	cjne	r7,#0xff,00102$
                                   1756 ;	src/maxhub.c:343: ERROR_LOG("Error reading device mode!");
      0006F8 C0 07            [24] 1757 	push	ar7
      0006FA C0 06            [24] 1758 	push	ar6
      0006FC 74rD2            [12] 1759 	mov	a,#___str_13
      0006FE C0 E0            [24] 1760 	push	acc
      000700 74s01            [12] 1761 	mov	a,#(___str_13 >> 8)
      000702 C0 E0            [24] 1762 	push	acc
      000704 12r00r00         [24] 1763 	lcall	_printf_tiny
      000707 15 81            [12] 1764 	dec	sp
      000709 15 81            [12] 1765 	dec	sp
      00070B 74r42            [12] 1766 	mov	a,#___str_2
      00070D C0 E0            [24] 1767 	push	acc
      00070F 74s00            [12] 1768 	mov	a,#(___str_2 >> 8)
      000711 C0 E0            [24] 1769 	push	acc
      000713 12r00r00         [24] 1770 	lcall	_printf_tiny
      000716 15 81            [12] 1771 	dec	sp
      000718 15 81            [12] 1772 	dec	sp
      00071A D0 06            [24] 1773 	pop	ar6
      00071C D0 07            [24] 1774 	pop	ar7
      00071E                       1775 00102$:
                                   1776 ;	src/maxhub.c:345: return mode;                                                      // Will return 0x00
      00071E 8E 82            [24] 1777 	mov	dpl,r6
                                   1778 ;	src/maxhub.c:346: }
      000720 22               [24] 1779 	ret
                                   1780 ;------------------------------------------------------------
                                   1781 ;Allocation info for local variables in function 'setApplicationMode'
                                   1782 ;------------------------------------------------------------
                                   1783 ;i                         Allocated with name '_setApplicationMode_i_131072_77'
                                   1784 ;------------------------------------------------------------
                                   1785 ;	src/maxhub.c:352: void setApplicationMode()
                                   1786 ;	-----------------------------------------
                                   1787 ;	 function setApplicationMode
                                   1788 ;	-----------------------------------------
      000721                       1789 _setApplicationMode:
                                   1790 ;	src/maxhub.c:354: INFO_LOG("Setting to Application Mode...");
      000721 74rFD            [12] 1791 	mov	a,#___str_14
      000723 C0 E0            [24] 1792 	push	acc
      000725 74s01            [12] 1793 	mov	a,#(___str_14 >> 8)
      000727 C0 E0            [24] 1794 	push	acc
      000729 74 80            [12] 1795 	mov	a,#0x80
      00072B C0 E0            [24] 1796 	push	acc
      00072D 12r00r00         [24] 1797 	lcall	_printf
      000730 15 81            [12] 1798 	dec	sp
      000732 15 81            [12] 1799 	dec	sp
      000734 15 81            [12] 1800 	dec	sp
      000736 74r42            [12] 1801 	mov	a,#___str_2
      000738 C0 E0            [24] 1802 	push	acc
      00073A 74s00            [12] 1803 	mov	a,#(___str_2 >> 8)
      00073C C0 E0            [24] 1804 	push	acc
      00073E 12r00r00         [24] 1805 	lcall	_printf_tiny
      000741 15 81            [12] 1806 	dec	sp
      000743 15 81            [12] 1807 	dec	sp
                                   1808 ;	src/maxhub.c:356: RSTN = 0;
                                   1809 ;	assignBit
      000745 C2 B4            [12] 1810 	clr	_P3_4
                                   1811 ;	src/maxhub.c:358: MFIO = 1;
                                   1812 ;	assignBit
      000747 D2 94            [12] 1813 	setb	_P1_4
                                   1814 ;	src/maxhub.c:359: hubDelayMs(10*2);
      000749 75 82 14         [24] 1815 	mov	dpl,#0x14
      00074C 12r00r00         [24] 1816 	lcall	_hubDelayMs
                                   1817 ;	src/maxhub.c:361: RSTN = 1;
                                   1818 ;	assignBit
      00074F D2 B4            [12] 1819 	setb	_P3_4
                                   1820 ;	src/maxhub.c:362: hubDelayMs(50*2);
      000751 75 82 64         [24] 1821 	mov	dpl,#0x64
      000754 12r00r00         [24] 1822 	lcall	_hubDelayMs
                                   1823 ;	src/maxhub.c:364: for (uint8_t i = 0; i < 5; i++)
      000757 7F 00            [12] 1824 	mov	r7,#0x00
      000759                       1825 00105$:
      000759 BF 05 00         [24] 1826 	cjne	r7,#0x05,00122$
      00075C                       1827 00122$:
      00075C 50 0D            [24] 1828 	jnc	00101$
                                   1829 ;	src/maxhub.c:366: hubDelayMs(100);
      00075E 75 82 64         [24] 1830 	mov	dpl,#0x64
      000761 C0 07            [24] 1831 	push	ar7
      000763 12r00r00         [24] 1832 	lcall	_hubDelayMs
      000766 D0 07            [24] 1833 	pop	ar7
                                   1834 ;	src/maxhub.c:364: for (uint8_t i = 0; i < 5; i++)
      000768 0F               [12] 1835 	inc	r7
      000769 80 EE            [24] 1836 	sjmp	00105$
      00076B                       1837 00101$:
                                   1838 ;	src/maxhub.c:369: if (readSensorHubMode() != APPLICATION_MODE)
      00076B 12r06rDB         [24] 1839 	lcall	_readSensorHubMode
      00076E E5 82            [12] 1840 	mov	a,dpl
      000770 60 1F            [24] 1841 	jz	00103$
                                   1842 ;	src/maxhub.c:371: ERROR_LOG("Application Mode not set!!!");
      000772 74r29            [12] 1843 	mov	a,#___str_15
      000774 C0 E0            [24] 1844 	push	acc
      000776 74s02            [12] 1845 	mov	a,#(___str_15 >> 8)
      000778 C0 E0            [24] 1846 	push	acc
      00077A 12r00r00         [24] 1847 	lcall	_printf_tiny
      00077D 15 81            [12] 1848 	dec	sp
      00077F 15 81            [12] 1849 	dec	sp
      000781 74r42            [12] 1850 	mov	a,#___str_2
      000783 C0 E0            [24] 1851 	push	acc
      000785 74s00            [12] 1852 	mov	a,#(___str_2 >> 8)
      000787 C0 E0            [24] 1853 	push	acc
      000789 12r00r00         [24] 1854 	lcall	_printf_tiny
      00078C 15 81            [12] 1855 	dec	sp
      00078E 15 81            [12] 1856 	dec	sp
                                   1857 ;	src/maxhub.c:372: return;
      000790 22               [24] 1858 	ret
      000791                       1859 00103$:
                                   1860 ;	src/maxhub.c:374: INFO_LOG("Application Mode Set");
      000791 74r55            [12] 1861 	mov	a,#___str_16
      000793 C0 E0            [24] 1862 	push	acc
      000795 74s02            [12] 1863 	mov	a,#(___str_16 >> 8)
      000797 C0 E0            [24] 1864 	push	acc
      000799 74 80            [12] 1865 	mov	a,#0x80
      00079B C0 E0            [24] 1866 	push	acc
      00079D 12r00r00         [24] 1867 	lcall	_printf
      0007A0 15 81            [12] 1868 	dec	sp
      0007A2 15 81            [12] 1869 	dec	sp
      0007A4 15 81            [12] 1870 	dec	sp
      0007A6 74r42            [12] 1871 	mov	a,#___str_2
      0007A8 C0 E0            [24] 1872 	push	acc
      0007AA 74s00            [12] 1873 	mov	a,#(___str_2 >> 8)
      0007AC C0 E0            [24] 1874 	push	acc
      0007AE 12r00r00         [24] 1875 	lcall	_printf_tiny
      0007B1 15 81            [12] 1876 	dec	sp
      0007B3 15 81            [12] 1877 	dec	sp
                                   1878 ;	src/maxhub.c:375: }
      0007B5 22               [24] 1879 	ret
                                   1880 ;------------------------------------------------------------
                                   1881 ;Allocation info for local variables in function 'setBootloaderMode'
                                   1882 ;------------------------------------------------------------
                                   1883 ;	src/maxhub.c:381: void setBootloaderMode()
                                   1884 ;	-----------------------------------------
                                   1885 ;	 function setBootloaderMode
                                   1886 ;	-----------------------------------------
      0007B6                       1887 _setBootloaderMode:
                                   1888 ;	src/maxhub.c:384: RSTN = 0;
                                   1889 ;	assignBit
      0007B6 C2 B4            [12] 1890 	clr	_P3_4
                                   1891 ;	src/maxhub.c:386: MFIO = 0;
                                   1892 ;	assignBit
      0007B8 C2 94            [12] 1893 	clr	_P1_4
                                   1894 ;	src/maxhub.c:387: hubDelayMs(10);
      0007BA 75 82 0A         [24] 1895 	mov	dpl,#0x0a
      0007BD 12r00r00         [24] 1896 	lcall	_hubDelayMs
                                   1897 ;	src/maxhub.c:389: RSTN = 1;
                                   1898 ;	assignBit
      0007C0 D2 B4            [12] 1899 	setb	_P3_4
                                   1900 ;	src/maxhub.c:390: hubDelayMs(50);
      0007C2 75 82 32         [24] 1901 	mov	dpl,#0x32
                                   1902 ;	src/maxhub.c:391: }
      0007C5 02r00r00         [24] 1903 	ljmp	_hubDelayMs
                                   1904 ;------------------------------------------------------------
                                   1905 ;Allocation info for local variables in function 'readSensorHubStatus'
                                   1906 ;------------------------------------------------------------
                                   1907 ;statusByte                Allocated with name '_readSensorHubStatus_statusByte_65536_81'
                                   1908 ;------------------------------------------------------------
                                   1909 ;	src/maxhub.c:398: uint8_t readSensorHubStatus()
                                   1910 ;	-----------------------------------------
                                   1911 ;	 function readSensorHubStatus
                                   1912 ;	-----------------------------------------
      0007C8                       1913 _readSensorHubStatus:
                                   1914 ;	src/maxhub.c:401: uint8_t statusByte = i2cMax32664ReadByte(0x00, 0x00, NULL); // family and index byte.
      0007C8 90r00r0A         [24] 1915 	mov	dptr,#_i2cMax32664ReadByte_PARM_2
      0007CB E4               [12] 1916 	clr	a
      0007CC F0               [24] 1917 	movx	@dptr,a
      0007CD 90r00r0B         [24] 1918 	mov	dptr,#_i2cMax32664ReadByte_PARM_3
      0007D0 F0               [24] 1919 	movx	@dptr,a
      0007D1 A3               [24] 1920 	inc	dptr
      0007D2 F0               [24] 1921 	movx	@dptr,a
      0007D3 A3               [24] 1922 	inc	dptr
      0007D4 F0               [24] 1923 	movx	@dptr,a
      0007D5 75 82 00         [24] 1924 	mov	dpl,#0x00
                                   1925 ;	src/maxhub.c:402: return statusByte;                                          // Will return 0x00
                                   1926 ;	src/maxhub.c:403: }
      0007D8 02r02r73         [24] 1927 	ljmp	_i2cMax32664ReadByte
                                   1928 ;------------------------------------------------------------
                                   1929 ;Allocation info for local variables in function 'setOutputMode'
                                   1930 ;------------------------------------------------------------
                                   1931 ;outputType                Allocated with name '_setOutputMode_outputType_65536_82'
                                   1932 ;statusByte                Allocated with name '_setOutputMode_statusByte_65537_84'
                                   1933 ;------------------------------------------------------------
                                   1934 ;	src/maxhub.c:412: uint8_t setOutputMode(uint8_t outputType)
                                   1935 ;	-----------------------------------------
                                   1936 ;	 function setOutputMode
                                   1937 ;	-----------------------------------------
      0007DB                       1938 _setOutputMode:
      0007DB E5 82            [12] 1939 	mov	a,dpl
      0007DD 90r00r1A         [24] 1940 	mov	dptr,#_setOutputMode_outputType_65536_82
      0007E0 F0               [24] 1941 	movx	@dptr,a
                                   1942 ;	src/maxhub.c:415: if (outputType > SENSOR_ALGO_COUNTER) // Bytes between 0x00 and 0x07
      0007E1 E0               [24] 1943 	movx	a,@dptr
      0007E2 FF               [12] 1944 	mov  r7,a
      0007E3 24 F8            [12] 1945 	add	a,#0xff - 0x07
      0007E5 50 04            [24] 1946 	jnc	00102$
                                   1947 ;	src/maxhub.c:416: return FAIL;
      0007E7 75 82 FF         [24] 1948 	mov	dpl,#0xff
      0007EA 22               [24] 1949 	ret
      0007EB                       1950 00102$:
                                   1951 ;	src/maxhub.c:420: int statusByte = i2cMax32664WriteByte(OUTPUT_MODE, SET_FORMAT, outputType);
      0007EB 90r00r07         [24] 1952 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      0007EE E4               [12] 1953 	clr	a
      0007EF F0               [24] 1954 	movx	@dptr,a
      0007F0 90r00r08         [24] 1955 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      0007F3 EF               [12] 1956 	mov	a,r7
      0007F4 F0               [24] 1957 	movx	@dptr,a
      0007F5 75 82 10         [24] 1958 	mov	dpl,#0x10
      0007F8 12r02r05         [24] 1959 	lcall	_i2cMax32664WriteByte
      0007FB AE 82            [24] 1960 	mov	r6,dpl
      0007FD AF 83            [24] 1961 	mov	r7,dph
                                   1962 ;	src/maxhub.c:421: if (statusByte != SFE_BIO_SUCCESS)
      0007FF EE               [12] 1963 	mov	a,r6
      000800 4F               [12] 1964 	orl	a,r7
      000801 60 3B            [24] 1965 	jz	00104$
                                   1966 ;	src/maxhub.c:423: ERROR_LOG("%s: Recieved Error Status = %d", __func__, statusByte);
      000803 C0 07            [24] 1967 	push	ar7
      000805 C0 06            [24] 1968 	push	ar6
      000807 C0 06            [24] 1969 	push	ar6
      000809 C0 07            [24] 1970 	push	ar7
      00080B 74rA6            [12] 1971 	mov	a,#___str_18
      00080D C0 E0            [24] 1972 	push	acc
      00080F 74s02            [12] 1973 	mov	a,#(___str_18 >> 8)
      000811 C0 E0            [24] 1974 	push	acc
      000813 74 80            [12] 1975 	mov	a,#0x80
      000815 C0 E0            [24] 1976 	push	acc
      000817 74r77            [12] 1977 	mov	a,#___str_17
      000819 C0 E0            [24] 1978 	push	acc
      00081B 74s02            [12] 1979 	mov	a,#(___str_17 >> 8)
      00081D C0 E0            [24] 1980 	push	acc
      00081F 12r00r00         [24] 1981 	lcall	_printf_tiny
      000822 E5 81            [12] 1982 	mov	a,sp
      000824 24 F9            [12] 1983 	add	a,#0xf9
      000826 F5 81            [12] 1984 	mov	sp,a
      000828 74r42            [12] 1985 	mov	a,#___str_2
      00082A C0 E0            [24] 1986 	push	acc
      00082C 74s00            [12] 1987 	mov	a,#(___str_2 >> 8)
      00082E C0 E0            [24] 1988 	push	acc
      000830 12r00r00         [24] 1989 	lcall	_printf_tiny
      000833 15 81            [12] 1990 	dec	sp
      000835 15 81            [12] 1991 	dec	sp
      000837 D0 06            [24] 1992 	pop	ar6
      000839 D0 07            [24] 1993 	pop	ar7
                                   1994 ;	src/maxhub.c:424: return statusByte;
      00083B 8E 82            [24] 1995 	mov	dpl,r6
      00083D 22               [24] 1996 	ret
      00083E                       1997 00104$:
                                   1998 ;	src/maxhub.c:426: return SFE_BIO_SUCCESS;
      00083E 75 82 00         [24] 1999 	mov	dpl,#0x00
                                   2000 ;	src/maxhub.c:427: }
      000841 22               [24] 2001 	ret
                                   2002 ;------------------------------------------------------------
                                   2003 ;Allocation info for local variables in function 'setFifoThreshold'
                                   2004 ;------------------------------------------------------------
                                   2005 ;intThresh                 Allocated with name '_setFifoThreshold_intThresh_65536_86'
                                   2006 ;statusByte                Allocated with name '_setFifoThreshold_statusByte_65536_87'
                                   2007 ;------------------------------------------------------------
                                   2008 ;	src/maxhub.c:438: uint8_t setFifoThreshold(uint8_t intThresh)
                                   2009 ;	-----------------------------------------
                                   2010 ;	 function setFifoThreshold
                                   2011 ;	-----------------------------------------
      000842                       2012 _setFifoThreshold:
      000842 E5 82            [12] 2013 	mov	a,dpl
      000844 90r00r1B         [24] 2014 	mov	dptr,#_setFifoThreshold_intThresh_65536_86
      000847 F0               [24] 2015 	movx	@dptr,a
                                   2016 ;	src/maxhub.c:443: uint8_t statusByte = i2cMax32664WriteByte(OUTPUT_MODE, WRITE_SET_THRESHOLD, intThresh);
      000848 E0               [24] 2017 	movx	a,@dptr
      000849 FF               [12] 2018 	mov	r7,a
      00084A 90r00r07         [24] 2019 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      00084D 74 01            [12] 2020 	mov	a,#0x01
      00084F F0               [24] 2021 	movx	@dptr,a
      000850 90r00r08         [24] 2022 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      000853 EF               [12] 2023 	mov	a,r7
      000854 F0               [24] 2024 	movx	@dptr,a
      000855 75 82 10         [24] 2025 	mov	dpl,#0x10
      000858 12r02r05         [24] 2026 	lcall	_i2cMax32664WriteByte
                                   2027 ;	src/maxhub.c:444: if (statusByte != SFE_BIO_SUCCESS)
      00085B E5 82            [12] 2028 	mov	a,dpl
      00085D FE               [12] 2029 	mov	r6,a
      00085E 60 3B            [24] 2030 	jz	00102$
                                   2031 ;	src/maxhub.c:446: ERROR_LOG("%s: Recieved Error Status = %d", __func__, statusByte);
      000860 8E 05            [24] 2032 	mov	ar5,r6
      000862 7F 00            [12] 2033 	mov	r7,#0x00
      000864 C0 06            [24] 2034 	push	ar6
      000866 C0 05            [24] 2035 	push	ar5
      000868 C0 07            [24] 2036 	push	ar7
      00086A 74rB4            [12] 2037 	mov	a,#___str_19
      00086C C0 E0            [24] 2038 	push	acc
      00086E 74s02            [12] 2039 	mov	a,#(___str_19 >> 8)
      000870 C0 E0            [24] 2040 	push	acc
      000872 74 80            [12] 2041 	mov	a,#0x80
      000874 C0 E0            [24] 2042 	push	acc
      000876 74r77            [12] 2043 	mov	a,#___str_17
      000878 C0 E0            [24] 2044 	push	acc
      00087A 74s02            [12] 2045 	mov	a,#(___str_17 >> 8)
      00087C C0 E0            [24] 2046 	push	acc
      00087E 12r00r00         [24] 2047 	lcall	_printf_tiny
      000881 E5 81            [12] 2048 	mov	a,sp
      000883 24 F9            [12] 2049 	add	a,#0xf9
      000885 F5 81            [12] 2050 	mov	sp,a
      000887 74r42            [12] 2051 	mov	a,#___str_2
      000889 C0 E0            [24] 2052 	push	acc
      00088B 74s00            [12] 2053 	mov	a,#(___str_2 >> 8)
      00088D C0 E0            [24] 2054 	push	acc
      00088F 12r00r00         [24] 2055 	lcall	_printf_tiny
      000892 15 81            [12] 2056 	dec	sp
      000894 15 81            [12] 2057 	dec	sp
      000896 D0 06            [24] 2058 	pop	ar6
                                   2059 ;	src/maxhub.c:447: return statusByte;
      000898 8E 82            [24] 2060 	mov	dpl,r6
      00089A 22               [24] 2061 	ret
      00089B                       2062 00102$:
                                   2063 ;	src/maxhub.c:449: return SFE_BIO_SUCCESS;
      00089B 75 82 00         [24] 2064 	mov	dpl,#0x00
                                   2065 ;	src/maxhub.c:450: }
      00089E 22               [24] 2066 	ret
                                   2067 ;------------------------------------------------------------
                                   2068 ;Allocation info for local variables in function 'agcAlgoControl'
                                   2069 ;------------------------------------------------------------
                                   2070 ;enable                    Allocated with name '_agcAlgoControl_enable_65536_89'
                                   2071 ;statusByte                Allocated with name '_agcAlgoControl_statusByte_65537_92'
                                   2072 ;------------------------------------------------------------
                                   2073 ;	src/maxhub.c:458: int agcAlgoControl(uint8_t enable)
                                   2074 ;	-----------------------------------------
                                   2075 ;	 function agcAlgoControl
                                   2076 ;	-----------------------------------------
      00089F                       2077 _agcAlgoControl:
      00089F E5 82            [12] 2078 	mov	a,dpl
      0008A1 90r00r1C         [24] 2079 	mov	dptr,#_agcAlgoControl_enable_65536_89
      0008A4 F0               [24] 2080 	movx	@dptr,a
                                   2081 ;	src/maxhub.c:460: if (enable > 1)
      0008A5 E0               [24] 2082 	movx	a,@dptr
      0008A6 FF               [12] 2083 	mov  r7,a
      0008A7 24 FE            [12] 2084 	add	a,#0xff - 0x01
      0008A9 50 04            [24] 2085 	jnc	00102$
                                   2086 ;	src/maxhub.c:462: return FAIL;
      0008AB 90 FF FF         [24] 2087 	mov	dptr,#0xffff
      0008AE 22               [24] 2088 	ret
      0008AF                       2089 00102$:
                                   2090 ;	src/maxhub.c:465: int statusByte = i2cMax32664WriteByte(ENABLE_ALGORITHM, ENABLE_AGC_ALGO, enable);
      0008AF 90r00r07         [24] 2091 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      0008B2 E4               [12] 2092 	clr	a
      0008B3 F0               [24] 2093 	movx	@dptr,a
      0008B4 90r00r08         [24] 2094 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      0008B7 EF               [12] 2095 	mov	a,r7
      0008B8 F0               [24] 2096 	movx	@dptr,a
      0008B9 75 82 52         [24] 2097 	mov	dpl,#0x52
      0008BC 12r02r05         [24] 2098 	lcall	_i2cMax32664WriteByte
      0008BF AE 82            [24] 2099 	mov	r6,dpl
      0008C1 AF 83            [24] 2100 	mov	r7,dph
                                   2101 ;	src/maxhub.c:466: if (statusByte != SFE_BIO_SUCCESS)
      0008C3 EE               [12] 2102 	mov	a,r6
      0008C4 4F               [12] 2103 	orl	a,r7
      0008C5 60 3D            [24] 2104 	jz	00104$
                                   2105 ;	src/maxhub.c:468: ERROR_LOG("%s: Recieved Error Status = %d", __func__, statusByte);
      0008C7 C0 07            [24] 2106 	push	ar7
      0008C9 C0 06            [24] 2107 	push	ar6
      0008CB C0 06            [24] 2108 	push	ar6
      0008CD C0 07            [24] 2109 	push	ar7
      0008CF 74rC5            [12] 2110 	mov	a,#___str_20
      0008D1 C0 E0            [24] 2111 	push	acc
      0008D3 74s02            [12] 2112 	mov	a,#(___str_20 >> 8)
      0008D5 C0 E0            [24] 2113 	push	acc
      0008D7 74 80            [12] 2114 	mov	a,#0x80
      0008D9 C0 E0            [24] 2115 	push	acc
      0008DB 74r77            [12] 2116 	mov	a,#___str_17
      0008DD C0 E0            [24] 2117 	push	acc
      0008DF 74s02            [12] 2118 	mov	a,#(___str_17 >> 8)
      0008E1 C0 E0            [24] 2119 	push	acc
      0008E3 12r00r00         [24] 2120 	lcall	_printf_tiny
      0008E6 E5 81            [12] 2121 	mov	a,sp
      0008E8 24 F9            [12] 2122 	add	a,#0xf9
      0008EA F5 81            [12] 2123 	mov	sp,a
      0008EC 74r42            [12] 2124 	mov	a,#___str_2
      0008EE C0 E0            [24] 2125 	push	acc
      0008F0 74s00            [12] 2126 	mov	a,#(___str_2 >> 8)
      0008F2 C0 E0            [24] 2127 	push	acc
      0008F4 12r00r00         [24] 2128 	lcall	_printf_tiny
      0008F7 15 81            [12] 2129 	dec	sp
      0008F9 15 81            [12] 2130 	dec	sp
      0008FB D0 06            [24] 2131 	pop	ar6
      0008FD D0 07            [24] 2132 	pop	ar7
                                   2133 ;	src/maxhub.c:469: return statusByte;
      0008FF 8E 82            [24] 2134 	mov	dpl,r6
      000901 8F 83            [24] 2135 	mov	dph,r7
      000903 22               [24] 2136 	ret
      000904                       2137 00104$:
                                   2138 ;	src/maxhub.c:471: return SFE_BIO_SUCCESS;
      000904 90 00 00         [24] 2139 	mov	dptr,#0x0000
                                   2140 ;	src/maxhub.c:472: }
      000907 22               [24] 2141 	ret
                                   2142 ;------------------------------------------------------------
                                   2143 ;Allocation info for local variables in function 'max30101Control'
                                   2144 ;------------------------------------------------------------
                                   2145 ;senSwitch                 Allocated with name '_max30101Control_senSwitch_65536_94'
                                   2146 ;statusByte                Allocated with name '_max30101Control_statusByte_65537_97'
                                   2147 ;------------------------------------------------------------
                                   2148 ;	src/maxhub.c:481: uint8_t max30101Control(uint8_t senSwitch)
                                   2149 ;	-----------------------------------------
                                   2150 ;	 function max30101Control
                                   2151 ;	-----------------------------------------
      000908                       2152 _max30101Control:
      000908 E5 82            [12] 2153 	mov	a,dpl
      00090A 90r00r1D         [24] 2154 	mov	dptr,#_max30101Control_senSwitch_65536_94
      00090D F0               [24] 2155 	movx	@dptr,a
                                   2156 ;	src/maxhub.c:483: if (senSwitch > 1)
      00090E E0               [24] 2157 	movx	a,@dptr
      00090F FF               [12] 2158 	mov  r7,a
      000910 24 FE            [12] 2159 	add	a,#0xff - 0x01
      000912 50 04            [24] 2160 	jnc	00102$
                                   2161 ;	src/maxhub.c:485: return FAIL;
      000914 75 82 FF         [24] 2162 	mov	dpl,#0xff
      000917 22               [24] 2163 	ret
      000918                       2164 00102$:
                                   2165 ;	src/maxhub.c:489: uint8_t statusByte = i2cMax32664WriteByte(ENABLE_SENSOR, ENABLE_MAX30101, senSwitch);
      000918 90r00r07         [24] 2166 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      00091B 74 03            [12] 2167 	mov	a,#0x03
      00091D F0               [24] 2168 	movx	@dptr,a
      00091E 90r00r08         [24] 2169 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      000921 EF               [12] 2170 	mov	a,r7
      000922 F0               [24] 2171 	movx	@dptr,a
      000923 75 82 44         [24] 2172 	mov	dpl,#0x44
      000926 12r02r05         [24] 2173 	lcall	_i2cMax32664WriteByte
                                   2174 ;	src/maxhub.c:490: if (statusByte != SFE_BIO_SUCCESS)
      000929 E5 82            [12] 2175 	mov	a,dpl
      00092B FE               [12] 2176 	mov	r6,a
      00092C 60 3B            [24] 2177 	jz	00104$
                                   2178 ;	src/maxhub.c:492: ERROR_LOG("%s: Recieved Error Status = %d", __func__, statusByte);
      00092E 8E 05            [24] 2179 	mov	ar5,r6
      000930 7F 00            [12] 2180 	mov	r7,#0x00
      000932 C0 06            [24] 2181 	push	ar6
      000934 C0 05            [24] 2182 	push	ar5
      000936 C0 07            [24] 2183 	push	ar7
      000938 74rD4            [12] 2184 	mov	a,#___str_21
      00093A C0 E0            [24] 2185 	push	acc
      00093C 74s02            [12] 2186 	mov	a,#(___str_21 >> 8)
      00093E C0 E0            [24] 2187 	push	acc
      000940 74 80            [12] 2188 	mov	a,#0x80
      000942 C0 E0            [24] 2189 	push	acc
      000944 74r77            [12] 2190 	mov	a,#___str_17
      000946 C0 E0            [24] 2191 	push	acc
      000948 74s02            [12] 2192 	mov	a,#(___str_17 >> 8)
      00094A C0 E0            [24] 2193 	push	acc
      00094C 12r00r00         [24] 2194 	lcall	_printf_tiny
      00094F E5 81            [12] 2195 	mov	a,sp
      000951 24 F9            [12] 2196 	add	a,#0xf9
      000953 F5 81            [12] 2197 	mov	sp,a
      000955 74r42            [12] 2198 	mov	a,#___str_2
      000957 C0 E0            [24] 2199 	push	acc
      000959 74s00            [12] 2200 	mov	a,#(___str_2 >> 8)
      00095B C0 E0            [24] 2201 	push	acc
      00095D 12r00r00         [24] 2202 	lcall	_printf_tiny
      000960 15 81            [12] 2203 	dec	sp
      000962 15 81            [12] 2204 	dec	sp
      000964 D0 06            [24] 2205 	pop	ar6
                                   2206 ;	src/maxhub.c:493: return statusByte;
      000966 8E 82            [24] 2207 	mov	dpl,r6
      000968 22               [24] 2208 	ret
      000969                       2209 00104$:
                                   2210 ;	src/maxhub.c:495: return SFE_BIO_SUCCESS;
      000969 75 82 00         [24] 2211 	mov	dpl,#0x00
                                   2212 ;	src/maxhub.c:496: }
      00096C 22               [24] 2213 	ret
                                   2214 ;------------------------------------------------------------
                                   2215 ;Allocation info for local variables in function 'maximFastAlgoControl'
                                   2216 ;------------------------------------------------------------
                                   2217 ;mode                      Allocated with name '_maximFastAlgoControl_mode_65536_99'
                                   2218 ;statusByte                Allocated with name '_maximFastAlgoControl_statusByte_65537_102'
                                   2219 ;------------------------------------------------------------
                                   2220 ;	src/maxhub.c:505: uint8_t maximFastAlgoControl(uint8_t mode)
                                   2221 ;	-----------------------------------------
                                   2222 ;	 function maximFastAlgoControl
                                   2223 ;	-----------------------------------------
      00096D                       2224 _maximFastAlgoControl:
      00096D E5 82            [12] 2225 	mov	a,dpl
      00096F 90r00r1E         [24] 2226 	mov	dptr,#_maximFastAlgoControl_mode_65536_99
      000972 F0               [24] 2227 	movx	@dptr,a
                                   2228 ;	src/maxhub.c:507: if (mode > 2)
      000973 E0               [24] 2229 	movx	a,@dptr
      000974 FF               [12] 2230 	mov  r7,a
      000975 24 FD            [12] 2231 	add	a,#0xff - 0x02
      000977 50 04            [24] 2232 	jnc	00102$
                                   2233 ;	src/maxhub.c:509: return FAIL;
      000979 75 82 FF         [24] 2234 	mov	dpl,#0xff
      00097C 22               [24] 2235 	ret
      00097D                       2236 00102$:
                                   2237 ;	src/maxhub.c:512: int statusByte = i2cMax32664WriteByte(ENABLE_ALGORITHM, ENABLE_WHRM_ALGO, mode);
      00097D 90r00r07         [24] 2238 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      000980 74 02            [12] 2239 	mov	a,#0x02
      000982 F0               [24] 2240 	movx	@dptr,a
      000983 90r00r08         [24] 2241 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      000986 EF               [12] 2242 	mov	a,r7
      000987 F0               [24] 2243 	movx	@dptr,a
      000988 75 82 52         [24] 2244 	mov	dpl,#0x52
      00098B 12r02r05         [24] 2245 	lcall	_i2cMax32664WriteByte
      00098E AE 82            [24] 2246 	mov	r6,dpl
      000990 AF 83            [24] 2247 	mov	r7,dph
                                   2248 ;	src/maxhub.c:513: if (statusByte != SFE_BIO_SUCCESS)
      000992 EE               [12] 2249 	mov	a,r6
      000993 4F               [12] 2250 	orl	a,r7
      000994 60 3B            [24] 2251 	jz	00104$
                                   2252 ;	src/maxhub.c:515: ERROR_LOG("%s: Recieved Error Status = %d", __func__, statusByte);
      000996 C0 07            [24] 2253 	push	ar7
      000998 C0 06            [24] 2254 	push	ar6
      00099A C0 06            [24] 2255 	push	ar6
      00099C C0 07            [24] 2256 	push	ar7
      00099E 74rE4            [12] 2257 	mov	a,#___str_22
      0009A0 C0 E0            [24] 2258 	push	acc
      0009A2 74s02            [12] 2259 	mov	a,#(___str_22 >> 8)
      0009A4 C0 E0            [24] 2260 	push	acc
      0009A6 74 80            [12] 2261 	mov	a,#0x80
      0009A8 C0 E0            [24] 2262 	push	acc
      0009AA 74r77            [12] 2263 	mov	a,#___str_17
      0009AC C0 E0            [24] 2264 	push	acc
      0009AE 74s02            [12] 2265 	mov	a,#(___str_17 >> 8)
      0009B0 C0 E0            [24] 2266 	push	acc
      0009B2 12r00r00         [24] 2267 	lcall	_printf_tiny
      0009B5 E5 81            [12] 2268 	mov	a,sp
      0009B7 24 F9            [12] 2269 	add	a,#0xf9
      0009B9 F5 81            [12] 2270 	mov	sp,a
      0009BB 74r42            [12] 2271 	mov	a,#___str_2
      0009BD C0 E0            [24] 2272 	push	acc
      0009BF 74s00            [12] 2273 	mov	a,#(___str_2 >> 8)
      0009C1 C0 E0            [24] 2274 	push	acc
      0009C3 12r00r00         [24] 2275 	lcall	_printf_tiny
      0009C6 15 81            [12] 2276 	dec	sp
      0009C8 15 81            [12] 2277 	dec	sp
      0009CA D0 06            [24] 2278 	pop	ar6
      0009CC D0 07            [24] 2279 	pop	ar7
                                   2280 ;	src/maxhub.c:516: return statusByte;
      0009CE 8E 82            [24] 2281 	mov	dpl,r6
      0009D0 22               [24] 2282 	ret
      0009D1                       2283 00104$:
                                   2284 ;	src/maxhub.c:518: return SFE_BIO_SUCCESS;
      0009D1 75 82 00         [24] 2285 	mov	dpl,#0x00
                                   2286 ;	src/maxhub.c:519: }
      0009D4 22               [24] 2287 	ret
                                   2288 ;------------------------------------------------------------
                                   2289 ;Allocation info for local variables in function 'configBpm'
                                   2290 ;------------------------------------------------------------
                                   2291 ;mode                      Allocated with name '_configBpm_mode_65536_104'
                                   2292 ;statusByte                Allocated with name '_configBpm_statusByte_65536_105'
                                   2293 ;------------------------------------------------------------
                                   2294 ;	src/maxhub.c:526: void configBpm(uint8_t mode)
                                   2295 ;	-----------------------------------------
                                   2296 ;	 function configBpm
                                   2297 ;	-----------------------------------------
      0009D5                       2298 _configBpm:
      0009D5 E5 82            [12] 2299 	mov	a,dpl
      0009D7 90r00r1F         [24] 2300 	mov	dptr,#_configBpm_mode_65536_104
      0009DA F0               [24] 2301 	movx	@dptr,a
                                   2302 ;	src/maxhub.c:530: statusByte = setOutputMode(ALGO_DATA); // Just the data
      0009DB 75 82 02         [24] 2303 	mov	dpl,#0x02
      0009DE 12r07rDB         [24] 2304 	lcall	_setOutputMode
      0009E1 AF 82            [24] 2305 	mov	r7,dpl
                                   2306 ;	src/maxhub.c:531: INFO_LOG("setOutputMode Status = %d", statusByte);
      0009E3 7E 00            [12] 2307 	mov	r6,#0x00
      0009E5 C0 07            [24] 2308 	push	ar7
      0009E7 C0 06            [24] 2309 	push	ar6
      0009E9 74rF9            [12] 2310 	mov	a,#___str_23
      0009EB C0 E0            [24] 2311 	push	acc
      0009ED 74s02            [12] 2312 	mov	a,#(___str_23 >> 8)
      0009EF C0 E0            [24] 2313 	push	acc
      0009F1 74 80            [12] 2314 	mov	a,#0x80
      0009F3 C0 E0            [24] 2315 	push	acc
      0009F5 12r00r00         [24] 2316 	lcall	_printf
      0009F8 E5 81            [12] 2317 	mov	a,sp
      0009FA 24 FB            [12] 2318 	add	a,#0xfb
      0009FC F5 81            [12] 2319 	mov	sp,a
      0009FE 74r42            [12] 2320 	mov	a,#___str_2
      000A00 C0 E0            [24] 2321 	push	acc
      000A02 74s00            [12] 2322 	mov	a,#(___str_2 >> 8)
      000A04 C0 E0            [24] 2323 	push	acc
      000A06 12r00r00         [24] 2324 	lcall	_printf_tiny
      000A09 15 81            [12] 2325 	dec	sp
      000A0B 15 81            [12] 2326 	dec	sp
                                   2327 ;	src/maxhub.c:537: statusByte = setOutputMode(ALGO_DATA); // Just the data
      000A0D 75 82 02         [24] 2328 	mov	dpl,#0x02
      000A10 12r07rDB         [24] 2329 	lcall	_setOutputMode
      000A13 AF 82            [24] 2330 	mov	r7,dpl
                                   2331 ;	src/maxhub.c:538: INFO_LOG("setOutputMode Status 2 = %d", statusByte);
      000A15 7E 00            [12] 2332 	mov	r6,#0x00
      000A17 C0 07            [24] 2333 	push	ar7
      000A19 C0 06            [24] 2334 	push	ar6
      000A1B 74r20            [12] 2335 	mov	a,#___str_24
      000A1D C0 E0            [24] 2336 	push	acc
      000A1F 74s03            [12] 2337 	mov	a,#(___str_24 >> 8)
      000A21 C0 E0            [24] 2338 	push	acc
      000A23 74 80            [12] 2339 	mov	a,#0x80
      000A25 C0 E0            [24] 2340 	push	acc
      000A27 12r00r00         [24] 2341 	lcall	_printf
      000A2A E5 81            [12] 2342 	mov	a,sp
      000A2C 24 FB            [12] 2343 	add	a,#0xfb
      000A2E F5 81            [12] 2344 	mov	sp,a
      000A30 74r42            [12] 2345 	mov	a,#___str_2
      000A32 C0 E0            [24] 2346 	push	acc
      000A34 74s00            [12] 2347 	mov	a,#(___str_2 >> 8)
      000A36 C0 E0            [24] 2348 	push	acc
      000A38 12r00r00         [24] 2349 	lcall	_printf_tiny
      000A3B 15 81            [12] 2350 	dec	sp
      000A3D 15 81            [12] 2351 	dec	sp
                                   2352 ;	src/maxhub.c:544: statusByte = setFifoThreshold(0x01); // One sample before interrupt is fired.
      000A3F 75 82 01         [24] 2353 	mov	dpl,#0x01
      000A42 12r08r42         [24] 2354 	lcall	_setFifoThreshold
      000A45 AF 82            [24] 2355 	mov	r7,dpl
                                   2356 ;	src/maxhub.c:545: INFO_LOG("setFifoThreshold Status = %d", statusByte);
      000A47 7E 00            [12] 2357 	mov	r6,#0x00
      000A49 C0 07            [24] 2358 	push	ar7
      000A4B C0 06            [24] 2359 	push	ar6
      000A4D 74r49            [12] 2360 	mov	a,#___str_25
      000A4F C0 E0            [24] 2361 	push	acc
      000A51 74s03            [12] 2362 	mov	a,#(___str_25 >> 8)
      000A53 C0 E0            [24] 2363 	push	acc
      000A55 74 80            [12] 2364 	mov	a,#0x80
      000A57 C0 E0            [24] 2365 	push	acc
      000A59 12r00r00         [24] 2366 	lcall	_printf
      000A5C E5 81            [12] 2367 	mov	a,sp
      000A5E 24 FB            [12] 2368 	add	a,#0xfb
      000A60 F5 81            [12] 2369 	mov	sp,a
      000A62 74r42            [12] 2370 	mov	a,#___str_2
      000A64 C0 E0            [24] 2371 	push	acc
      000A66 74s00            [12] 2372 	mov	a,#(___str_2 >> 8)
      000A68 C0 E0            [24] 2373 	push	acc
      000A6A 12r00r00         [24] 2374 	lcall	_printf_tiny
      000A6D 15 81            [12] 2375 	dec	sp
      000A6F 15 81            [12] 2376 	dec	sp
                                   2377 ;	src/maxhub.c:551: statusByte = agcAlgoControl(ENABLE);
      000A71 75 82 01         [24] 2378 	mov	dpl,#0x01
      000A74 12r08r9F         [24] 2379 	lcall	_agcAlgoControl
      000A77 AE 82            [24] 2380 	mov	r6,dpl
                                   2381 ;	src/maxhub.c:552: INFO_LOG("agcAlgoControl Status = %d", statusByte);
      000A79 7F 00            [12] 2382 	mov	r7,#0x00
      000A7B C0 06            [24] 2383 	push	ar6
      000A7D C0 07            [24] 2384 	push	ar7
      000A7F 74r73            [12] 2385 	mov	a,#___str_26
      000A81 C0 E0            [24] 2386 	push	acc
      000A83 74s03            [12] 2387 	mov	a,#(___str_26 >> 8)
      000A85 C0 E0            [24] 2388 	push	acc
      000A87 74 80            [12] 2389 	mov	a,#0x80
      000A89 C0 E0            [24] 2390 	push	acc
      000A8B 12r00r00         [24] 2391 	lcall	_printf
      000A8E E5 81            [12] 2392 	mov	a,sp
      000A90 24 FB            [12] 2393 	add	a,#0xfb
      000A92 F5 81            [12] 2394 	mov	sp,a
      000A94 74r42            [12] 2395 	mov	a,#___str_2
      000A96 C0 E0            [24] 2396 	push	acc
      000A98 74s00            [12] 2397 	mov	a,#(___str_2 >> 8)
      000A9A C0 E0            [24] 2398 	push	acc
      000A9C 12r00r00         [24] 2399 	lcall	_printf_tiny
      000A9F 15 81            [12] 2400 	dec	sp
      000AA1 15 81            [12] 2401 	dec	sp
                                   2402 ;	src/maxhub.c:558: statusByte = max30101Control(ENABLE);
      000AA3 75 82 01         [24] 2403 	mov	dpl,#0x01
      000AA6 12r09r08         [24] 2404 	lcall	_max30101Control
      000AA9 AF 82            [24] 2405 	mov	r7,dpl
                                   2406 ;	src/maxhub.c:559: INFO_LOG("max30101Control Status = %d", statusByte);
      000AAB 7E 00            [12] 2407 	mov	r6,#0x00
      000AAD C0 07            [24] 2408 	push	ar7
      000AAF C0 06            [24] 2409 	push	ar6
      000AB1 74r9B            [12] 2410 	mov	a,#___str_27
      000AB3 C0 E0            [24] 2411 	push	acc
      000AB5 74s03            [12] 2412 	mov	a,#(___str_27 >> 8)
      000AB7 C0 E0            [24] 2413 	push	acc
      000AB9 74 80            [12] 2414 	mov	a,#0x80
      000ABB C0 E0            [24] 2415 	push	acc
      000ABD 12r00r00         [24] 2416 	lcall	_printf
      000AC0 E5 81            [12] 2417 	mov	a,sp
      000AC2 24 FB            [12] 2418 	add	a,#0xfb
      000AC4 F5 81            [12] 2419 	mov	sp,a
      000AC6 74r42            [12] 2420 	mov	a,#___str_2
      000AC8 C0 E0            [24] 2421 	push	acc
      000ACA 74s00            [12] 2422 	mov	a,#(___str_2 >> 8)
      000ACC C0 E0            [24] 2423 	push	acc
      000ACE 12r00r00         [24] 2424 	lcall	_printf_tiny
      000AD1 15 81            [12] 2425 	dec	sp
      000AD3 15 81            [12] 2426 	dec	sp
                                   2427 ;	src/maxhub.c:565: hubDelayMs(100);
      000AD5 75 82 64         [24] 2428 	mov	dpl,#0x64
      000AD8 12r00r00         [24] 2429 	lcall	_hubDelayMs
                                   2430 ;	src/maxhub.c:567: statusByte = maximFastAlgoControl(mode);
      000ADB 90r00r1F         [24] 2431 	mov	dptr,#_configBpm_mode_65536_104
      000ADE E0               [24] 2432 	movx	a,@dptr
      000ADF F5 82            [12] 2433 	mov	dpl,a
      000AE1 12r09r6D         [24] 2434 	lcall	_maximFastAlgoControl
      000AE4 AF 82            [24] 2435 	mov	r7,dpl
                                   2436 ;	src/maxhub.c:568: INFO_LOG("maximFastAlgoControl Status = %d", statusByte);
      000AE6 7E 00            [12] 2437 	mov	r6,#0x00
      000AE8 C0 07            [24] 2438 	push	ar7
      000AEA C0 06            [24] 2439 	push	ar6
      000AEC 74rC4            [12] 2440 	mov	a,#___str_28
      000AEE C0 E0            [24] 2441 	push	acc
      000AF0 74s03            [12] 2442 	mov	a,#(___str_28 >> 8)
      000AF2 C0 E0            [24] 2443 	push	acc
      000AF4 74 80            [12] 2444 	mov	a,#0x80
      000AF6 C0 E0            [24] 2445 	push	acc
      000AF8 12r00r00         [24] 2446 	lcall	_printf
      000AFB E5 81            [12] 2447 	mov	a,sp
      000AFD 24 FB            [12] 2448 	add	a,#0xfb
      000AFF F5 81            [12] 2449 	mov	sp,a
      000B01 74r42            [12] 2450 	mov	a,#___str_2
      000B03 C0 E0            [24] 2451 	push	acc
      000B05 74s00            [12] 2452 	mov	a,#(___str_2 >> 8)
      000B07 C0 E0            [24] 2453 	push	acc
      000B09 12r00r00         [24] 2454 	lcall	_printf_tiny
      000B0C 15 81            [12] 2455 	dec	sp
      000B0E 15 81            [12] 2456 	dec	sp
                                   2457 ;	src/maxhub.c:574: hubDelayMs(20);
      000B10 75 82 14         [24] 2458 	mov	dpl,#0x14
      000B13 12r00r00         [24] 2459 	lcall	_hubDelayMs
                                   2460 ;	src/maxhub.c:575: INFO_LOG("%s: configuration success", __func__);
      000B16 74r19            [12] 2461 	mov	a,#___str_30
      000B18 C0 E0            [24] 2462 	push	acc
      000B1A 74s04            [12] 2463 	mov	a,#(___str_30 >> 8)
      000B1C C0 E0            [24] 2464 	push	acc
      000B1E 74 80            [12] 2465 	mov	a,#0x80
      000B20 C0 E0            [24] 2466 	push	acc
      000B22 74rF2            [12] 2467 	mov	a,#___str_29
      000B24 C0 E0            [24] 2468 	push	acc
      000B26 74s03            [12] 2469 	mov	a,#(___str_29 >> 8)
      000B28 C0 E0            [24] 2470 	push	acc
      000B2A 74 80            [12] 2471 	mov	a,#0x80
      000B2C C0 E0            [24] 2472 	push	acc
      000B2E 12r00r00         [24] 2473 	lcall	_printf
      000B31 E5 81            [12] 2474 	mov	a,sp
      000B33 24 FA            [12] 2475 	add	a,#0xfa
      000B35 F5 81            [12] 2476 	mov	sp,a
      000B37 74r42            [12] 2477 	mov	a,#___str_2
      000B39 C0 E0            [24] 2478 	push	acc
      000B3B 74s00            [12] 2479 	mov	a,#(___str_2 >> 8)
      000B3D C0 E0            [24] 2480 	push	acc
      000B3F 12r00r00         [24] 2481 	lcall	_printf_tiny
      000B42 15 81            [12] 2482 	dec	sp
      000B44 15 81            [12] 2483 	dec	sp
                                   2484 ;	src/maxhub.c:576: }
      000B46 22               [24] 2485 	ret
                                   2486 ;------------------------------------------------------------
                                   2487 ;Allocation info for local variables in function 'configSensorBpm'
                                   2488 ;------------------------------------------------------------
                                   2489 ;mode                      Allocated with name '_configSensorBpm_mode_65536_112'
                                   2490 ;statusByte                Allocated with name '_configSensorBpm_statusByte_65536_113'
                                   2491 ;------------------------------------------------------------
                                   2492 ;	src/maxhub.c:583: void configSensorBpm(uint8_t mode)
                                   2493 ;	-----------------------------------------
                                   2494 ;	 function configSensorBpm
                                   2495 ;	-----------------------------------------
      000B47                       2496 _configSensorBpm:
      000B47 E5 82            [12] 2497 	mov	a,dpl
      000B49 90r00r20         [24] 2498 	mov	dptr,#_configSensorBpm_mode_65536_112
      000B4C F0               [24] 2499 	movx	@dptr,a
                                   2500 ;	src/maxhub.c:587: statusByte = setOutputMode(SENSOR_AND_ALGORITHM);
      000B4D 75 82 03         [24] 2501 	mov	dpl,#0x03
      000B50 12r07rDB         [24] 2502 	lcall	_setOutputMode
      000B53 AF 82            [24] 2503 	mov	r7,dpl
      000B55 7E 00            [12] 2504 	mov	r6,#0x00
                                   2505 ;	src/maxhub.c:588: INFO_LOG("setOutputMode Status = %d", statusByte);
      000B57 C0 07            [24] 2506 	push	ar7
      000B59 C0 06            [24] 2507 	push	ar6
      000B5B 74rF9            [12] 2508 	mov	a,#___str_23
      000B5D C0 E0            [24] 2509 	push	acc
      000B5F 74s02            [12] 2510 	mov	a,#(___str_23 >> 8)
      000B61 C0 E0            [24] 2511 	push	acc
      000B63 74 80            [12] 2512 	mov	a,#0x80
      000B65 C0 E0            [24] 2513 	push	acc
      000B67 12r00r00         [24] 2514 	lcall	_printf
      000B6A E5 81            [12] 2515 	mov	a,sp
      000B6C 24 FB            [12] 2516 	add	a,#0xfb
      000B6E F5 81            [12] 2517 	mov	sp,a
      000B70 74r42            [12] 2518 	mov	a,#___str_2
      000B72 C0 E0            [24] 2519 	push	acc
      000B74 74s00            [12] 2520 	mov	a,#(___str_2 >> 8)
      000B76 C0 E0            [24] 2521 	push	acc
      000B78 12r00r00         [24] 2522 	lcall	_printf_tiny
      000B7B 15 81            [12] 2523 	dec	sp
      000B7D 15 81            [12] 2524 	dec	sp
                                   2525 ;	src/maxhub.c:594: statusByte = setOutputMode(SENSOR_AND_ALGORITHM);
      000B7F 75 82 03         [24] 2526 	mov	dpl,#0x03
      000B82 12r07rDB         [24] 2527 	lcall	_setOutputMode
      000B85 AF 82            [24] 2528 	mov	r7,dpl
      000B87 7E 00            [12] 2529 	mov	r6,#0x00
                                   2530 ;	src/maxhub.c:595: INFO_LOG("setOutputMode Status = %d", statusByte);
      000B89 C0 07            [24] 2531 	push	ar7
      000B8B C0 06            [24] 2532 	push	ar6
      000B8D 74rF9            [12] 2533 	mov	a,#___str_23
      000B8F C0 E0            [24] 2534 	push	acc
      000B91 74s02            [12] 2535 	mov	a,#(___str_23 >> 8)
      000B93 C0 E0            [24] 2536 	push	acc
      000B95 74 80            [12] 2537 	mov	a,#0x80
      000B97 C0 E0            [24] 2538 	push	acc
      000B99 12r00r00         [24] 2539 	lcall	_printf
      000B9C E5 81            [12] 2540 	mov	a,sp
      000B9E 24 FB            [12] 2541 	add	a,#0xfb
      000BA0 F5 81            [12] 2542 	mov	sp,a
      000BA2 74r42            [12] 2543 	mov	a,#___str_2
      000BA4 C0 E0            [24] 2544 	push	acc
      000BA6 74s00            [12] 2545 	mov	a,#(___str_2 >> 8)
      000BA8 C0 E0            [24] 2546 	push	acc
      000BAA 12r00r00         [24] 2547 	lcall	_printf_tiny
      000BAD 15 81            [12] 2548 	dec	sp
      000BAF 15 81            [12] 2549 	dec	sp
                                   2550 ;	src/maxhub.c:602: statusByte = setFifoThreshold(0x01); // One sample before interrupt is fired.
      000BB1 75 82 01         [24] 2551 	mov	dpl,#0x01
      000BB4 12r08r42         [24] 2552 	lcall	_setFifoThreshold
      000BB7 AF 82            [24] 2553 	mov	r7,dpl
      000BB9 7E 00            [12] 2554 	mov	r6,#0x00
                                   2555 ;	src/maxhub.c:603: INFO_LOG("setFifoThreshold Status = %d", statusByte);
      000BBB C0 07            [24] 2556 	push	ar7
      000BBD C0 06            [24] 2557 	push	ar6
      000BBF 74r49            [12] 2558 	mov	a,#___str_25
      000BC1 C0 E0            [24] 2559 	push	acc
      000BC3 74s03            [12] 2560 	mov	a,#(___str_25 >> 8)
      000BC5 C0 E0            [24] 2561 	push	acc
      000BC7 74 80            [12] 2562 	mov	a,#0x80
      000BC9 C0 E0            [24] 2563 	push	acc
      000BCB 12r00r00         [24] 2564 	lcall	_printf
      000BCE E5 81            [12] 2565 	mov	a,sp
      000BD0 24 FB            [12] 2566 	add	a,#0xfb
      000BD2 F5 81            [12] 2567 	mov	sp,a
      000BD4 74r42            [12] 2568 	mov	a,#___str_2
      000BD6 C0 E0            [24] 2569 	push	acc
      000BD8 74s00            [12] 2570 	mov	a,#(___str_2 >> 8)
      000BDA C0 E0            [24] 2571 	push	acc
      000BDC 12r00r00         [24] 2572 	lcall	_printf_tiny
      000BDF 15 81            [12] 2573 	dec	sp
      000BE1 15 81            [12] 2574 	dec	sp
                                   2575 ;	src/maxhub.c:610: statusByte = agcAlgoControl(ENABLE);
      000BE3 75 82 01         [24] 2576 	mov	dpl,#0x01
      000BE6 12r08r9F         [24] 2577 	lcall	_agcAlgoControl
      000BE9 AE 82            [24] 2578 	mov	r6,dpl
      000BEB AF 83            [24] 2579 	mov	r7,dph
                                   2580 ;	src/maxhub.c:611: INFO_LOG("agcAlgoControl Status = %d", statusByte);
      000BED C0 06            [24] 2581 	push	ar6
      000BEF C0 07            [24] 2582 	push	ar7
      000BF1 74r73            [12] 2583 	mov	a,#___str_26
      000BF3 C0 E0            [24] 2584 	push	acc
      000BF5 74s03            [12] 2585 	mov	a,#(___str_26 >> 8)
      000BF7 C0 E0            [24] 2586 	push	acc
      000BF9 74 80            [12] 2587 	mov	a,#0x80
      000BFB C0 E0            [24] 2588 	push	acc
      000BFD 12r00r00         [24] 2589 	lcall	_printf
      000C00 E5 81            [12] 2590 	mov	a,sp
      000C02 24 FB            [12] 2591 	add	a,#0xfb
      000C04 F5 81            [12] 2592 	mov	sp,a
      000C06 74r42            [12] 2593 	mov	a,#___str_2
      000C08 C0 E0            [24] 2594 	push	acc
      000C0A 74s00            [12] 2595 	mov	a,#(___str_2 >> 8)
      000C0C C0 E0            [24] 2596 	push	acc
      000C0E 12r00r00         [24] 2597 	lcall	_printf_tiny
      000C11 15 81            [12] 2598 	dec	sp
      000C13 15 81            [12] 2599 	dec	sp
                                   2600 ;	src/maxhub.c:617: statusByte = max30101Control(ENABLE);
      000C15 75 82 01         [24] 2601 	mov	dpl,#0x01
      000C18 12r09r08         [24] 2602 	lcall	_max30101Control
      000C1B AF 82            [24] 2603 	mov	r7,dpl
      000C1D 7E 00            [12] 2604 	mov	r6,#0x00
                                   2605 ;	src/maxhub.c:618: INFO_LOG("max30101Control Status = %d", statusByte);
      000C1F C0 07            [24] 2606 	push	ar7
      000C21 C0 06            [24] 2607 	push	ar6
      000C23 74r9B            [12] 2608 	mov	a,#___str_27
      000C25 C0 E0            [24] 2609 	push	acc
      000C27 74s03            [12] 2610 	mov	a,#(___str_27 >> 8)
      000C29 C0 E0            [24] 2611 	push	acc
      000C2B 74 80            [12] 2612 	mov	a,#0x80
      000C2D C0 E0            [24] 2613 	push	acc
      000C2F 12r00r00         [24] 2614 	lcall	_printf
      000C32 E5 81            [12] 2615 	mov	a,sp
      000C34 24 FB            [12] 2616 	add	a,#0xfb
      000C36 F5 81            [12] 2617 	mov	sp,a
      000C38 74r42            [12] 2618 	mov	a,#___str_2
      000C3A C0 E0            [24] 2619 	push	acc
      000C3C 74s00            [12] 2620 	mov	a,#(___str_2 >> 8)
      000C3E C0 E0            [24] 2621 	push	acc
      000C40 12r00r00         [24] 2622 	lcall	_printf_tiny
      000C43 15 81            [12] 2623 	dec	sp
      000C45 15 81            [12] 2624 	dec	sp
                                   2625 ;	src/maxhub.c:624: statusByte = maximFastAlgoControl(mode);
      000C47 90r00r20         [24] 2626 	mov	dptr,#_configSensorBpm_mode_65536_112
      000C4A E0               [24] 2627 	movx	a,@dptr
      000C4B F5 82            [12] 2628 	mov	dpl,a
      000C4D 12r09r6D         [24] 2629 	lcall	_maximFastAlgoControl
      000C50 AF 82            [24] 2630 	mov	r7,dpl
      000C52 7E 00            [12] 2631 	mov	r6,#0x00
                                   2632 ;	src/maxhub.c:625: INFO_LOG("maximFastAlgoControl Status = %d", statusByte);
      000C54 C0 07            [24] 2633 	push	ar7
      000C56 C0 06            [24] 2634 	push	ar6
      000C58 74rC4            [12] 2635 	mov	a,#___str_28
      000C5A C0 E0            [24] 2636 	push	acc
      000C5C 74s03            [12] 2637 	mov	a,#(___str_28 >> 8)
      000C5E C0 E0            [24] 2638 	push	acc
      000C60 74 80            [12] 2639 	mov	a,#0x80
      000C62 C0 E0            [24] 2640 	push	acc
      000C64 12r00r00         [24] 2641 	lcall	_printf
      000C67 E5 81            [12] 2642 	mov	a,sp
      000C69 24 FB            [12] 2643 	add	a,#0xfb
      000C6B F5 81            [12] 2644 	mov	sp,a
      000C6D 74r42            [12] 2645 	mov	a,#___str_2
      000C6F C0 E0            [24] 2646 	push	acc
      000C71 74s00            [12] 2647 	mov	a,#(___str_2 >> 8)
      000C73 C0 E0            [24] 2648 	push	acc
      000C75 12r00r00         [24] 2649 	lcall	_printf_tiny
      000C78 15 81            [12] 2650 	dec	sp
      000C7A 15 81            [12] 2651 	dec	sp
                                   2652 ;	src/maxhub.c:631: hubDelayMs(2000);
      000C7C 75 82 D0         [24] 2653 	mov	dpl,#0xd0
      000C7F 12r00r00         [24] 2654 	lcall	_hubDelayMs
                                   2655 ;	src/maxhub.c:632: INFO_LOG("%s: configuration success", __func__);
      000C82 74r23            [12] 2656 	mov	a,#___str_31
      000C84 C0 E0            [24] 2657 	push	acc
      000C86 74s04            [12] 2658 	mov	a,#(___str_31 >> 8)
      000C88 C0 E0            [24] 2659 	push	acc
      000C8A 74 80            [12] 2660 	mov	a,#0x80
      000C8C C0 E0            [24] 2661 	push	acc
      000C8E 74rF2            [12] 2662 	mov	a,#___str_29
      000C90 C0 E0            [24] 2663 	push	acc
      000C92 74s03            [12] 2664 	mov	a,#(___str_29 >> 8)
      000C94 C0 E0            [24] 2665 	push	acc
      000C96 74 80            [12] 2666 	mov	a,#0x80
      000C98 C0 E0            [24] 2667 	push	acc
      000C9A 12r00r00         [24] 2668 	lcall	_printf
      000C9D E5 81            [12] 2669 	mov	a,sp
      000C9F 24 FA            [12] 2670 	add	a,#0xfa
      000CA1 F5 81            [12] 2671 	mov	sp,a
      000CA3 74r42            [12] 2672 	mov	a,#___str_2
      000CA5 C0 E0            [24] 2673 	push	acc
      000CA7 74s00            [12] 2674 	mov	a,#(___str_2 >> 8)
      000CA9 C0 E0            [24] 2675 	push	acc
      000CAB 12r00r00         [24] 2676 	lcall	_printf_tiny
      000CAE 15 81            [12] 2677 	dec	sp
      000CB0 15 81            [12] 2678 	dec	sp
                                   2679 ;	src/maxhub.c:633: }
      000CB2 22               [24] 2680 	ret
                                   2681 ;------------------------------------------------------------
                                   2682 ;Allocation info for local variables in function 'numSamplesOutFifo'
                                   2683 ;------------------------------------------------------------
                                   2684 ;sampAvail                 Allocated with name '_numSamplesOutFifo_sampAvail_65536_120'
                                   2685 ;------------------------------------------------------------
                                   2686 ;	src/maxhub.c:641: uint8_t numSamplesOutFifo()
                                   2687 ;	-----------------------------------------
                                   2688 ;	 function numSamplesOutFifo
                                   2689 ;	-----------------------------------------
      000CB3                       2690 _numSamplesOutFifo:
                                   2691 ;	src/maxhub.c:643: int sampAvail = i2cMax32664ReadByte(READ_DATA_OUTPUT, NUM_SAMPLES, NULL);
      000CB3 90r00r0A         [24] 2692 	mov	dptr,#_i2cMax32664ReadByte_PARM_2
      000CB6 E4               [12] 2693 	clr	a
      000CB7 F0               [24] 2694 	movx	@dptr,a
      000CB8 90r00r0B         [24] 2695 	mov	dptr,#_i2cMax32664ReadByte_PARM_3
      000CBB F0               [24] 2696 	movx	@dptr,a
      000CBC A3               [24] 2697 	inc	dptr
      000CBD F0               [24] 2698 	movx	@dptr,a
      000CBE A3               [24] 2699 	inc	dptr
      000CBF F0               [24] 2700 	movx	@dptr,a
      000CC0 75 82 12         [24] 2701 	mov	dpl,#0x12
      000CC3 12r02r73         [24] 2702 	lcall	_i2cMax32664ReadByte
      000CC6 AE 82            [24] 2703 	mov	r6,dpl
      000CC8 AF 83            [24] 2704 	mov	r7,dph
                                   2705 ;	src/maxhub.c:644: if (sampAvail == FAIL)
      000CCA BE FF 25         [24] 2706 	cjne	r6,#0xff,00102$
      000CCD BF FF 22         [24] 2707 	cjne	r7,#0xff,00102$
                                   2708 ;	src/maxhub.c:646: ERROR_LOG("Error reading numSamplesOutFifo");
      000CD0 74r33            [12] 2709 	mov	a,#___str_32
      000CD2 C0 E0            [24] 2710 	push	acc
      000CD4 74s04            [12] 2711 	mov	a,#(___str_32 >> 8)
      000CD6 C0 E0            [24] 2712 	push	acc
      000CD8 12r00r00         [24] 2713 	lcall	_printf_tiny
      000CDB 15 81            [12] 2714 	dec	sp
      000CDD 15 81            [12] 2715 	dec	sp
      000CDF 74r42            [12] 2716 	mov	a,#___str_2
      000CE1 C0 E0            [24] 2717 	push	acc
      000CE3 74s00            [12] 2718 	mov	a,#(___str_2 >> 8)
      000CE5 C0 E0            [24] 2719 	push	acc
      000CE7 12r00r00         [24] 2720 	lcall	_printf_tiny
      000CEA 15 81            [12] 2721 	dec	sp
      000CEC 15 81            [12] 2722 	dec	sp
                                   2723 ;	src/maxhub.c:647: return 0;
      000CEE 75 82 00         [24] 2724 	mov	dpl,#0x00
      000CF1 22               [24] 2725 	ret
      000CF2                       2726 00102$:
                                   2727 ;	src/maxhub.c:649: return sampAvail;
      000CF2 8E 82            [24] 2728 	mov	dpl,r6
                                   2729 ;	src/maxhub.c:650: }
      000CF4 22               [24] 2730 	ret
                                   2731 ;------------------------------------------------------------
                                   2732 ;Allocation info for local variables in function 'readBpm'
                                   2733 ;------------------------------------------------------------
                                   2734 ;sloc0                     Allocated with name '_readBpm_sloc0_1_0'
                                   2735 ;sloc1                     Allocated with name '_readBpm_sloc1_1_0'
                                   2736 ;data                      Allocated with name '_readBpm_PARM_2'
                                   2737 ;mode                      Allocated with name '_readBpm_mode_65536_122'
                                   2738 ;hubStatus                 Allocated with name '_readBpm_hubStatus_65536_123'
                                   2739 ;numSamples                Allocated with name '_readBpm_numSamples_65537_125'
                                   2740 ;statusByte                Allocated with name '_readBpm_statusByte_65538_127'
                                   2741 ;dataArr                   Allocated with name '_readBpm_dataArr_65538_127'
                                   2742 ;i                         Allocated with name '_readBpm_i_196610_129'
                                   2743 ;heartRate                 Allocated with name '_readBpm_heartRate_65539_133'
                                   2744 ;confidence                Allocated with name '_readBpm_confidence_65540_134'
                                   2745 ;oxygen                    Allocated with name '_readBpm_oxygen_65540_134'
                                   2746 ;status                    Allocated with name '_readBpm_status_65541_135'
                                   2747 ;temp                      Allocated with name '_readBpm_temp_131077_136'
                                   2748 ;rValue                    Allocated with name '_readBpm_rValue_131078_137'
                                   2749 ;extStatus                 Allocated with name '_readBpm_extStatus_131079_138'
                                   2750 ;------------------------------------------------------------
                                   2751 ;	src/maxhub.c:660: int readBpm(uint8_t mode, BioData *data)
                                   2752 ;	-----------------------------------------
                                   2753 ;	 function readBpm
                                   2754 ;	-----------------------------------------
      000CF5                       2755 _readBpm:
      000CF5 E5 82            [12] 2756 	mov	a,dpl
      000CF7 90r00r24         [24] 2757 	mov	dptr,#_readBpm_mode_65536_122
      000CFA F0               [24] 2758 	movx	@dptr,a
                                   2759 ;	src/maxhub.c:662: uint8_t hubStatus = readSensorHubStatus();
      000CFB 12r07rC8         [24] 2760 	lcall	_readSensorHubStatus
      000CFE AF 82            [24] 2761 	mov	r7,dpl
                                   2762 ;	src/maxhub.c:663: if (hubStatus == 1)
      000D00 BF 01 38         [24] 2763 	cjne	r7,#0x01,00102$
                                   2764 ;	src/maxhub.c:665: ERROR_LOG("%s: Hub Status Error : %d", __func__, hubStatus);
      000D03 8F 05            [24] 2765 	mov	ar5,r7
      000D05 7E 00            [12] 2766 	mov	r6,#0x00
      000D07 C0 05            [24] 2767 	push	ar5
      000D09 C0 06            [24] 2768 	push	ar6
      000D0B 74r8D            [12] 2769 	mov	a,#___str_34
      000D0D C0 E0            [24] 2770 	push	acc
      000D0F 74s04            [12] 2771 	mov	a,#(___str_34 >> 8)
      000D11 C0 E0            [24] 2772 	push	acc
      000D13 74 80            [12] 2773 	mov	a,#0x80
      000D15 C0 E0            [24] 2774 	push	acc
      000D17 74r63            [12] 2775 	mov	a,#___str_33
      000D19 C0 E0            [24] 2776 	push	acc
      000D1B 74s04            [12] 2777 	mov	a,#(___str_33 >> 8)
      000D1D C0 E0            [24] 2778 	push	acc
      000D1F 12r00r00         [24] 2779 	lcall	_printf_tiny
      000D22 E5 81            [12] 2780 	mov	a,sp
      000D24 24 F9            [12] 2781 	add	a,#0xf9
      000D26 F5 81            [12] 2782 	mov	sp,a
      000D28 74r42            [12] 2783 	mov	a,#___str_2
      000D2A C0 E0            [24] 2784 	push	acc
      000D2C 74s00            [12] 2785 	mov	a,#(___str_2 >> 8)
      000D2E C0 E0            [24] 2786 	push	acc
      000D30 12r00r00         [24] 2787 	lcall	_printf_tiny
      000D33 15 81            [12] 2788 	dec	sp
      000D35 15 81            [12] 2789 	dec	sp
                                   2790 ;	src/maxhub.c:666: return FAIL;
      000D37 90 FF FF         [24] 2791 	mov	dptr,#0xffff
      000D3A 22               [24] 2792 	ret
      000D3B                       2793 00102$:
                                   2794 ;	src/maxhub.c:669: INFO_LOG("Status Byte = %d", hubStatus);
      000D3B 7E 00            [12] 2795 	mov	r6,#0x00
      000D3D C0 07            [24] 2796 	push	ar7
      000D3F C0 06            [24] 2797 	push	ar6
      000D41 74r95            [12] 2798 	mov	a,#___str_35
      000D43 C0 E0            [24] 2799 	push	acc
      000D45 74s04            [12] 2800 	mov	a,#(___str_35 >> 8)
      000D47 C0 E0            [24] 2801 	push	acc
      000D49 74 80            [12] 2802 	mov	a,#0x80
      000D4B C0 E0            [24] 2803 	push	acc
      000D4D 12r00r00         [24] 2804 	lcall	_printf
      000D50 E5 81            [12] 2805 	mov	a,sp
      000D52 24 FB            [12] 2806 	add	a,#0xfb
      000D54 F5 81            [12] 2807 	mov	sp,a
      000D56 74r42            [12] 2808 	mov	a,#___str_2
      000D58 C0 E0            [24] 2809 	push	acc
      000D5A 74s00            [12] 2810 	mov	a,#(___str_2 >> 8)
      000D5C C0 E0            [24] 2811 	push	acc
      000D5E 12r00r00         [24] 2812 	lcall	_printf_tiny
      000D61 15 81            [12] 2813 	dec	sp
      000D63 15 81            [12] 2814 	dec	sp
                                   2815 ;	src/maxhub.c:671: uint8_t numSamples = numSamplesOutFifo();
      000D65 12r0CrB3         [24] 2816 	lcall	_numSamplesOutFifo
      000D68 AF 82            [24] 2817 	mov	r7,dpl
                                   2818 ;	src/maxhub.c:672: INFO_LOG("numSamples = %d", numSamples);
      000D6A 8F 05            [24] 2819 	mov	ar5,r7
      000D6C 7E 00            [12] 2820 	mov	r6,#0x00
      000D6E C0 07            [24] 2821 	push	ar7
      000D70 C0 05            [24] 2822 	push	ar5
      000D72 C0 06            [24] 2823 	push	ar6
      000D74 74rB3            [12] 2824 	mov	a,#___str_36
      000D76 C0 E0            [24] 2825 	push	acc
      000D78 74s04            [12] 2826 	mov	a,#(___str_36 >> 8)
      000D7A C0 E0            [24] 2827 	push	acc
      000D7C 74 80            [12] 2828 	mov	a,#0x80
      000D7E C0 E0            [24] 2829 	push	acc
      000D80 12r00r00         [24] 2830 	lcall	_printf
      000D83 E5 81            [12] 2831 	mov	a,sp
      000D85 24 FB            [12] 2832 	add	a,#0xfb
      000D87 F5 81            [12] 2833 	mov	sp,a
      000D89 74r42            [12] 2834 	mov	a,#___str_2
      000D8B C0 E0            [24] 2835 	push	acc
      000D8D 74s00            [12] 2836 	mov	a,#(___str_2 >> 8)
      000D8F C0 E0            [24] 2837 	push	acc
      000D91 12r00r00         [24] 2838 	lcall	_printf_tiny
      000D94 15 81            [12] 2839 	dec	sp
      000D96 15 81            [12] 2840 	dec	sp
      000D98 D0 07            [24] 2841 	pop	ar7
                                   2842 ;	src/maxhub.c:673: if (numSamples == 0)
      000D9A EF               [12] 2843 	mov	a,r7
      000D9B 70 34            [24] 2844 	jnz	00104$
                                   2845 ;	src/maxhub.c:675: INFO_LOG("%s: No samples to read", __func__);
      000D9D 74r8D            [12] 2846 	mov	a,#___str_34
      000D9F C0 E0            [24] 2847 	push	acc
      000DA1 74s04            [12] 2848 	mov	a,#(___str_34 >> 8)
      000DA3 C0 E0            [24] 2849 	push	acc
      000DA5 74 80            [12] 2850 	mov	a,#0x80
      000DA7 C0 E0            [24] 2851 	push	acc
      000DA9 74rD0            [12] 2852 	mov	a,#___str_37
      000DAB C0 E0            [24] 2853 	push	acc
      000DAD 74s04            [12] 2854 	mov	a,#(___str_37 >> 8)
      000DAF C0 E0            [24] 2855 	push	acc
      000DB1 74 80            [12] 2856 	mov	a,#0x80
      000DB3 C0 E0            [24] 2857 	push	acc
      000DB5 12r00r00         [24] 2858 	lcall	_printf
      000DB8 E5 81            [12] 2859 	mov	a,sp
      000DBA 24 FA            [12] 2860 	add	a,#0xfa
      000DBC F5 81            [12] 2861 	mov	sp,a
      000DBE 74r42            [12] 2862 	mov	a,#___str_2
      000DC0 C0 E0            [24] 2863 	push	acc
      000DC2 74s00            [12] 2864 	mov	a,#(___str_2 >> 8)
      000DC4 C0 E0            [24] 2865 	push	acc
      000DC6 12r00r00         [24] 2866 	lcall	_printf_tiny
      000DC9 15 81            [12] 2867 	dec	sp
      000DCB 15 81            [12] 2868 	dec	sp
                                   2869 ;	src/maxhub.c:676: return FAIL;
      000DCD 90 FF FF         [24] 2870 	mov	dptr,#0xffff
      000DD0 22               [24] 2871 	ret
      000DD1                       2872 00104$:
                                   2873 ;	src/maxhub.c:681: if (mode == 1)
      000DD1 90r00r24         [24] 2874 	mov	dptr,#_readBpm_mode_65536_122
      000DD4 E0               [24] 2875 	movx	a,@dptr
      000DD5 FF               [12] 2876 	mov	r7,a
      000DD6 BF 01 02         [24] 2877 	cjne	r7,#0x01,00166$
      000DD9 80 02            [24] 2878 	sjmp	00167$
      000DDB                       2879 00166$:
      000DDB 80 7C            [24] 2880 	sjmp	00109$
      000DDD                       2881 00167$:
                                   2882 ;	src/maxhub.c:683: statusByte = i2cMax32664SequentialReadByte(READ_DATA_OUTPUT, READ_DATA, dataArr, MAXFAST_ARRAY_SIZE);
      000DDD 90r00r0F         [24] 2883 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_2
      000DE0 74 01            [12] 2884 	mov	a,#0x01
      000DE2 F0               [24] 2885 	movx	@dptr,a
      000DE3 90r00r10         [24] 2886 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_3
      000DE6 74r27            [12] 2887 	mov	a,#_readBpm_dataArr_65538_127
      000DE8 F0               [24] 2888 	movx	@dptr,a
      000DE9 74s00            [12] 2889 	mov	a,#(_readBpm_dataArr_65538_127 >> 8)
      000DEB A3               [24] 2890 	inc	dptr
      000DEC F0               [24] 2891 	movx	@dptr,a
      000DED E4               [12] 2892 	clr	a
      000DEE A3               [24] 2893 	inc	dptr
      000DEF F0               [24] 2894 	movx	@dptr,a
      000DF0 90r00r13         [24] 2895 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_4
      000DF3 74 06            [12] 2896 	mov	a,#0x06
      000DF5 F0               [24] 2897 	movx	@dptr,a
      000DF6 75 82 12         [24] 2898 	mov	dpl,#0x12
      000DF9 12r04r34         [24] 2899 	lcall	_i2cMax32664SequentialReadByte
      000DFC E5 82            [12] 2900 	mov	a,dpl
      000DFE 85 83 F0         [24] 2901 	mov	b,dph
      000E01 90r00r25         [24] 2902 	mov	dptr,#_readBpm_statusByte_65538_127
      000E04 F0               [24] 2903 	movx	@dptr,a
      000E05 E5 F0            [12] 2904 	mov	a,b
      000E07 A3               [24] 2905 	inc	dptr
      000E08 F0               [24] 2906 	movx	@dptr,a
                                   2907 ;	src/maxhub.c:684: printf_tiny("\n\rData from Hub\n\r");
      000E09 74rF4            [12] 2908 	mov	a,#___str_38
      000E0B C0 E0            [24] 2909 	push	acc
      000E0D 74s04            [12] 2910 	mov	a,#(___str_38 >> 8)
      000E0F C0 E0            [24] 2911 	push	acc
      000E11 12r00r00         [24] 2912 	lcall	_printf_tiny
      000E14 15 81            [12] 2913 	dec	sp
      000E16 15 81            [12] 2914 	dec	sp
                                   2915 ;	src/maxhub.c:685: for (int i = 0; i < MAXFAST_ARRAY_SIZE; i++)
      000E18 7D 00            [12] 2916 	mov	r5,#0x00
      000E1A 7E 00            [12] 2917 	mov	r6,#0x00
      000E1C                       2918 00122$:
      000E1C C3               [12] 2919 	clr	c
      000E1D ED               [12] 2920 	mov	a,r5
      000E1E 94 06            [12] 2921 	subb	a,#0x06
      000E20 EE               [12] 2922 	mov	a,r6
      000E21 64 80            [12] 2923 	xrl	a,#0x80
      000E23 94 80            [12] 2924 	subb	a,#0x80
      000E25 50 61            [24] 2925 	jnc	00110$
                                   2926 ;	src/maxhub.c:687: printf_tiny("%d\n\r", dataArr[i]);
      000E27 ED               [12] 2927 	mov	a,r5
      000E28 24r27            [12] 2928 	add	a,#_readBpm_dataArr_65538_127
      000E2A F5 82            [12] 2929 	mov	dpl,a
      000E2C EE               [12] 2930 	mov	a,r6
      000E2D 34s00            [12] 2931 	addc	a,#(_readBpm_dataArr_65538_127 >> 8)
      000E2F F5 83            [12] 2932 	mov	dph,a
      000E31 E0               [24] 2933 	movx	a,@dptr
      000E32 FC               [12] 2934 	mov	r4,a
      000E33 7B 00            [12] 2935 	mov	r3,#0x00
      000E35 C0 06            [24] 2936 	push	ar6
      000E37 C0 05            [24] 2937 	push	ar5
      000E39 C0 04            [24] 2938 	push	ar4
      000E3B C0 03            [24] 2939 	push	ar3
      000E3D 74r06            [12] 2940 	mov	a,#___str_39
      000E3F C0 E0            [24] 2941 	push	acc
      000E41 74s05            [12] 2942 	mov	a,#(___str_39 >> 8)
      000E43 C0 E0            [24] 2943 	push	acc
      000E45 12r00r00         [24] 2944 	lcall	_printf_tiny
      000E48 E5 81            [12] 2945 	mov	a,sp
      000E4A 24 FC            [12] 2946 	add	a,#0xfc
      000E4C F5 81            [12] 2947 	mov	sp,a
      000E4E D0 05            [24] 2948 	pop	ar5
      000E50 D0 06            [24] 2949 	pop	ar6
                                   2950 ;	src/maxhub.c:685: for (int i = 0; i < MAXFAST_ARRAY_SIZE; i++)
      000E52 0D               [12] 2951 	inc	r5
      000E53 BD 00 C6         [24] 2952 	cjne	r5,#0x00,00122$
      000E56 0E               [12] 2953 	inc	r6
      000E57 80 C3            [24] 2954 	sjmp	00122$
      000E59                       2955 00109$:
                                   2956 ;	src/maxhub.c:690: else if (mode == 2)
      000E59 BF 02 2C         [24] 2957 	cjne	r7,#0x02,00110$
                                   2958 ;	src/maxhub.c:692: statusByte = i2cMax32664SequentialReadByte(READ_DATA_OUTPUT, READ_DATA, dataArr, MAXFAST_ARRAY_SIZE + MAXFAST_EXTENDED_DATA);
      000E5C 90r00r0F         [24] 2959 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_2
      000E5F 74 01            [12] 2960 	mov	a,#0x01
      000E61 F0               [24] 2961 	movx	@dptr,a
      000E62 90r00r10         [24] 2962 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_3
      000E65 74r27            [12] 2963 	mov	a,#_readBpm_dataArr_65538_127
      000E67 F0               [24] 2964 	movx	@dptr,a
      000E68 74s00            [12] 2965 	mov	a,#(_readBpm_dataArr_65538_127 >> 8)
      000E6A A3               [24] 2966 	inc	dptr
      000E6B F0               [24] 2967 	movx	@dptr,a
      000E6C E4               [12] 2968 	clr	a
      000E6D A3               [24] 2969 	inc	dptr
      000E6E F0               [24] 2970 	movx	@dptr,a
      000E6F 90r00r13         [24] 2971 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_4
      000E72 74 0B            [12] 2972 	mov	a,#0x0b
      000E74 F0               [24] 2973 	movx	@dptr,a
      000E75 75 82 12         [24] 2974 	mov	dpl,#0x12
      000E78 12r04r34         [24] 2975 	lcall	_i2cMax32664SequentialReadByte
      000E7B E5 82            [12] 2976 	mov	a,dpl
      000E7D 85 83 F0         [24] 2977 	mov	b,dph
      000E80 90r00r25         [24] 2978 	mov	dptr,#_readBpm_statusByte_65538_127
      000E83 F0               [24] 2979 	movx	@dptr,a
      000E84 E5 F0            [12] 2980 	mov	a,b
      000E86 A3               [24] 2981 	inc	dptr
      000E87 F0               [24] 2982 	movx	@dptr,a
      000E88                       2983 00110$:
                                   2984 ;	src/maxhub.c:695: if (statusByte != SFE_BIO_SUCCESS)
      000E88 90r00r25         [24] 2985 	mov	dptr,#_readBpm_statusByte_65538_127
      000E8B E0               [24] 2986 	movx	a,@dptr
      000E8C F5 F0            [12] 2987 	mov	b,a
      000E8E A3               [24] 2988 	inc	dptr
      000E8F E0               [24] 2989 	movx	a,@dptr
      000E90 45 F0            [12] 2990 	orl	a,b
      000E92 60 3A            [24] 2991 	jz	00112$
                                   2992 ;	src/maxhub.c:697: ERROR_LOG("%s: Status Error : %d", __func__, statusByte);
      000E94 90r00r25         [24] 2993 	mov	dptr,#_readBpm_statusByte_65538_127
      000E97 E0               [24] 2994 	movx	a,@dptr
      000E98 C0 E0            [24] 2995 	push	acc
      000E9A A3               [24] 2996 	inc	dptr
      000E9B E0               [24] 2997 	movx	a,@dptr
      000E9C C0 E0            [24] 2998 	push	acc
      000E9E 74r8D            [12] 2999 	mov	a,#___str_34
      000EA0 C0 E0            [24] 3000 	push	acc
      000EA2 74s04            [12] 3001 	mov	a,#(___str_34 >> 8)
      000EA4 C0 E0            [24] 3002 	push	acc
      000EA6 74 80            [12] 3003 	mov	a,#0x80
      000EA8 C0 E0            [24] 3004 	push	acc
      000EAA 74r0B            [12] 3005 	mov	a,#___str_40
      000EAC C0 E0            [24] 3006 	push	acc
      000EAE 74s05            [12] 3007 	mov	a,#(___str_40 >> 8)
      000EB0 C0 E0            [24] 3008 	push	acc
      000EB2 12r00r00         [24] 3009 	lcall	_printf_tiny
      000EB5 E5 81            [12] 3010 	mov	a,sp
      000EB7 24 F9            [12] 3011 	add	a,#0xf9
      000EB9 F5 81            [12] 3012 	mov	sp,a
      000EBB 74r42            [12] 3013 	mov	a,#___str_2
      000EBD C0 E0            [24] 3014 	push	acc
      000EBF 74s00            [12] 3015 	mov	a,#(___str_2 >> 8)
      000EC1 C0 E0            [24] 3016 	push	acc
      000EC3 12r00r00         [24] 3017 	lcall	_printf_tiny
      000EC6 15 81            [12] 3018 	dec	sp
      000EC8 15 81            [12] 3019 	dec	sp
                                   3020 ;	src/maxhub.c:698: return FAIL;
      000ECA 90 FF FF         [24] 3021 	mov	dptr,#0xffff
      000ECD 22               [24] 3022 	ret
      000ECE                       3023 00112$:
                                   3024 ;	src/maxhub.c:702: uint16_t heartRate = dataArr[0];
      000ECE 90r00r27         [24] 3025 	mov	dptr,#_readBpm_dataArr_65538_127
      000ED1 E0               [24] 3026 	movx	a,@dptr
                                   3027 ;	src/maxhub.c:703: heartRate = (heartRate << 8) | (dataArr[1]);
      000ED2 FE               [12] 3028 	mov	r6,a
      000ED3 7F 00            [12] 3029 	mov	r7,#0x00
      000ED5 90r00r28         [24] 3030 	mov	dptr,#(_readBpm_dataArr_65538_127 + 0x0001)
      000ED8 E0               [24] 3031 	movx	a,@dptr
      000ED9 7C 00            [12] 3032 	mov	r4,#0x00
      000EDB 42 07            [12] 3033 	orl	ar7,a
      000EDD EC               [12] 3034 	mov	a,r4
      000EDE 42 06            [12] 3035 	orl	ar6,a
                                   3036 ;	src/maxhub.c:704: heartRate /= 10;
      000EE0 90r00r00         [24] 3037 	mov	dptr,#__divuint_PARM_2
      000EE3 74 0A            [12] 3038 	mov	a,#0x0a
      000EE5 F0               [24] 3039 	movx	@dptr,a
      000EE6 E4               [12] 3040 	clr	a
      000EE7 A3               [24] 3041 	inc	dptr
      000EE8 F0               [24] 3042 	movx	@dptr,a
      000EE9 8F 82            [24] 3043 	mov	dpl,r7
      000EEB 8E 83            [24] 3044 	mov	dph,r6
      000EED 12r00r00         [24] 3045 	lcall	__divuint
      000EF0 AE 82            [24] 3046 	mov	r6,dpl
      000EF2 AF 83            [24] 3047 	mov	r7,dph
                                   3048 ;	src/maxhub.c:707: uint8_t confidence = dataArr[2];
      000EF4 90r00r29         [24] 3049 	mov	dptr,#(_readBpm_dataArr_65538_127 + 0x0002)
      000EF7 E0               [24] 3050 	movx	a,@dptr
      000EF8 F5*03            [12] 3051 	mov	_readBpm_sloc1_1_0,a
                                   3052 ;	src/maxhub.c:710: uint16_t oxygen = dataArr[3];
      000EFA 90r00r2A         [24] 3053 	mov	dptr,#(_readBpm_dataArr_65538_127 + 0x0003)
      000EFD E0               [24] 3054 	movx	a,@dptr
                                   3055 ;	src/maxhub.c:711: oxygen = (oxygen << 8) | dataArr[4];
      000EFE FB               [12] 3056 	mov	r3,a
      000EFF 7C 00            [12] 3057 	mov	r4,#0x00
      000F01 90r00r2B         [24] 3058 	mov	dptr,#(_readBpm_dataArr_65538_127 + 0x0004)
      000F04 E0               [24] 3059 	movx	a,@dptr
      000F05 7A 00            [12] 3060 	mov	r2,#0x00
      000F07 42 04            [12] 3061 	orl	ar4,a
      000F09 EA               [12] 3062 	mov	a,r2
      000F0A 42 03            [12] 3063 	orl	ar3,a
                                   3064 ;	src/maxhub.c:712: oxygen /= 10;
      000F0C 90r00r00         [24] 3065 	mov	dptr,#__divuint_PARM_2
      000F0F 74 0A            [12] 3066 	mov	a,#0x0a
      000F11 F0               [24] 3067 	movx	@dptr,a
      000F12 E4               [12] 3068 	clr	a
      000F13 A3               [24] 3069 	inc	dptr
      000F14 F0               [24] 3070 	movx	@dptr,a
      000F15 8C 82            [24] 3071 	mov	dpl,r4
      000F17 8B 83            [24] 3072 	mov	dph,r3
      000F19 C0 07            [24] 3073 	push	ar7
      000F1B C0 06            [24] 3074 	push	ar6
      000F1D 12r00r00         [24] 3075 	lcall	__divuint
      000F20 AB 82            [24] 3076 	mov	r3,dpl
      000F22 AC 83            [24] 3077 	mov	r4,dph
      000F24 D0 06            [24] 3078 	pop	ar6
      000F26 D0 07            [24] 3079 	pop	ar7
                                   3080 ;	src/maxhub.c:715: uint8_t status = dataArr[5];
      000F28 90r00r2C         [24] 3081 	mov	dptr,#(_readBpm_dataArr_65538_127 + 0x0005)
      000F2B E0               [24] 3082 	movx	a,@dptr
      000F2C FA               [12] 3083 	mov	r2,a
                                   3084 ;	src/maxhub.c:717: data->heartRate = heartRate;
      000F2D 90r00r21         [24] 3085 	mov	dptr,#_readBpm_PARM_2
      000F30 E0               [24] 3086 	movx	a,@dptr
      000F31 F5*00            [12] 3087 	mov	_readBpm_sloc0_1_0,a
      000F33 A3               [24] 3088 	inc	dptr
      000F34 E0               [24] 3089 	movx	a,@dptr
      000F35 F5*01            [12] 3090 	mov	(_readBpm_sloc0_1_0 + 1),a
      000F37 A3               [24] 3091 	inc	dptr
      000F38 E0               [24] 3092 	movx	a,@dptr
      000F39 F5*02            [12] 3093 	mov	(_readBpm_sloc0_1_0 + 2),a
      000F3B 74 08            [12] 3094 	mov	a,#0x08
      000F3D 25*00            [12] 3095 	add	a,_readBpm_sloc0_1_0
      000F3F F8               [12] 3096 	mov	r0,a
      000F40 E4               [12] 3097 	clr	a
      000F41 35*01            [12] 3098 	addc	a,(_readBpm_sloc0_1_0 + 1)
      000F43 F9               [12] 3099 	mov	r1,a
      000F44 AD*02            [24] 3100 	mov	r5,(_readBpm_sloc0_1_0 + 2)
      000F46 88 82            [24] 3101 	mov	dpl,r0
      000F48 89 83            [24] 3102 	mov	dph,r1
      000F4A 8D F0            [24] 3103 	mov	b,r5
      000F4C EE               [12] 3104 	mov	a,r6
      000F4D 12r00r00         [24] 3105 	lcall	__gptrput
      000F50 A3               [24] 3106 	inc	dptr
      000F51 EF               [12] 3107 	mov	a,r7
      000F52 12r00r00         [24] 3108 	lcall	__gptrput
                                   3109 ;	src/maxhub.c:718: data->confidence = confidence;
      000F55 74 0A            [12] 3110 	mov	a,#0x0a
      000F57 25*00            [12] 3111 	add	a,_readBpm_sloc0_1_0
      000F59 FD               [12] 3112 	mov	r5,a
      000F5A E4               [12] 3113 	clr	a
      000F5B 35*01            [12] 3114 	addc	a,(_readBpm_sloc0_1_0 + 1)
      000F5D FE               [12] 3115 	mov	r6,a
      000F5E AF*02            [24] 3116 	mov	r7,(_readBpm_sloc0_1_0 + 2)
      000F60 8D 82            [24] 3117 	mov	dpl,r5
      000F62 8E 83            [24] 3118 	mov	dph,r6
      000F64 8F F0            [24] 3119 	mov	b,r7
      000F66 E5*03            [12] 3120 	mov	a,_readBpm_sloc1_1_0
      000F68 12r00r00         [24] 3121 	lcall	__gptrput
                                   3122 ;	src/maxhub.c:719: data->oxygen = oxygen;
      000F6B 74 0B            [12] 3123 	mov	a,#0x0b
      000F6D 25*00            [12] 3124 	add	a,_readBpm_sloc0_1_0
      000F6F FD               [12] 3125 	mov	r5,a
      000F70 E4               [12] 3126 	clr	a
      000F71 35*01            [12] 3127 	addc	a,(_readBpm_sloc0_1_0 + 1)
      000F73 FE               [12] 3128 	mov	r6,a
      000F74 AF*02            [24] 3129 	mov	r7,(_readBpm_sloc0_1_0 + 2)
      000F76 8D 82            [24] 3130 	mov	dpl,r5
      000F78 8E 83            [24] 3131 	mov	dph,r6
      000F7A 8F F0            [24] 3132 	mov	b,r7
      000F7C EB               [12] 3133 	mov	a,r3
      000F7D 12r00r00         [24] 3134 	lcall	__gptrput
      000F80 A3               [24] 3135 	inc	dptr
      000F81 EC               [12] 3136 	mov	a,r4
      000F82 12r00r00         [24] 3137 	lcall	__gptrput
                                   3138 ;	src/maxhub.c:720: data->status = status;
      000F85 74 0D            [12] 3139 	mov	a,#0x0d
      000F87 25*00            [12] 3140 	add	a,_readBpm_sloc0_1_0
      000F89 FD               [12] 3141 	mov	r5,a
      000F8A E4               [12] 3142 	clr	a
      000F8B 35*01            [12] 3143 	addc	a,(_readBpm_sloc0_1_0 + 1)
      000F8D FE               [12] 3144 	mov	r6,a
      000F8E AF*02            [24] 3145 	mov	r7,(_readBpm_sloc0_1_0 + 2)
      000F90 8D 82            [24] 3146 	mov	dpl,r5
      000F92 8E 83            [24] 3147 	mov	dph,r6
      000F94 8F F0            [24] 3148 	mov	b,r7
      000F96 EA               [12] 3149 	mov	a,r2
      000F97 12r00r00         [24] 3150 	lcall	__gptrput
                                   3151 ;	src/maxhub.c:722: if (mode == 2)
      000F9A 90r00r24         [24] 3152 	mov	dptr,#_readBpm_mode_65536_122
      000F9D E0               [24] 3153 	movx	a,@dptr
      000F9E FF               [12] 3154 	mov	r7,a
      000F9F BF 02 02         [24] 3155 	cjne	r7,#0x02,00173$
      000FA2 80 03            [24] 3156 	sjmp	00174$
      000FA4                       3157 00173$:
      000FA4 02r10r31         [24] 3158 	ljmp	00114$
      000FA7                       3159 00174$:
                                   3160 ;	src/maxhub.c:725: uint16_t temp = dataArr[6];
      000FA7 C0 02            [24] 3161 	push	ar2
      000FA9 90r00r2D         [24] 3162 	mov	dptr,#(_readBpm_dataArr_65538_127 + 0x0006)
      000FAC E0               [24] 3163 	movx	a,@dptr
                                   3164 ;	src/maxhub.c:726: temp = (temp << 8) | dataArr[7];
      000FAD FE               [12] 3165 	mov	r6,a
      000FAE 7F 00            [12] 3166 	mov	r7,#0x00
      000FB0 90r00r2E         [24] 3167 	mov	dptr,#(_readBpm_dataArr_65538_127 + 0x0007)
      000FB3 E0               [24] 3168 	movx	a,@dptr
      000FB4 7C 00            [12] 3169 	mov	r4,#0x00
      000FB6 42 07            [12] 3170 	orl	ar7,a
      000FB8 EC               [12] 3171 	mov	a,r4
      000FB9 42 06            [12] 3172 	orl	ar6,a
                                   3173 ;	src/maxhub.c:727: float rValue = temp;
      000FBB 8F 82            [24] 3174 	mov	dpl,r7
      000FBD 8E 83            [24] 3175 	mov	dph,r6
      000FBF C0 02            [24] 3176 	push	ar2
      000FC1 12r00r00         [24] 3177 	lcall	___uint2fs
      000FC4 AC 82            [24] 3178 	mov	r4,dpl
      000FC6 AD 83            [24] 3179 	mov	r5,dph
      000FC8 AE F0            [24] 3180 	mov	r6,b
      000FCA FF               [12] 3181 	mov	r7,a
                                   3182 ;	src/maxhub.c:728: rValue = rValue / 10.0;
      000FCB E4               [12] 3183 	clr	a
      000FCC C0 E0            [24] 3184 	push	acc
      000FCE C0 E0            [24] 3185 	push	acc
      000FD0 74 20            [12] 3186 	mov	a,#0x20
      000FD2 C0 E0            [24] 3187 	push	acc
      000FD4 74 41            [12] 3188 	mov	a,#0x41
      000FD6 C0 E0            [24] 3189 	push	acc
                                   3190 ;	src/maxhub.c:731: uint8_t extStatus = dataArr[8];
      000FD8 8C 82            [24] 3191 	mov	dpl,r4
      000FDA 8D 83            [24] 3192 	mov	dph,r5
      000FDC 8E F0            [24] 3193 	mov	b,r6
      000FDE EF               [12] 3194 	mov	a,r7
      000FDF 12r00r00         [24] 3195 	lcall	___fsdiv
      000FE2 AC 82            [24] 3196 	mov	r4,dpl
      000FE4 AD 83            [24] 3197 	mov	r5,dph
      000FE6 AE F0            [24] 3198 	mov	r6,b
      000FE8 FF               [12] 3199 	mov	r7,a
      000FE9 E5 81            [12] 3200 	mov	a,sp
      000FEB 24 FC            [12] 3201 	add	a,#0xfc
      000FED F5 81            [12] 3202 	mov	sp,a
      000FEF D0 02            [24] 3203 	pop	ar2
      000FF1 90r00r2F         [24] 3204 	mov	dptr,#(_readBpm_dataArr_65538_127 + 0x0008)
      000FF4 E0               [24] 3205 	movx	a,@dptr
      000FF5 FB               [12] 3206 	mov	r3,a
                                   3207 ;	src/maxhub.c:733: data->rValue = rValue;
      000FF6 74 0E            [12] 3208 	mov	a,#0x0e
      000FF8 25*00            [12] 3209 	add	a,_readBpm_sloc0_1_0
      000FFA F8               [12] 3210 	mov	r0,a
      000FFB E4               [12] 3211 	clr	a
      000FFC 35*01            [12] 3212 	addc	a,(_readBpm_sloc0_1_0 + 1)
      000FFE F9               [12] 3213 	mov	r1,a
      000FFF AA*02            [24] 3214 	mov	r2,(_readBpm_sloc0_1_0 + 2)
      001001 88 82            [24] 3215 	mov	dpl,r0
      001003 89 83            [24] 3216 	mov	dph,r1
      001005 8A F0            [24] 3217 	mov	b,r2
      001007 EC               [12] 3218 	mov	a,r4
      001008 12r00r00         [24] 3219 	lcall	__gptrput
      00100B A3               [24] 3220 	inc	dptr
      00100C ED               [12] 3221 	mov	a,r5
      00100D 12r00r00         [24] 3222 	lcall	__gptrput
      001010 A3               [24] 3223 	inc	dptr
      001011 EE               [12] 3224 	mov	a,r6
      001012 12r00r00         [24] 3225 	lcall	__gptrput
      001015 A3               [24] 3226 	inc	dptr
      001016 EF               [12] 3227 	mov	a,r7
      001017 12r00r00         [24] 3228 	lcall	__gptrput
                                   3229 ;	src/maxhub.c:734: data->extStatus = extStatus;
      00101A 74 12            [12] 3230 	mov	a,#0x12
      00101C 25*00            [12] 3231 	add	a,_readBpm_sloc0_1_0
      00101E FD               [12] 3232 	mov	r5,a
      00101F E4               [12] 3233 	clr	a
      001020 35*01            [12] 3234 	addc	a,(_readBpm_sloc0_1_0 + 1)
      001022 FE               [12] 3235 	mov	r6,a
      001023 AF*02            [24] 3236 	mov	r7,(_readBpm_sloc0_1_0 + 2)
      001025 8D 82            [24] 3237 	mov	dpl,r5
      001027 8E 83            [24] 3238 	mov	dph,r6
      001029 8F F0            [24] 3239 	mov	b,r7
      00102B EB               [12] 3240 	mov	a,r3
      00102C 12r00r00         [24] 3241 	lcall	__gptrput
                                   3242 ;	src/maxhub.c:755: return SUCCESS;
      00102F D0 02            [24] 3243 	pop	ar2
                                   3244 ;	src/maxhub.c:734: data->extStatus = extStatus;
      001031                       3245 00114$:
                                   3246 ;	src/maxhub.c:737: switch (status)
      001031 EA               [12] 3247 	mov	a,r2
      001032 FF               [12] 3248 	mov	r7,a
      001033 24 FC            [12] 3249 	add	a,#0xff - 0x03
      001035 50 03            [24] 3250 	jnc	00175$
      001037 02r11r17         [24] 3251 	ljmp	00119$
      00103A                       3252 00175$:
      00103A EF               [12] 3253 	mov	a,r7
      00103B 2F               [12] 3254 	add	a,r7
      00103C 2F               [12] 3255 	add	a,r7
      00103D 90r10r41         [24] 3256 	mov	dptr,#00176$
      001040 73               [24] 3257 	jmp	@a+dptr
      001041                       3258 00176$:
      001041 02r10r4D         [24] 3259 	ljmp	00115$
      001044 02r10r80         [24] 3260 	ljmp	00116$
      001047 02r10rB3         [24] 3261 	ljmp	00117$
      00104A 02r10rE5         [24] 3262 	ljmp	00118$
                                   3263 ;	src/maxhub.c:739: case NO_READING:
      00104D                       3264 00115$:
                                   3265 ;	src/maxhub.c:740: INFO_LOG("%s: Finger Status = NO_READING", __func__);
      00104D 74r8D            [12] 3266 	mov	a,#___str_34
      00104F C0 E0            [24] 3267 	push	acc
      001051 74s04            [12] 3268 	mov	a,#(___str_34 >> 8)
      001053 C0 E0            [24] 3269 	push	acc
      001055 74 80            [12] 3270 	mov	a,#0x80
      001057 C0 E0            [24] 3271 	push	acc
      001059 74r31            [12] 3272 	mov	a,#___str_41
      00105B C0 E0            [24] 3273 	push	acc
      00105D 74s05            [12] 3274 	mov	a,#(___str_41 >> 8)
      00105F C0 E0            [24] 3275 	push	acc
      001061 74 80            [12] 3276 	mov	a,#0x80
      001063 C0 E0            [24] 3277 	push	acc
      001065 12r00r00         [24] 3278 	lcall	_printf
      001068 E5 81            [12] 3279 	mov	a,sp
      00106A 24 FA            [12] 3280 	add	a,#0xfa
      00106C F5 81            [12] 3281 	mov	sp,a
      00106E 74r42            [12] 3282 	mov	a,#___str_2
      001070 C0 E0            [24] 3283 	push	acc
      001072 74s00            [12] 3284 	mov	a,#(___str_2 >> 8)
      001074 C0 E0            [24] 3285 	push	acc
      001076 12r00r00         [24] 3286 	lcall	_printf_tiny
      001079 15 81            [12] 3287 	dec	sp
      00107B 15 81            [12] 3288 	dec	sp
                                   3289 ;	src/maxhub.c:741: break;
      00107D 02r11r35         [24] 3290 	ljmp	00120$
                                   3291 ;	src/maxhub.c:742: case NOT_READY:
      001080                       3292 00116$:
                                   3293 ;	src/maxhub.c:743: INFO_LOG("%s: Finger Status = NOT_READY", __func__);
      001080 74r8D            [12] 3294 	mov	a,#___str_34
      001082 C0 E0            [24] 3295 	push	acc
      001084 74s04            [12] 3296 	mov	a,#(___str_34 >> 8)
      001086 C0 E0            [24] 3297 	push	acc
      001088 74 80            [12] 3298 	mov	a,#0x80
      00108A C0 E0            [24] 3299 	push	acc
      00108C 74r5D            [12] 3300 	mov	a,#___str_42
      00108E C0 E0            [24] 3301 	push	acc
      001090 74s05            [12] 3302 	mov	a,#(___str_42 >> 8)
      001092 C0 E0            [24] 3303 	push	acc
      001094 74 80            [12] 3304 	mov	a,#0x80
      001096 C0 E0            [24] 3305 	push	acc
      001098 12r00r00         [24] 3306 	lcall	_printf
      00109B E5 81            [12] 3307 	mov	a,sp
      00109D 24 FA            [12] 3308 	add	a,#0xfa
      00109F F5 81            [12] 3309 	mov	sp,a
      0010A1 74r42            [12] 3310 	mov	a,#___str_2
      0010A3 C0 E0            [24] 3311 	push	acc
      0010A5 74s00            [12] 3312 	mov	a,#(___str_2 >> 8)
      0010A7 C0 E0            [24] 3313 	push	acc
      0010A9 12r00r00         [24] 3314 	lcall	_printf_tiny
      0010AC 15 81            [12] 3315 	dec	sp
      0010AE 15 81            [12] 3316 	dec	sp
                                   3317 ;	src/maxhub.c:744: break;
      0010B0 02r11r35         [24] 3318 	ljmp	00120$
                                   3319 ;	src/maxhub.c:745: case OBJECT_DETECTED:
      0010B3                       3320 00117$:
                                   3321 ;	src/maxhub.c:746: INFO_LOG("%s: Finger Status = OBJECT_DETECTED", __func__);
      0010B3 74r8D            [12] 3322 	mov	a,#___str_34
      0010B5 C0 E0            [24] 3323 	push	acc
      0010B7 74s04            [12] 3324 	mov	a,#(___str_34 >> 8)
      0010B9 C0 E0            [24] 3325 	push	acc
      0010BB 74 80            [12] 3326 	mov	a,#0x80
      0010BD C0 E0            [24] 3327 	push	acc
      0010BF 74r88            [12] 3328 	mov	a,#___str_43
      0010C1 C0 E0            [24] 3329 	push	acc
      0010C3 74s05            [12] 3330 	mov	a,#(___str_43 >> 8)
      0010C5 C0 E0            [24] 3331 	push	acc
      0010C7 74 80            [12] 3332 	mov	a,#0x80
      0010C9 C0 E0            [24] 3333 	push	acc
      0010CB 12r00r00         [24] 3334 	lcall	_printf
      0010CE E5 81            [12] 3335 	mov	a,sp
      0010D0 24 FA            [12] 3336 	add	a,#0xfa
      0010D2 F5 81            [12] 3337 	mov	sp,a
      0010D4 74r42            [12] 3338 	mov	a,#___str_2
      0010D6 C0 E0            [24] 3339 	push	acc
      0010D8 74s00            [12] 3340 	mov	a,#(___str_2 >> 8)
      0010DA C0 E0            [24] 3341 	push	acc
      0010DC 12r00r00         [24] 3342 	lcall	_printf_tiny
      0010DF 15 81            [12] 3343 	dec	sp
      0010E1 15 81            [12] 3344 	dec	sp
                                   3345 ;	src/maxhub.c:747: break;
                                   3346 ;	src/maxhub.c:748: case FINGER_DETECTED:
      0010E3 80 50            [24] 3347 	sjmp	00120$
      0010E5                       3348 00118$:
                                   3349 ;	src/maxhub.c:749: INFO_LOG("%s: Finger Status = FINGER_DETECTED", __func__);
      0010E5 74r8D            [12] 3350 	mov	a,#___str_34
      0010E7 C0 E0            [24] 3351 	push	acc
      0010E9 74s04            [12] 3352 	mov	a,#(___str_34 >> 8)
      0010EB C0 E0            [24] 3353 	push	acc
      0010ED 74 80            [12] 3354 	mov	a,#0x80
      0010EF C0 E0            [24] 3355 	push	acc
      0010F1 74rB9            [12] 3356 	mov	a,#___str_44
      0010F3 C0 E0            [24] 3357 	push	acc
      0010F5 74s05            [12] 3358 	mov	a,#(___str_44 >> 8)
      0010F7 C0 E0            [24] 3359 	push	acc
      0010F9 74 80            [12] 3360 	mov	a,#0x80
      0010FB C0 E0            [24] 3361 	push	acc
      0010FD 12r00r00         [24] 3362 	lcall	_printf
      001100 E5 81            [12] 3363 	mov	a,sp
      001102 24 FA            [12] 3364 	add	a,#0xfa
      001104 F5 81            [12] 3365 	mov	sp,a
      001106 74r42            [12] 3366 	mov	a,#___str_2
      001108 C0 E0            [24] 3367 	push	acc
      00110A 74s00            [12] 3368 	mov	a,#(___str_2 >> 8)
      00110C C0 E0            [24] 3369 	push	acc
      00110E 12r00r00         [24] 3370 	lcall	_printf_tiny
      001111 15 81            [12] 3371 	dec	sp
      001113 15 81            [12] 3372 	dec	sp
                                   3373 ;	src/maxhub.c:750: break;
                                   3374 ;	src/maxhub.c:751: default:
      001115 80 1E            [24] 3375 	sjmp	00120$
      001117                       3376 00119$:
                                   3377 ;	src/maxhub.c:752: ERROR_LOG("Unknown case!");
      001117 74rEA            [12] 3378 	mov	a,#___str_45
      001119 C0 E0            [24] 3379 	push	acc
      00111B 74s05            [12] 3380 	mov	a,#(___str_45 >> 8)
      00111D C0 E0            [24] 3381 	push	acc
      00111F 12r00r00         [24] 3382 	lcall	_printf_tiny
      001122 15 81            [12] 3383 	dec	sp
      001124 15 81            [12] 3384 	dec	sp
      001126 74r42            [12] 3385 	mov	a,#___str_2
      001128 C0 E0            [24] 3386 	push	acc
      00112A 74s00            [12] 3387 	mov	a,#(___str_2 >> 8)
      00112C C0 E0            [24] 3388 	push	acc
      00112E 12r00r00         [24] 3389 	lcall	_printf_tiny
      001131 15 81            [12] 3390 	dec	sp
      001133 15 81            [12] 3391 	dec	sp
                                   3392 ;	src/maxhub.c:753: }
      001135                       3393 00120$:
                                   3394 ;	src/maxhub.c:755: return SUCCESS;
      001135 90 00 00         [24] 3395 	mov	dptr,#0x0000
                                   3396 ;	src/maxhub.c:756: }
      001138 22               [24] 3397 	ret
                                   3398 ;------------------------------------------------------------
                                   3399 ;Allocation info for local variables in function 'readSensorBpm'
                                   3400 ;------------------------------------------------------------
                                   3401 ;sloc0                     Allocated with name '_readSensorBpm_sloc0_1_0'
                                   3402 ;sloc1                     Allocated with name '_readSensorBpm_sloc1_1_0'
                                   3403 ;sloc2                     Allocated with name '_readSensorBpm_sloc2_1_0'
                                   3404 ;sloc3                     Allocated with name '_readSensorBpm_sloc3_1_0'
                                   3405 ;data                      Allocated with name '_readSensorBpm_PARM_2'
                                   3406 ;mode                      Allocated with name '_readSensorBpm_mode_65536_140'
                                   3407 ;hubStatus                 Allocated with name '_readSensorBpm_hubStatus_65536_141'
                                   3408 ;numSamples                Allocated with name '_readSensorBpm_numSamples_65537_143'
                                   3409 ;statusByte                Allocated with name '_readSensorBpm_statusByte_65538_145'
                                   3410 ;sensorData                Allocated with name '_readSensorBpm_sensorData_65538_145'
                                   3411 ;irLed                     Allocated with name '_readSensorBpm_irLed_65539_149'
                                   3412 ;redLed                    Allocated with name '_readSensorBpm_redLed_65540_150'
                                   3413 ;heartRate                 Allocated with name '_readSensorBpm_heartRate_65541_151'
                                   3414 ;confidence                Allocated with name '_readSensorBpm_confidence_65542_152'
                                   3415 ;oxygen                    Allocated with name '_readSensorBpm_oxygen_65542_152'
                                   3416 ;status                    Allocated with name '_readSensorBpm_status_65543_153'
                                   3417 ;temp                      Allocated with name '_readSensorBpm_temp_131079_154'
                                   3418 ;rValue                    Allocated with name '_readSensorBpm_rValue_131080_155'
                                   3419 ;extStatus                 Allocated with name '_readSensorBpm_extStatus_131081_156'
                                   3420 ;------------------------------------------------------------
                                   3421 ;	src/maxhub.c:765: int readSensorBpm(uint8_t mode, BioData *data)
                                   3422 ;	-----------------------------------------
                                   3423 ;	 function readSensorBpm
                                   3424 ;	-----------------------------------------
      001139                       3425 _readSensorBpm:
      001139 E5 82            [12] 3426 	mov	a,dpl
      00113B 90r00r35         [24] 3427 	mov	dptr,#_readSensorBpm_mode_65536_140
      00113E F0               [24] 3428 	movx	@dptr,a
                                   3429 ;	src/maxhub.c:767: uint8_t hubStatus = readSensorHubStatus();
      00113F 12r07rC8         [24] 3430 	lcall	_readSensorHubStatus
      001142 AF 82            [24] 3431 	mov	r7,dpl
                                   3432 ;	src/maxhub.c:768: if (hubStatus == 1)
      001144 BF 01 38         [24] 3433 	cjne	r7,#0x01,00102$
                                   3434 ;	src/maxhub.c:770: ERROR_LOG("%s: Hub Status Error : %d", __func__, hubStatus);
      001147 8F 05            [24] 3435 	mov	ar5,r7
      001149 7E 00            [12] 3436 	mov	r6,#0x00
      00114B C0 05            [24] 3437 	push	ar5
      00114D C0 06            [24] 3438 	push	ar6
      00114F 74r08            [12] 3439 	mov	a,#___str_46
      001151 C0 E0            [24] 3440 	push	acc
      001153 74s06            [12] 3441 	mov	a,#(___str_46 >> 8)
      001155 C0 E0            [24] 3442 	push	acc
      001157 74 80            [12] 3443 	mov	a,#0x80
      001159 C0 E0            [24] 3444 	push	acc
      00115B 74r63            [12] 3445 	mov	a,#___str_33
      00115D C0 E0            [24] 3446 	push	acc
      00115F 74s04            [12] 3447 	mov	a,#(___str_33 >> 8)
      001161 C0 E0            [24] 3448 	push	acc
      001163 12r00r00         [24] 3449 	lcall	_printf_tiny
      001166 E5 81            [12] 3450 	mov	a,sp
      001168 24 F9            [12] 3451 	add	a,#0xf9
      00116A F5 81            [12] 3452 	mov	sp,a
      00116C 74r42            [12] 3453 	mov	a,#___str_2
      00116E C0 E0            [24] 3454 	push	acc
      001170 74s00            [12] 3455 	mov	a,#(___str_2 >> 8)
      001172 C0 E0            [24] 3456 	push	acc
      001174 12r00r00         [24] 3457 	lcall	_printf_tiny
      001177 15 81            [12] 3458 	dec	sp
      001179 15 81            [12] 3459 	dec	sp
                                   3460 ;	src/maxhub.c:771: return FAIL;
      00117B 90 FF FF         [24] 3461 	mov	dptr,#0xffff
      00117E 22               [24] 3462 	ret
      00117F                       3463 00102$:
                                   3464 ;	src/maxhub.c:774: INFO_LOG("Hub Status = %d", hubStatus);
      00117F 7E 00            [12] 3465 	mov	r6,#0x00
      001181 C0 07            [24] 3466 	push	ar7
      001183 C0 06            [24] 3467 	push	ar6
      001185 74r16            [12] 3468 	mov	a,#___str_47
      001187 C0 E0            [24] 3469 	push	acc
      001189 74s06            [12] 3470 	mov	a,#(___str_47 >> 8)
      00118B C0 E0            [24] 3471 	push	acc
      00118D 74 80            [12] 3472 	mov	a,#0x80
      00118F C0 E0            [24] 3473 	push	acc
      001191 12r00r00         [24] 3474 	lcall	_printf
      001194 E5 81            [12] 3475 	mov	a,sp
      001196 24 FB            [12] 3476 	add	a,#0xfb
      001198 F5 81            [12] 3477 	mov	sp,a
      00119A 74r42            [12] 3478 	mov	a,#___str_2
      00119C C0 E0            [24] 3479 	push	acc
      00119E 74s00            [12] 3480 	mov	a,#(___str_2 >> 8)
      0011A0 C0 E0            [24] 3481 	push	acc
      0011A2 12r00r00         [24] 3482 	lcall	_printf_tiny
      0011A5 15 81            [12] 3483 	dec	sp
      0011A7 15 81            [12] 3484 	dec	sp
                                   3485 ;	src/maxhub.c:776: uint8_t numSamples = numSamplesOutFifo();
      0011A9 12r0CrB3         [24] 3486 	lcall	_numSamplesOutFifo
      0011AC AF 82            [24] 3487 	mov	r7,dpl
                                   3488 ;	src/maxhub.c:777: if (numSamplesOutFifo() == 0)
      0011AE C0 07            [24] 3489 	push	ar7
      0011B0 12r0CrB3         [24] 3490 	lcall	_numSamplesOutFifo
      0011B3 E5 82            [12] 3491 	mov	a,dpl
      0011B5 D0 07            [24] 3492 	pop	ar7
      0011B7 70 34            [24] 3493 	jnz	00104$
                                   3494 ;	src/maxhub.c:779: INFO_LOG("%s: No samples to read", __func__);
      0011B9 74r08            [12] 3495 	mov	a,#___str_46
      0011BB C0 E0            [24] 3496 	push	acc
      0011BD 74s06            [12] 3497 	mov	a,#(___str_46 >> 8)
      0011BF C0 E0            [24] 3498 	push	acc
      0011C1 74 80            [12] 3499 	mov	a,#0x80
      0011C3 C0 E0            [24] 3500 	push	acc
      0011C5 74rD0            [12] 3501 	mov	a,#___str_37
      0011C7 C0 E0            [24] 3502 	push	acc
      0011C9 74s04            [12] 3503 	mov	a,#(___str_37 >> 8)
      0011CB C0 E0            [24] 3504 	push	acc
      0011CD 74 80            [12] 3505 	mov	a,#0x80
      0011CF C0 E0            [24] 3506 	push	acc
      0011D1 12r00r00         [24] 3507 	lcall	_printf
      0011D4 E5 81            [12] 3508 	mov	a,sp
      0011D6 24 FA            [12] 3509 	add	a,#0xfa
      0011D8 F5 81            [12] 3510 	mov	sp,a
      0011DA 74r42            [12] 3511 	mov	a,#___str_2
      0011DC C0 E0            [24] 3512 	push	acc
      0011DE 74s00            [12] 3513 	mov	a,#(___str_2 >> 8)
      0011E0 C0 E0            [24] 3514 	push	acc
      0011E2 12r00r00         [24] 3515 	lcall	_printf_tiny
      0011E5 15 81            [12] 3516 	dec	sp
      0011E7 15 81            [12] 3517 	dec	sp
                                   3518 ;	src/maxhub.c:780: return FAIL;
      0011E9 90 FF FF         [24] 3519 	mov	dptr,#0xffff
      0011EC 22               [24] 3520 	ret
      0011ED                       3521 00104$:
                                   3522 ;	src/maxhub.c:783: INFO_LOG("Num Samples = %d", numSamples);
      0011ED 7E 00            [12] 3523 	mov	r6,#0x00
      0011EF C0 07            [24] 3524 	push	ar7
      0011F1 C0 06            [24] 3525 	push	ar6
      0011F3 74r33            [12] 3526 	mov	a,#___str_48
      0011F5 C0 E0            [24] 3527 	push	acc
      0011F7 74s06            [12] 3528 	mov	a,#(___str_48 >> 8)
      0011F9 C0 E0            [24] 3529 	push	acc
      0011FB 74 80            [12] 3530 	mov	a,#0x80
      0011FD C0 E0            [24] 3531 	push	acc
      0011FF 12r00r00         [24] 3532 	lcall	_printf
      001202 E5 81            [12] 3533 	mov	a,sp
      001204 24 FB            [12] 3534 	add	a,#0xfb
      001206 F5 81            [12] 3535 	mov	sp,a
      001208 74r42            [12] 3536 	mov	a,#___str_2
      00120A C0 E0            [24] 3537 	push	acc
      00120C 74s00            [12] 3538 	mov	a,#(___str_2 >> 8)
      00120E C0 E0            [24] 3539 	push	acc
      001210 12r00r00         [24] 3540 	lcall	_printf_tiny
      001213 15 81            [12] 3541 	dec	sp
      001215 15 81            [12] 3542 	dec	sp
                                   3543 ;	src/maxhub.c:787: if (mode == 1)
      001217 90r00r35         [24] 3544 	mov	dptr,#_readSensorBpm_mode_65536_140
      00121A E0               [24] 3545 	movx	a,@dptr
      00121B FF               [12] 3546 	mov	r7,a
      00121C BF 01 2E         [24] 3547 	cjne	r7,#0x01,00108$
                                   3548 ;	src/maxhub.c:789: statusByte = i2cMax32664SequentialReadByte(READ_DATA_OUTPUT, READ_DATA, sensorData, MAXFAST_ARRAY_SIZE + MAX30101_LED_ARRAY);
      00121F 90r00r0F         [24] 3549 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_2
      001222 74 01            [12] 3550 	mov	a,#0x01
      001224 F0               [24] 3551 	movx	@dptr,a
      001225 90r00r10         [24] 3552 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_3
      001228 74r38            [12] 3553 	mov	a,#_readSensorBpm_sensorData_65538_145
      00122A F0               [24] 3554 	movx	@dptr,a
      00122B 74s00            [12] 3555 	mov	a,#(_readSensorBpm_sensorData_65538_145 >> 8)
      00122D A3               [24] 3556 	inc	dptr
      00122E F0               [24] 3557 	movx	@dptr,a
      00122F E4               [12] 3558 	clr	a
      001230 A3               [24] 3559 	inc	dptr
      001231 F0               [24] 3560 	movx	@dptr,a
      001232 90r00r13         [24] 3561 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_4
      001235 74 12            [12] 3562 	mov	a,#0x12
      001237 F0               [24] 3563 	movx	@dptr,a
      001238 75 82 12         [24] 3564 	mov	dpl,#0x12
      00123B 12r04r34         [24] 3565 	lcall	_i2cMax32664SequentialReadByte
      00123E E5 82            [12] 3566 	mov	a,dpl
      001240 85 83 F0         [24] 3567 	mov	b,dph
      001243 90r00r36         [24] 3568 	mov	dptr,#_readSensorBpm_statusByte_65538_145
      001246 F0               [24] 3569 	movx	@dptr,a
      001247 E5 F0            [12] 3570 	mov	a,b
      001249 A3               [24] 3571 	inc	dptr
      00124A F0               [24] 3572 	movx	@dptr,a
      00124B 80 2F            [24] 3573 	sjmp	00109$
      00124D                       3574 00108$:
                                   3575 ;	src/maxhub.c:798: else if (mode == 2)
      00124D BF 02 2C         [24] 3576 	cjne	r7,#0x02,00109$
                                   3577 ;	src/maxhub.c:800: statusByte = i2cMax32664SequentialReadByte(READ_DATA_OUTPUT, READ_DATA, sensorData, MAXFAST_ARRAY_SIZE + MAX30101_LED_ARRAY + MAXFAST_EXTENDED_DATA);
      001250 90r00r0F         [24] 3578 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_2
      001253 74 01            [12] 3579 	mov	a,#0x01
      001255 F0               [24] 3580 	movx	@dptr,a
      001256 90r00r10         [24] 3581 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_3
      001259 74r38            [12] 3582 	mov	a,#_readSensorBpm_sensorData_65538_145
      00125B F0               [24] 3583 	movx	@dptr,a
      00125C 74s00            [12] 3584 	mov	a,#(_readSensorBpm_sensorData_65538_145 >> 8)
      00125E A3               [24] 3585 	inc	dptr
      00125F F0               [24] 3586 	movx	@dptr,a
      001260 E4               [12] 3587 	clr	a
      001261 A3               [24] 3588 	inc	dptr
      001262 F0               [24] 3589 	movx	@dptr,a
      001263 90r00r13         [24] 3590 	mov	dptr,#_i2cMax32664SequentialReadByte_PARM_4
      001266 74 17            [12] 3591 	mov	a,#0x17
      001268 F0               [24] 3592 	movx	@dptr,a
      001269 75 82 12         [24] 3593 	mov	dpl,#0x12
      00126C 12r04r34         [24] 3594 	lcall	_i2cMax32664SequentialReadByte
      00126F E5 82            [12] 3595 	mov	a,dpl
      001271 85 83 F0         [24] 3596 	mov	b,dph
      001274 90r00r36         [24] 3597 	mov	dptr,#_readSensorBpm_statusByte_65538_145
      001277 F0               [24] 3598 	movx	@dptr,a
      001278 E5 F0            [12] 3599 	mov	a,b
      00127A A3               [24] 3600 	inc	dptr
      00127B F0               [24] 3601 	movx	@dptr,a
      00127C                       3602 00109$:
                                   3603 ;	src/maxhub.c:803: if (statusByte != SFE_BIO_SUCCESS)
      00127C 90r00r36         [24] 3604 	mov	dptr,#_readSensorBpm_statusByte_65538_145
      00127F E0               [24] 3605 	movx	a,@dptr
      001280 F5 F0            [12] 3606 	mov	b,a
      001282 A3               [24] 3607 	inc	dptr
      001283 E0               [24] 3608 	movx	a,@dptr
      001284 45 F0            [12] 3609 	orl	a,b
      001286 60 3A            [24] 3610 	jz	00111$
                                   3611 ;	src/maxhub.c:805: ERROR_LOG("%s: Status Error : %d", __func__, statusByte);
      001288 90r00r36         [24] 3612 	mov	dptr,#_readSensorBpm_statusByte_65538_145
      00128B E0               [24] 3613 	movx	a,@dptr
      00128C C0 E0            [24] 3614 	push	acc
      00128E A3               [24] 3615 	inc	dptr
      00128F E0               [24] 3616 	movx	a,@dptr
      001290 C0 E0            [24] 3617 	push	acc
      001292 74r08            [12] 3618 	mov	a,#___str_46
      001294 C0 E0            [24] 3619 	push	acc
      001296 74s06            [12] 3620 	mov	a,#(___str_46 >> 8)
      001298 C0 E0            [24] 3621 	push	acc
      00129A 74 80            [12] 3622 	mov	a,#0x80
      00129C C0 E0            [24] 3623 	push	acc
      00129E 74r0B            [12] 3624 	mov	a,#___str_40
      0012A0 C0 E0            [24] 3625 	push	acc
      0012A2 74s05            [12] 3626 	mov	a,#(___str_40 >> 8)
      0012A4 C0 E0            [24] 3627 	push	acc
      0012A6 12r00r00         [24] 3628 	lcall	_printf_tiny
      0012A9 E5 81            [12] 3629 	mov	a,sp
      0012AB 24 F9            [12] 3630 	add	a,#0xf9
      0012AD F5 81            [12] 3631 	mov	sp,a
      0012AF 74r42            [12] 3632 	mov	a,#___str_2
      0012B1 C0 E0            [24] 3633 	push	acc
      0012B3 74s00            [12] 3634 	mov	a,#(___str_2 >> 8)
      0012B5 C0 E0            [24] 3635 	push	acc
      0012B7 12r00r00         [24] 3636 	lcall	_printf_tiny
      0012BA 15 81            [12] 3637 	dec	sp
      0012BC 15 81            [12] 3638 	dec	sp
                                   3639 ;	src/maxhub.c:806: return FAIL;
      0012BE 90 FF FF         [24] 3640 	mov	dptr,#0xffff
      0012C1 22               [24] 3641 	ret
      0012C2                       3642 00111$:
                                   3643 ;	src/maxhub.c:810: uint32_t irLed = sensorData[0];
      0012C2 90r00r38         [24] 3644 	mov	dptr,#_readSensorBpm_sensorData_65538_145
      0012C5 E0               [24] 3645 	movx	a,@dptr
      0012C6 FF               [12] 3646 	mov	r7,a
      0012C7 7E 00            [12] 3647 	mov	r6,#0x00
      0012C9 7D 00            [12] 3648 	mov	r5,#0x00
                                   3649 ;	src/maxhub.c:811: irLed = (irLed << 8) | sensorData[1];
      0012CB 8D 04            [24] 3650 	mov	ar4,r5
      0012CD 8E 05            [24] 3651 	mov	ar5,r6
      0012CF 8F 06            [24] 3652 	mov	ar6,r7
      0012D1 7F 00            [12] 3653 	mov	r7,#0x00
      0012D3 90r00r39         [24] 3654 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x0001)
      0012D6 E0               [24] 3655 	movx	a,@dptr
      0012D7 F8               [12] 3656 	mov	r0,a
      0012D8 E4               [12] 3657 	clr	a
      0012D9 F9               [12] 3658 	mov	r1,a
      0012DA FA               [12] 3659 	mov	r2,a
      0012DB FB               [12] 3660 	mov	r3,a
      0012DC E8               [12] 3661 	mov	a,r0
      0012DD 42 07            [12] 3662 	orl	ar7,a
      0012DF E9               [12] 3663 	mov	a,r1
      0012E0 42 06            [12] 3664 	orl	ar6,a
      0012E2 EA               [12] 3665 	mov	a,r2
      0012E3 42 05            [12] 3666 	orl	ar5,a
      0012E5 EB               [12] 3667 	mov	a,r3
      0012E6 42 04            [12] 3668 	orl	ar4,a
                                   3669 ;	src/maxhub.c:812: irLed = (irLed << 8) | sensorData[2];
      0012E8 8D 04            [24] 3670 	mov	ar4,r5
      0012EA 8E 05            [24] 3671 	mov	ar5,r6
      0012EC 8F 06            [24] 3672 	mov	ar6,r7
      0012EE 7F 00            [12] 3673 	mov	r7,#0x00
      0012F0 90r00r3A         [24] 3674 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x0002)
      0012F3 E0               [24] 3675 	movx	a,@dptr
      0012F4 F8               [12] 3676 	mov	r0,a
      0012F5 E4               [12] 3677 	clr	a
      0012F6 F9               [12] 3678 	mov	r1,a
      0012F7 FA               [12] 3679 	mov	r2,a
      0012F8 FB               [12] 3680 	mov	r3,a
      0012F9 E8               [12] 3681 	mov	a,r0
      0012FA 42 07            [12] 3682 	orl	ar7,a
      0012FC E9               [12] 3683 	mov	a,r1
      0012FD 42 06            [12] 3684 	orl	ar6,a
      0012FF EA               [12] 3685 	mov	a,r2
      001300 42 05            [12] 3686 	orl	ar5,a
      001302 EB               [12] 3687 	mov	a,r3
      001303 42 04            [12] 3688 	orl	ar4,a
                                   3689 ;	src/maxhub.c:817: redLed = (irLed << 8) | sensorData[5];
      001305 8D*07            [24] 3690 	mov	(_readSensorBpm_sloc0_1_0 + 3),r5
      001307 8E*06            [24] 3691 	mov	(_readSensorBpm_sloc0_1_0 + 2),r6
      001309 8F*05            [24] 3692 	mov	(_readSensorBpm_sloc0_1_0 + 1),r7
      00130B 75*04 00         [24] 3693 	mov	_readSensorBpm_sloc0_1_0,#0x00
      00130E 90r00r3D         [24] 3694 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x0005)
      001311 E0               [24] 3695 	movx	a,@dptr
      001312 F8               [12] 3696 	mov	r0,a
      001313 E4               [12] 3697 	clr	a
      001314 F9               [12] 3698 	mov	r1,a
      001315 FA               [12] 3699 	mov	r2,a
      001316 FB               [12] 3700 	mov	r3,a
      001317 E8               [12] 3701 	mov	a,r0
      001318 42*04            [12] 3702 	orl	_readSensorBpm_sloc0_1_0,a
      00131A E9               [12] 3703 	mov	a,r1
      00131B 42*05            [12] 3704 	orl	(_readSensorBpm_sloc0_1_0 + 1),a
      00131D EA               [12] 3705 	mov	a,r2
      00131E 42*06            [12] 3706 	orl	(_readSensorBpm_sloc0_1_0 + 2),a
      001320 EB               [12] 3707 	mov	a,r3
      001321 42*07            [12] 3708 	orl	(_readSensorBpm_sloc0_1_0 + 3),a
                                   3709 ;	src/maxhub.c:825: uint16_t heartRate = sensorData[12];
      001323 90r00r44         [24] 3710 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x000c)
      001326 E0               [24] 3711 	movx	a,@dptr
                                   3712 ;	src/maxhub.c:826: heartRate = (heartRate << 8) | (sensorData[13]);
      001327 FA               [12] 3713 	mov	r2,a
      001328 7B 00            [12] 3714 	mov	r3,#0x00
      00132A 90r00r45         [24] 3715 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x000d)
      00132D E0               [24] 3716 	movx	a,@dptr
      00132E 79 00            [12] 3717 	mov	r1,#0x00
      001330 42 03            [12] 3718 	orl	ar3,a
      001332 E9               [12] 3719 	mov	a,r1
      001333 42 02            [12] 3720 	orl	ar2,a
                                   3721 ;	src/maxhub.c:827: heartRate /= 10;
      001335 90r00r00         [24] 3722 	mov	dptr,#__divuint_PARM_2
      001338 74 0A            [12] 3723 	mov	a,#0x0a
      00133A F0               [24] 3724 	movx	@dptr,a
      00133B E4               [12] 3725 	clr	a
      00133C A3               [24] 3726 	inc	dptr
      00133D F0               [24] 3727 	movx	@dptr,a
      00133E 8B 82            [24] 3728 	mov	dpl,r3
      001340 8A 83            [24] 3729 	mov	dph,r2
      001342 C0 07            [24] 3730 	push	ar7
      001344 C0 06            [24] 3731 	push	ar6
      001346 C0 05            [24] 3732 	push	ar5
      001348 C0 04            [24] 3733 	push	ar4
      00134A 12r00r00         [24] 3734 	lcall	__divuint
      00134D AA 82            [24] 3735 	mov	r2,dpl
      00134F AB 83            [24] 3736 	mov	r3,dph
                                   3737 ;	src/maxhub.c:830: uint8_t confidence = sensorData[14];
      001351 90r00r46         [24] 3738 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x000e)
      001354 E0               [24] 3739 	movx	a,@dptr
      001355 F5*08            [12] 3740 	mov	_readSensorBpm_sloc1_1_0,a
                                   3741 ;	src/maxhub.c:833: uint16_t oxygen = sensorData[15];
      001357 90r00r47         [24] 3742 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x000f)
      00135A E0               [24] 3743 	movx	a,@dptr
      00135B F8               [12] 3744 	mov	r0,a
      00135C 79 00            [12] 3745 	mov	r1,#0x00
                                   3746 ;	src/maxhub.c:834: oxygen = (oxygen << 8) | sensorData[16];
      00135E 88*0A            [24] 3747 	mov	(_readSensorBpm_sloc2_1_0 + 1),r0
                                   3748 ;	1-genFromRTrack replaced	mov	_readSensorBpm_sloc2_1_0,#0x00
      001360 89*09            [24] 3749 	mov	_readSensorBpm_sloc2_1_0,r1
      001362 90r00r48         [24] 3750 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x0010)
      001365 E0               [24] 3751 	movx	a,@dptr
      001366 F8               [12] 3752 	mov	r0,a
      001367 79 00            [12] 3753 	mov	r1,#0x00
      001369 E5*09            [12] 3754 	mov	a,_readSensorBpm_sloc2_1_0
      00136B 42 00            [12] 3755 	orl	ar0,a
      00136D E5*0A            [12] 3756 	mov	a,(_readSensorBpm_sloc2_1_0 + 1)
      00136F 42 01            [12] 3757 	orl	ar1,a
                                   3758 ;	src/maxhub.c:835: oxygen /= 10;
      001371 90r00r00         [24] 3759 	mov	dptr,#__divuint_PARM_2
      001374 74 0A            [12] 3760 	mov	a,#0x0a
      001376 F0               [24] 3761 	movx	@dptr,a
      001377 E4               [12] 3762 	clr	a
      001378 A3               [24] 3763 	inc	dptr
      001379 F0               [24] 3764 	movx	@dptr,a
      00137A 88 82            [24] 3765 	mov	dpl,r0
      00137C 89 83            [24] 3766 	mov	dph,r1
      00137E C0 03            [24] 3767 	push	ar3
      001380 C0 02            [24] 3768 	push	ar2
      001382 12r00r00         [24] 3769 	lcall	__divuint
      001385 A8 82            [24] 3770 	mov	r0,dpl
      001387 A9 83            [24] 3771 	mov	r1,dph
      001389 D0 02            [24] 3772 	pop	ar2
      00138B D0 03            [24] 3773 	pop	ar3
      00138D D0 04            [24] 3774 	pop	ar4
      00138F D0 05            [24] 3775 	pop	ar5
      001391 D0 06            [24] 3776 	pop	ar6
      001393 D0 07            [24] 3777 	pop	ar7
                                   3778 ;	src/maxhub.c:838: uint8_t status = sensorData[17];
      001395 90r00r49         [24] 3779 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x0011)
      001398 E0               [24] 3780 	movx	a,@dptr
      001399 F5*09            [12] 3781 	mov	_readSensorBpm_sloc2_1_0,a
                                   3782 ;	src/maxhub.c:840: data->irLed = irLed;
      00139B 90r00r32         [24] 3783 	mov	dptr,#_readSensorBpm_PARM_2
      00139E E0               [24] 3784 	movx	a,@dptr
      00139F F5*0B            [12] 3785 	mov	_readSensorBpm_sloc3_1_0,a
      0013A1 A3               [24] 3786 	inc	dptr
      0013A2 E0               [24] 3787 	movx	a,@dptr
      0013A3 F5*0C            [12] 3788 	mov	(_readSensorBpm_sloc3_1_0 + 1),a
      0013A5 A3               [24] 3789 	inc	dptr
      0013A6 E0               [24] 3790 	movx	a,@dptr
      0013A7 F5*0D            [12] 3791 	mov	(_readSensorBpm_sloc3_1_0 + 2),a
      0013A9 85*0B 82         [24] 3792 	mov	dpl,_readSensorBpm_sloc3_1_0
      0013AC 85*0C 83         [24] 3793 	mov	dph,(_readSensorBpm_sloc3_1_0 + 1)
      0013AF 85*0D F0         [24] 3794 	mov	b,(_readSensorBpm_sloc3_1_0 + 2)
      0013B2 EF               [12] 3795 	mov	a,r7
      0013B3 12r00r00         [24] 3796 	lcall	__gptrput
      0013B6 A3               [24] 3797 	inc	dptr
      0013B7 EE               [12] 3798 	mov	a,r6
      0013B8 12r00r00         [24] 3799 	lcall	__gptrput
      0013BB A3               [24] 3800 	inc	dptr
      0013BC ED               [12] 3801 	mov	a,r5
      0013BD 12r00r00         [24] 3802 	lcall	__gptrput
      0013C0 A3               [24] 3803 	inc	dptr
      0013C1 EC               [12] 3804 	mov	a,r4
      0013C2 12r00r00         [24] 3805 	lcall	__gptrput
                                   3806 ;	src/maxhub.c:841: data->redLed = redLed;
      0013C5 74 04            [12] 3807 	mov	a,#0x04
      0013C7 25*0B            [12] 3808 	add	a,_readSensorBpm_sloc3_1_0
      0013C9 FD               [12] 3809 	mov	r5,a
      0013CA E4               [12] 3810 	clr	a
      0013CB 35*0C            [12] 3811 	addc	a,(_readSensorBpm_sloc3_1_0 + 1)
      0013CD FE               [12] 3812 	mov	r6,a
      0013CE AF*0D            [24] 3813 	mov	r7,(_readSensorBpm_sloc3_1_0 + 2)
      0013D0 8D 82            [24] 3814 	mov	dpl,r5
      0013D2 8E 83            [24] 3815 	mov	dph,r6
      0013D4 8F F0            [24] 3816 	mov	b,r7
      0013D6 E5*04            [12] 3817 	mov	a,_readSensorBpm_sloc0_1_0
      0013D8 12r00r00         [24] 3818 	lcall	__gptrput
      0013DB A3               [24] 3819 	inc	dptr
      0013DC E5*05            [12] 3820 	mov	a,(_readSensorBpm_sloc0_1_0 + 1)
      0013DE 12r00r00         [24] 3821 	lcall	__gptrput
      0013E1 A3               [24] 3822 	inc	dptr
      0013E2 E5*06            [12] 3823 	mov	a,(_readSensorBpm_sloc0_1_0 + 2)
      0013E4 12r00r00         [24] 3824 	lcall	__gptrput
      0013E7 A3               [24] 3825 	inc	dptr
      0013E8 E5*07            [12] 3826 	mov	a,(_readSensorBpm_sloc0_1_0 + 3)
      0013EA 12r00r00         [24] 3827 	lcall	__gptrput
                                   3828 ;	src/maxhub.c:843: data->heartRate = heartRate;
      0013ED 74 08            [12] 3829 	mov	a,#0x08
      0013EF 25*0B            [12] 3830 	add	a,_readSensorBpm_sloc3_1_0
      0013F1 FD               [12] 3831 	mov	r5,a
      0013F2 E4               [12] 3832 	clr	a
      0013F3 35*0C            [12] 3833 	addc	a,(_readSensorBpm_sloc3_1_0 + 1)
      0013F5 FE               [12] 3834 	mov	r6,a
      0013F6 AF*0D            [24] 3835 	mov	r7,(_readSensorBpm_sloc3_1_0 + 2)
      0013F8 8D 82            [24] 3836 	mov	dpl,r5
      0013FA 8E 83            [24] 3837 	mov	dph,r6
      0013FC 8F F0            [24] 3838 	mov	b,r7
      0013FE EA               [12] 3839 	mov	a,r2
      0013FF 12r00r00         [24] 3840 	lcall	__gptrput
      001402 A3               [24] 3841 	inc	dptr
      001403 EB               [12] 3842 	mov	a,r3
      001404 12r00r00         [24] 3843 	lcall	__gptrput
                                   3844 ;	src/maxhub.c:844: data->confidence = confidence;
      001407 74 0A            [12] 3845 	mov	a,#0x0a
      001409 25*0B            [12] 3846 	add	a,_readSensorBpm_sloc3_1_0
      00140B FD               [12] 3847 	mov	r5,a
      00140C E4               [12] 3848 	clr	a
      00140D 35*0C            [12] 3849 	addc	a,(_readSensorBpm_sloc3_1_0 + 1)
      00140F FE               [12] 3850 	mov	r6,a
      001410 AF*0D            [24] 3851 	mov	r7,(_readSensorBpm_sloc3_1_0 + 2)
      001412 8D 82            [24] 3852 	mov	dpl,r5
      001414 8E 83            [24] 3853 	mov	dph,r6
      001416 8F F0            [24] 3854 	mov	b,r7
      001418 E5*08            [12] 3855 	mov	a,_readSensorBpm_sloc1_1_0
      00141A 12r00r00         [24] 3856 	lcall	__gptrput
                                   3857 ;	src/maxhub.c:845: data->oxygen = oxygen;
      00141D 74 0B            [12] 3858 	mov	a,#0x0b
      00141F 25*0B            [12] 3859 	add	a,_readSensorBpm_sloc3_1_0
      001421 FD               [12] 3860 	mov	r5,a
      001422 E4               [12] 3861 	clr	a
      001423 35*0C            [12] 3862 	addc	a,(_readSensorBpm_sloc3_1_0 + 1)
      001425 FE               [12] 3863 	mov	r6,a
      001426 AF*0D            [24] 3864 	mov	r7,(_readSensorBpm_sloc3_1_0 + 2)
      001428 8D 82            [24] 3865 	mov	dpl,r5
      00142A 8E 83            [24] 3866 	mov	dph,r6
      00142C 8F F0            [24] 3867 	mov	b,r7
      00142E E8               [12] 3868 	mov	a,r0
      00142F 12r00r00         [24] 3869 	lcall	__gptrput
      001432 A3               [24] 3870 	inc	dptr
      001433 E9               [12] 3871 	mov	a,r1
      001434 12r00r00         [24] 3872 	lcall	__gptrput
                                   3873 ;	src/maxhub.c:846: data->status = status;
      001437 74 0D            [12] 3874 	mov	a,#0x0d
      001439 25*0B            [12] 3875 	add	a,_readSensorBpm_sloc3_1_0
      00143B FD               [12] 3876 	mov	r5,a
      00143C E4               [12] 3877 	clr	a
      00143D 35*0C            [12] 3878 	addc	a,(_readSensorBpm_sloc3_1_0 + 1)
      00143F FE               [12] 3879 	mov	r6,a
      001440 AF*0D            [24] 3880 	mov	r7,(_readSensorBpm_sloc3_1_0 + 2)
      001442 8D 82            [24] 3881 	mov	dpl,r5
      001444 8E 83            [24] 3882 	mov	dph,r6
      001446 8F F0            [24] 3883 	mov	b,r7
      001448 E5*09            [12] 3884 	mov	a,_readSensorBpm_sloc2_1_0
      00144A 12r00r00         [24] 3885 	lcall	__gptrput
                                   3886 ;	src/maxhub.c:848: if (mode == 2)
      00144D 90r00r35         [24] 3887 	mov	dptr,#_readSensorBpm_mode_65536_140
      001450 E0               [24] 3888 	movx	a,@dptr
      001451 FF               [12] 3889 	mov	r7,a
      001452 BF 02 02         [24] 3890 	cjne	r7,#0x02,00159$
      001455 80 03            [24] 3891 	sjmp	00160$
      001457                       3892 00159$:
      001457 02r14rDC         [24] 3893 	ljmp	00113$
      00145A                       3894 00160$:
                                   3895 ;	src/maxhub.c:851: uint16_t temp = sensorData[18];
      00145A 90r00r4A         [24] 3896 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x0012)
      00145D E0               [24] 3897 	movx	a,@dptr
                                   3898 ;	src/maxhub.c:852: temp = (temp << 8) | sensorData[19];
      00145E FE               [12] 3899 	mov	r6,a
      00145F 7F 00            [12] 3900 	mov	r7,#0x00
      001461 90r00r4B         [24] 3901 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x0013)
      001464 E0               [24] 3902 	movx	a,@dptr
      001465 7C 00            [12] 3903 	mov	r4,#0x00
      001467 42 07            [12] 3904 	orl	ar7,a
      001469 EC               [12] 3905 	mov	a,r4
      00146A 42 06            [12] 3906 	orl	ar6,a
                                   3907 ;	src/maxhub.c:853: float rValue = temp;
      00146C 8F 82            [24] 3908 	mov	dpl,r7
      00146E 8E 83            [24] 3909 	mov	dph,r6
      001470 12r00r00         [24] 3910 	lcall	___uint2fs
      001473 AC 82            [24] 3911 	mov	r4,dpl
      001475 AD 83            [24] 3912 	mov	r5,dph
      001477 AE F0            [24] 3913 	mov	r6,b
      001479 FF               [12] 3914 	mov	r7,a
                                   3915 ;	src/maxhub.c:854: rValue = rValue / 10.0;
      00147A E4               [12] 3916 	clr	a
      00147B C0 E0            [24] 3917 	push	acc
      00147D C0 E0            [24] 3918 	push	acc
      00147F 74 20            [12] 3919 	mov	a,#0x20
      001481 C0 E0            [24] 3920 	push	acc
      001483 74 41            [12] 3921 	mov	a,#0x41
      001485 C0 E0            [24] 3922 	push	acc
                                   3923 ;	src/maxhub.c:857: uint8_t extStatus = sensorData[20];
      001487 8C 82            [24] 3924 	mov	dpl,r4
      001489 8D 83            [24] 3925 	mov	dph,r5
      00148B 8E F0            [24] 3926 	mov	b,r6
      00148D EF               [12] 3927 	mov	a,r7
      00148E 12r00r00         [24] 3928 	lcall	___fsdiv
      001491 AC 82            [24] 3929 	mov	r4,dpl
      001493 AD 83            [24] 3930 	mov	r5,dph
      001495 AE F0            [24] 3931 	mov	r6,b
      001497 FF               [12] 3932 	mov	r7,a
      001498 E5 81            [12] 3933 	mov	a,sp
      00149A 24 FC            [12] 3934 	add	a,#0xfc
      00149C F5 81            [12] 3935 	mov	sp,a
      00149E 90r00r4C         [24] 3936 	mov	dptr,#(_readSensorBpm_sensorData_65538_145 + 0x0014)
      0014A1 E0               [24] 3937 	movx	a,@dptr
      0014A2 FB               [12] 3938 	mov	r3,a
                                   3939 ;	src/maxhub.c:859: data->rValue = rValue;
      0014A3 74 0E            [12] 3940 	mov	a,#0x0e
      0014A5 25*0B            [12] 3941 	add	a,_readSensorBpm_sloc3_1_0
      0014A7 F8               [12] 3942 	mov	r0,a
      0014A8 E4               [12] 3943 	clr	a
      0014A9 35*0C            [12] 3944 	addc	a,(_readSensorBpm_sloc3_1_0 + 1)
      0014AB F9               [12] 3945 	mov	r1,a
      0014AC AA*0D            [24] 3946 	mov	r2,(_readSensorBpm_sloc3_1_0 + 2)
      0014AE 88 82            [24] 3947 	mov	dpl,r0
      0014B0 89 83            [24] 3948 	mov	dph,r1
      0014B2 8A F0            [24] 3949 	mov	b,r2
      0014B4 EC               [12] 3950 	mov	a,r4
      0014B5 12r00r00         [24] 3951 	lcall	__gptrput
      0014B8 A3               [24] 3952 	inc	dptr
      0014B9 ED               [12] 3953 	mov	a,r5
      0014BA 12r00r00         [24] 3954 	lcall	__gptrput
      0014BD A3               [24] 3955 	inc	dptr
      0014BE EE               [12] 3956 	mov	a,r6
      0014BF 12r00r00         [24] 3957 	lcall	__gptrput
      0014C2 A3               [24] 3958 	inc	dptr
      0014C3 EF               [12] 3959 	mov	a,r7
      0014C4 12r00r00         [24] 3960 	lcall	__gptrput
                                   3961 ;	src/maxhub.c:860: data->extStatus = extStatus;
      0014C7 74 12            [12] 3962 	mov	a,#0x12
      0014C9 25*0B            [12] 3963 	add	a,_readSensorBpm_sloc3_1_0
      0014CB FD               [12] 3964 	mov	r5,a
      0014CC E4               [12] 3965 	clr	a
      0014CD 35*0C            [12] 3966 	addc	a,(_readSensorBpm_sloc3_1_0 + 1)
      0014CF FE               [12] 3967 	mov	r6,a
      0014D0 AF*0D            [24] 3968 	mov	r7,(_readSensorBpm_sloc3_1_0 + 2)
      0014D2 8D 82            [24] 3969 	mov	dpl,r5
      0014D4 8E 83            [24] 3970 	mov	dph,r6
      0014D6 8F F0            [24] 3971 	mov	b,r7
      0014D8 EB               [12] 3972 	mov	a,r3
      0014D9 12r00r00         [24] 3973 	lcall	__gptrput
      0014DC                       3974 00113$:
                                   3975 ;	src/maxhub.c:863: switch (status)
      0014DC E5*09            [12] 3976 	mov	a,_readSensorBpm_sloc2_1_0
      0014DE FF               [12] 3977 	mov	r7,a
      0014DF 24 FB            [12] 3978 	add	a,#0xff - 0x04
      0014E1 50 03            [24] 3979 	jnc	00161$
      0014E3 02r15rBC         [24] 3980 	ljmp	00119$
      0014E6                       3981 00161$:
      0014E6 EF               [12] 3982 	mov	a,r7
      0014E7 2F               [12] 3983 	add	a,r7
      0014E8 2F               [12] 3984 	add	a,r7
      0014E9 90r14rED         [24] 3985 	mov	dptr,#00162$
      0014EC 73               [24] 3986 	jmp	@a+dptr
      0014ED                       3987 00162$:
      0014ED 02r14rFC         [24] 3988 	ljmp	00114$
      0014F0 02r15r23         [24] 3989 	ljmp	00115$
      0014F3 02r15r4A         [24] 3990 	ljmp	00116$
      0014F6 02r15r70         [24] 3991 	ljmp	00117$
      0014F9 02r15r96         [24] 3992 	ljmp	00118$
                                   3993 ;	src/maxhub.c:865: case NO_READING:
      0014FC                       3994 00114$:
                                   3995 ;	src/maxhub.c:866: INFO_LOG("NO_READING");
      0014FC 74r51            [12] 3996 	mov	a,#___str_49
      0014FE C0 E0            [24] 3997 	push	acc
      001500 74s06            [12] 3998 	mov	a,#(___str_49 >> 8)
      001502 C0 E0            [24] 3999 	push	acc
      001504 74 80            [12] 4000 	mov	a,#0x80
      001506 C0 E0            [24] 4001 	push	acc
      001508 12r00r00         [24] 4002 	lcall	_printf
      00150B 15 81            [12] 4003 	dec	sp
      00150D 15 81            [12] 4004 	dec	sp
      00150F 15 81            [12] 4005 	dec	sp
      001511 74r42            [12] 4006 	mov	a,#___str_2
      001513 C0 E0            [24] 4007 	push	acc
      001515 74s00            [12] 4008 	mov	a,#(___str_2 >> 8)
      001517 C0 E0            [24] 4009 	push	acc
      001519 12r00r00         [24] 4010 	lcall	_printf_tiny
      00151C 15 81            [12] 4011 	dec	sp
      00151E 15 81            [12] 4012 	dec	sp
                                   4013 ;	src/maxhub.c:867: break;
      001520 02r15rE4         [24] 4014 	ljmp	00120$
                                   4015 ;	src/maxhub.c:868: case NOT_READY:
      001523                       4016 00115$:
                                   4017 ;	src/maxhub.c:869: INFO_LOG("NOT_READY");
      001523 74r69            [12] 4018 	mov	a,#___str_50
      001525 C0 E0            [24] 4019 	push	acc
      001527 74s06            [12] 4020 	mov	a,#(___str_50 >> 8)
      001529 C0 E0            [24] 4021 	push	acc
      00152B 74 80            [12] 4022 	mov	a,#0x80
      00152D C0 E0            [24] 4023 	push	acc
      00152F 12r00r00         [24] 4024 	lcall	_printf
      001532 15 81            [12] 4025 	dec	sp
      001534 15 81            [12] 4026 	dec	sp
      001536 15 81            [12] 4027 	dec	sp
      001538 74r42            [12] 4028 	mov	a,#___str_2
      00153A C0 E0            [24] 4029 	push	acc
      00153C 74s00            [12] 4030 	mov	a,#(___str_2 >> 8)
      00153E C0 E0            [24] 4031 	push	acc
      001540 12r00r00         [24] 4032 	lcall	_printf_tiny
      001543 15 81            [12] 4033 	dec	sp
      001545 15 81            [12] 4034 	dec	sp
                                   4035 ;	src/maxhub.c:870: break;
      001547 02r15rE4         [24] 4036 	ljmp	00120$
                                   4037 ;	src/maxhub.c:871: case OBJECT_DETECTED:
      00154A                       4038 00116$:
                                   4039 ;	src/maxhub.c:872: INFO_LOG("OBJECT_DETECTED");
      00154A 74r80            [12] 4040 	mov	a,#___str_51
      00154C C0 E0            [24] 4041 	push	acc
      00154E 74s06            [12] 4042 	mov	a,#(___str_51 >> 8)
      001550 C0 E0            [24] 4043 	push	acc
      001552 74 80            [12] 4044 	mov	a,#0x80
      001554 C0 E0            [24] 4045 	push	acc
      001556 12r00r00         [24] 4046 	lcall	_printf
      001559 15 81            [12] 4047 	dec	sp
      00155B 15 81            [12] 4048 	dec	sp
      00155D 15 81            [12] 4049 	dec	sp
      00155F 74r42            [12] 4050 	mov	a,#___str_2
      001561 C0 E0            [24] 4051 	push	acc
      001563 74s00            [12] 4052 	mov	a,#(___str_2 >> 8)
      001565 C0 E0            [24] 4053 	push	acc
      001567 12r00r00         [24] 4054 	lcall	_printf_tiny
      00156A 15 81            [12] 4055 	dec	sp
      00156C 15 81            [12] 4056 	dec	sp
                                   4057 ;	src/maxhub.c:873: break;
                                   4058 ;	src/maxhub.c:874: case FINGER_DETECTED:
      00156E 80 74            [24] 4059 	sjmp	00120$
      001570                       4060 00117$:
                                   4061 ;	src/maxhub.c:875: INFO_LOG("FINGER_DETECTED");
      001570 74r9D            [12] 4062 	mov	a,#___str_52
      001572 C0 E0            [24] 4063 	push	acc
      001574 74s06            [12] 4064 	mov	a,#(___str_52 >> 8)
      001576 C0 E0            [24] 4065 	push	acc
      001578 74 80            [12] 4066 	mov	a,#0x80
      00157A C0 E0            [24] 4067 	push	acc
      00157C 12r00r00         [24] 4068 	lcall	_printf
      00157F 15 81            [12] 4069 	dec	sp
      001581 15 81            [12] 4070 	dec	sp
      001583 15 81            [12] 4071 	dec	sp
      001585 74r42            [12] 4072 	mov	a,#___str_2
      001587 C0 E0            [24] 4073 	push	acc
      001589 74s00            [12] 4074 	mov	a,#(___str_2 >> 8)
      00158B C0 E0            [24] 4075 	push	acc
      00158D 12r00r00         [24] 4076 	lcall	_printf_tiny
      001590 15 81            [12] 4077 	dec	sp
      001592 15 81            [12] 4078 	dec	sp
                                   4079 ;	src/maxhub.c:876: break;
                                   4080 ;	src/maxhub.c:877: case PRESSING_TOO_HARD:
      001594 80 4E            [24] 4081 	sjmp	00120$
      001596                       4082 00118$:
                                   4083 ;	src/maxhub.c:878: INFO_LOG("PRESSING_TOO_HARD");
      001596 74rBA            [12] 4084 	mov	a,#___str_53
      001598 C0 E0            [24] 4085 	push	acc
      00159A 74s06            [12] 4086 	mov	a,#(___str_53 >> 8)
      00159C C0 E0            [24] 4087 	push	acc
      00159E 74 80            [12] 4088 	mov	a,#0x80
      0015A0 C0 E0            [24] 4089 	push	acc
      0015A2 12r00r00         [24] 4090 	lcall	_printf
      0015A5 15 81            [12] 4091 	dec	sp
      0015A7 15 81            [12] 4092 	dec	sp
      0015A9 15 81            [12] 4093 	dec	sp
      0015AB 74r42            [12] 4094 	mov	a,#___str_2
      0015AD C0 E0            [24] 4095 	push	acc
      0015AF 74s00            [12] 4096 	mov	a,#(___str_2 >> 8)
      0015B1 C0 E0            [24] 4097 	push	acc
      0015B3 12r00r00         [24] 4098 	lcall	_printf_tiny
      0015B6 15 81            [12] 4099 	dec	sp
      0015B8 15 81            [12] 4100 	dec	sp
                                   4101 ;	src/maxhub.c:879: break;
                                   4102 ;	src/maxhub.c:880: default:
      0015BA 80 28            [24] 4103 	sjmp	00120$
      0015BC                       4104 00119$:
                                   4105 ;	src/maxhub.c:881: ERROR_LOG("UNKNOWN ERROR: %d", status);
      0015BC AE*09            [24] 4106 	mov	r6,_readSensorBpm_sloc2_1_0
      0015BE 7F 00            [12] 4107 	mov	r7,#0x00
      0015C0 C0 06            [24] 4108 	push	ar6
      0015C2 C0 07            [24] 4109 	push	ar7
      0015C4 74rD9            [12] 4110 	mov	a,#___str_54
      0015C6 C0 E0            [24] 4111 	push	acc
      0015C8 74s06            [12] 4112 	mov	a,#(___str_54 >> 8)
      0015CA C0 E0            [24] 4113 	push	acc
      0015CC 12r00r00         [24] 4114 	lcall	_printf_tiny
      0015CF E5 81            [12] 4115 	mov	a,sp
      0015D1 24 FC            [12] 4116 	add	a,#0xfc
      0015D3 F5 81            [12] 4117 	mov	sp,a
      0015D5 74r42            [12] 4118 	mov	a,#___str_2
      0015D7 C0 E0            [24] 4119 	push	acc
      0015D9 74s00            [12] 4120 	mov	a,#(___str_2 >> 8)
      0015DB C0 E0            [24] 4121 	push	acc
      0015DD 12r00r00         [24] 4122 	lcall	_printf_tiny
      0015E0 15 81            [12] 4123 	dec	sp
      0015E2 15 81            [12] 4124 	dec	sp
                                   4125 ;	src/maxhub.c:882: }
      0015E4                       4126 00120$:
                                   4127 ;	src/maxhub.c:884: return SUCCESS;
      0015E4 90 00 00         [24] 4128 	mov	dptr,#0x0000
                                   4129 ;	src/maxhub.c:885: }
      0015E7 22               [24] 4130 	ret
                                   4131 ;------------------------------------------------------------
                                   4132 ;Allocation info for local variables in function 'setPulseWidth'
                                   4133 ;------------------------------------------------------------
                                   4134 ;width                     Allocated with name '_setPulseWidth_width_65536_158'
                                   4135 ;bits                      Allocated with name '_setPulseWidth_bits_65536_159'
                                   4136 ;regVal                    Allocated with name '_setPulseWidth_regVal_65536_159'
                                   4137 ;------------------------------------------------------------
                                   4138 ;	src/maxhub.c:901: int setPulseWidth(uint16_t width)
                                   4139 ;	-----------------------------------------
                                   4140 ;	 function setPulseWidth
                                   4141 ;	-----------------------------------------
      0015E8                       4142 _setPulseWidth:
      0015E8 AF 83            [24] 4143 	mov	r7,dph
      0015EA E5 82            [12] 4144 	mov	a,dpl
      0015EC 90r00r4F         [24] 4145 	mov	dptr,#_setPulseWidth_width_65536_158
      0015EF F0               [24] 4146 	movx	@dptr,a
      0015F0 EF               [12] 4147 	mov	a,r7
      0015F1 A3               [24] 4148 	inc	dptr
      0015F2 F0               [24] 4149 	movx	@dptr,a
                                   4150 ;	src/maxhub.c:908: if (width == 69)
      0015F3 90r00r4F         [24] 4151 	mov	dptr,#_setPulseWidth_width_65536_158
      0015F6 E0               [24] 4152 	movx	a,@dptr
      0015F7 FE               [12] 4153 	mov	r6,a
      0015F8 A3               [24] 4154 	inc	dptr
      0015F9 E0               [24] 4155 	movx	a,@dptr
      0015FA FF               [12] 4156 	mov	r7,a
      0015FB BE 45 0A         [24] 4157 	cjne	r6,#0x45,00111$
      0015FE BF 00 07         [24] 4158 	cjne	r7,#0x00,00111$
                                   4159 ;	src/maxhub.c:909: bits = 0;
      001601 90r00r51         [24] 4160 	mov	dptr,#_setPulseWidth_bits_65536_159
      001604 E4               [12] 4161 	clr	a
      001605 F0               [24] 4162 	movx	@dptr,a
      001606 80 2E            [24] 4163 	sjmp	00112$
      001608                       4164 00111$:
                                   4165 ;	src/maxhub.c:910: else if (width == 118)
      001608 BE 76 0B         [24] 4166 	cjne	r6,#0x76,00108$
      00160B BF 00 08         [24] 4167 	cjne	r7,#0x00,00108$
                                   4168 ;	src/maxhub.c:911: bits = 1;
      00160E 90r00r51         [24] 4169 	mov	dptr,#_setPulseWidth_bits_65536_159
      001611 74 01            [12] 4170 	mov	a,#0x01
      001613 F0               [24] 4171 	movx	@dptr,a
      001614 80 20            [24] 4172 	sjmp	00112$
      001616                       4173 00108$:
                                   4174 ;	src/maxhub.c:912: else if (width == 215)
      001616 BE D7 0B         [24] 4175 	cjne	r6,#0xd7,00105$
      001619 BF 00 08         [24] 4176 	cjne	r7,#0x00,00105$
                                   4177 ;	src/maxhub.c:913: bits = 2;
      00161C 90r00r51         [24] 4178 	mov	dptr,#_setPulseWidth_bits_65536_159
      00161F 74 02            [12] 4179 	mov	a,#0x02
      001621 F0               [24] 4180 	movx	@dptr,a
      001622 80 12            [24] 4181 	sjmp	00112$
      001624                       4182 00105$:
                                   4183 ;	src/maxhub.c:914: else if (width == 411)
      001624 BE 9B 0B         [24] 4184 	cjne	r6,#0x9b,00102$
      001627 BF 01 08         [24] 4185 	cjne	r7,#0x01,00102$
                                   4186 ;	src/maxhub.c:915: bits = 3;
      00162A 90r00r51         [24] 4187 	mov	dptr,#_setPulseWidth_bits_65536_159
      00162D 74 03            [12] 4188 	mov	a,#0x03
      00162F F0               [24] 4189 	movx	@dptr,a
      001630 80 04            [24] 4190 	sjmp	00112$
      001632                       4191 00102$:
                                   4192 ;	src/maxhub.c:917: return FAIL;
      001632 90 FF FF         [24] 4193 	mov	dptr,#0xffff
      001635 22               [24] 4194 	ret
      001636                       4195 00112$:
                                   4196 ;	src/maxhub.c:920: regVal = readRegisterMAX30101(CONFIGURATION_REGISTER);
      001636 75 82 0A         [24] 4197 	mov	dpl,#0x0a
      001639 12r06rBC         [24] 4198 	lcall	_readRegisterMAX30101
      00163C E5 82            [12] 4199 	mov	a,dpl
                                   4200 ;	src/maxhub.c:921: regVal &= PULSE_MASK;                                  // Mask bits to change.
      00163E 54 FC            [12] 4201 	anl	a,#0xfc
      001640 FF               [12] 4202 	mov	r7,a
                                   4203 ;	src/maxhub.c:922: regVal |= bits;                                        // Add bits
      001641 90r00r51         [24] 4204 	mov	dptr,#_setPulseWidth_bits_65536_159
      001644 E0               [24] 4205 	movx	a,@dptr
      001645 90r00r15         [24] 4206 	mov	dptr,#_writeRegisterMAX30101_PARM_2
      001648 4F               [12] 4207 	orl	a,r7
      001649 F0               [24] 4208 	movx	@dptr,a
                                   4209 ;	src/maxhub.c:923: writeRegisterMAX30101(CONFIGURATION_REGISTER, regVal); // Write Register
      00164A 75 82 0A         [24] 4210 	mov	dpl,#0x0a
      00164D 12r06r8A         [24] 4211 	lcall	_writeRegisterMAX30101
                                   4212 ;	src/maxhub.c:925: return SFE_BIO_SUCCESS;
      001650 90 00 00         [24] 4213 	mov	dptr,#0x0000
                                   4214 ;	src/maxhub.c:926: }
      001653 22               [24] 4215 	ret
                                   4216 ;------------------------------------------------------------
                                   4217 ;Allocation info for local variables in function 'setSampleRate'
                                   4218 ;------------------------------------------------------------
                                   4219 ;sampRate                  Allocated with name '_setSampleRate_sampRate_65536_160'
                                   4220 ;bits                      Allocated with name '_setSampleRate_bits_65536_161'
                                   4221 ;regVal                    Allocated with name '_setSampleRate_regVal_65536_161'
                                   4222 ;------------------------------------------------------------
                                   4223 ;	src/maxhub.c:941: int setSampleRate(uint16_t sampRate)
                                   4224 ;	-----------------------------------------
                                   4225 ;	 function setSampleRate
                                   4226 ;	-----------------------------------------
      001654                       4227 _setSampleRate:
      001654 AF 83            [24] 4228 	mov	r7,dph
      001656 E5 82            [12] 4229 	mov	a,dpl
      001658 90r00r52         [24] 4230 	mov	dptr,#_setSampleRate_sampRate_65536_160
      00165B F0               [24] 4231 	movx	@dptr,a
      00165C EF               [12] 4232 	mov	a,r7
      00165D A3               [24] 4233 	inc	dptr
      00165E F0               [24] 4234 	movx	@dptr,a
                                   4235 ;	src/maxhub.c:948: if (sampRate == 50)
      00165F 90r00r52         [24] 4236 	mov	dptr,#_setSampleRate_sampRate_65536_160
      001662 E0               [24] 4237 	movx	a,@dptr
      001663 FE               [12] 4238 	mov	r6,a
      001664 A3               [24] 4239 	inc	dptr
      001665 E0               [24] 4240 	movx	a,@dptr
      001666 FF               [12] 4241 	mov	r7,a
      001667 BE 32 0A         [24] 4242 	cjne	r6,#0x32,00123$
      00166A BF 00 07         [24] 4243 	cjne	r7,#0x00,00123$
                                   4244 ;	src/maxhub.c:949: bits = 0;
      00166D 90r00r54         [24] 4245 	mov	dptr,#_setSampleRate_bits_65536_161
      001670 E4               [12] 4246 	clr	a
      001671 F0               [24] 4247 	movx	@dptr,a
      001672 80 66            [24] 4248 	sjmp	00124$
      001674                       4249 00123$:
                                   4250 ;	src/maxhub.c:950: else if (sampRate == 100)
      001674 BE 64 0B         [24] 4251 	cjne	r6,#0x64,00120$
      001677 BF 00 08         [24] 4252 	cjne	r7,#0x00,00120$
                                   4253 ;	src/maxhub.c:951: bits = 1;
      00167A 90r00r54         [24] 4254 	mov	dptr,#_setSampleRate_bits_65536_161
      00167D 74 01            [12] 4255 	mov	a,#0x01
      00167F F0               [24] 4256 	movx	@dptr,a
      001680 80 58            [24] 4257 	sjmp	00124$
      001682                       4258 00120$:
                                   4259 ;	src/maxhub.c:952: else if (sampRate == 200)
      001682 BE C8 0B         [24] 4260 	cjne	r6,#0xc8,00117$
      001685 BF 00 08         [24] 4261 	cjne	r7,#0x00,00117$
                                   4262 ;	src/maxhub.c:953: bits = 2;
      001688 90r00r54         [24] 4263 	mov	dptr,#_setSampleRate_bits_65536_161
      00168B 74 02            [12] 4264 	mov	a,#0x02
      00168D F0               [24] 4265 	movx	@dptr,a
      00168E 80 4A            [24] 4266 	sjmp	00124$
      001690                       4267 00117$:
                                   4268 ;	src/maxhub.c:954: else if (sampRate == 400)
      001690 BE 90 0B         [24] 4269 	cjne	r6,#0x90,00114$
      001693 BF 01 08         [24] 4270 	cjne	r7,#0x01,00114$
                                   4271 ;	src/maxhub.c:955: bits = 3;
      001696 90r00r54         [24] 4272 	mov	dptr,#_setSampleRate_bits_65536_161
      001699 74 03            [12] 4273 	mov	a,#0x03
      00169B F0               [24] 4274 	movx	@dptr,a
      00169C 80 3C            [24] 4275 	sjmp	00124$
      00169E                       4276 00114$:
                                   4277 ;	src/maxhub.c:956: else if (sampRate == 800)
      00169E BE 20 0B         [24] 4278 	cjne	r6,#0x20,00111$
      0016A1 BF 03 08         [24] 4279 	cjne	r7,#0x03,00111$
                                   4280 ;	src/maxhub.c:957: bits = 4;
      0016A4 90r00r54         [24] 4281 	mov	dptr,#_setSampleRate_bits_65536_161
      0016A7 74 04            [12] 4282 	mov	a,#0x04
      0016A9 F0               [24] 4283 	movx	@dptr,a
      0016AA 80 2E            [24] 4284 	sjmp	00124$
      0016AC                       4285 00111$:
                                   4286 ;	src/maxhub.c:958: else if (sampRate == 1000)
      0016AC BE E8 0B         [24] 4287 	cjne	r6,#0xe8,00108$
      0016AF BF 03 08         [24] 4288 	cjne	r7,#0x03,00108$
                                   4289 ;	src/maxhub.c:959: bits = 5;
      0016B2 90r00r54         [24] 4290 	mov	dptr,#_setSampleRate_bits_65536_161
      0016B5 74 05            [12] 4291 	mov	a,#0x05
      0016B7 F0               [24] 4292 	movx	@dptr,a
      0016B8 80 20            [24] 4293 	sjmp	00124$
      0016BA                       4294 00108$:
                                   4295 ;	src/maxhub.c:960: else if (sampRate == 1600)
      0016BA BE 40 0B         [24] 4296 	cjne	r6,#0x40,00105$
      0016BD BF 06 08         [24] 4297 	cjne	r7,#0x06,00105$
                                   4298 ;	src/maxhub.c:961: bits = 6;
      0016C0 90r00r54         [24] 4299 	mov	dptr,#_setSampleRate_bits_65536_161
      0016C3 74 06            [12] 4300 	mov	a,#0x06
      0016C5 F0               [24] 4301 	movx	@dptr,a
      0016C6 80 12            [24] 4302 	sjmp	00124$
      0016C8                       4303 00105$:
                                   4304 ;	src/maxhub.c:962: else if (sampRate == 3200)
      0016C8 BE 80 0B         [24] 4305 	cjne	r6,#0x80,00102$
      0016CB BF 0C 08         [24] 4306 	cjne	r7,#0x0c,00102$
                                   4307 ;	src/maxhub.c:963: bits = 7;
      0016CE 90r00r54         [24] 4308 	mov	dptr,#_setSampleRate_bits_65536_161
      0016D1 74 07            [12] 4309 	mov	a,#0x07
      0016D3 F0               [24] 4310 	movx	@dptr,a
      0016D4 80 04            [24] 4311 	sjmp	00124$
      0016D6                       4312 00102$:
                                   4313 ;	src/maxhub.c:965: return FAIL;
      0016D6 90 FF FF         [24] 4314 	mov	dptr,#0xffff
      0016D9 22               [24] 4315 	ret
      0016DA                       4316 00124$:
                                   4317 ;	src/maxhub.c:968: regVal = readRegisterMAX30101(CONFIGURATION_REGISTER);
      0016DA 75 82 0A         [24] 4318 	mov	dpl,#0x0a
      0016DD 12r06rBC         [24] 4319 	lcall	_readRegisterMAX30101
      0016E0 E5 82            [12] 4320 	mov	a,dpl
                                   4321 ;	src/maxhub.c:969: regVal &= SAMP_MASK;                                   // Mask bits to change.
      0016E2 54 E3            [12] 4322 	anl	a,#0xe3
      0016E4 FF               [12] 4323 	mov	r7,a
                                   4324 ;	src/maxhub.c:970: regVal |= (bits << 2);                                 // Add bits but shift them first to correct position.
      0016E5 90r00r54         [24] 4325 	mov	dptr,#_setSampleRate_bits_65536_161
      0016E8 E0               [24] 4326 	movx	a,@dptr
      0016E9 25 E0            [12] 4327 	add	a,acc
      0016EB 25 E0            [12] 4328 	add	a,acc
      0016ED 90r00r15         [24] 4329 	mov	dptr,#_writeRegisterMAX30101_PARM_2
      0016F0 4F               [12] 4330 	orl	a,r7
      0016F1 F0               [24] 4331 	movx	@dptr,a
                                   4332 ;	src/maxhub.c:971: writeRegisterMAX30101(CONFIGURATION_REGISTER, regVal); // Write Register
      0016F2 75 82 0A         [24] 4333 	mov	dpl,#0x0a
      0016F5 12r06r8A         [24] 4334 	lcall	_writeRegisterMAX30101
                                   4335 ;	src/maxhub.c:973: return SFE_BIO_SUCCESS;
      0016F8 90 00 00         [24] 4336 	mov	dptr,#0x0000
                                   4337 ;	src/maxhub.c:974: }
      0016FB 22               [24] 4338 	ret
                                   4339 ;------------------------------------------------------------
                                   4340 ;Allocation info for local variables in function 'checkDeviceType'
                                   4341 ;------------------------------------------------------------
                                   4342 ;returnByte                Allocated with name '_checkDeviceType_returnByte_65536_162'
                                   4343 ;------------------------------------------------------------
                                   4344 ;	src/maxhub.c:984: int checkDeviceType()
                                   4345 ;	-----------------------------------------
                                   4346 ;	 function checkDeviceType
                                   4347 ;	-----------------------------------------
      0016FC                       4348 _checkDeviceType:
                                   4349 ;	src/maxhub.c:986: int returnByte = i2cMax32664ReadByte(IDENTITY, READ_MCU_TYPE, NULL);
      0016FC 90r00r0A         [24] 4350 	mov	dptr,#_i2cMax32664ReadByte_PARM_2
      0016FF E4               [12] 4351 	clr	a
      001700 F0               [24] 4352 	movx	@dptr,a
      001701 90r00r0B         [24] 4353 	mov	dptr,#_i2cMax32664ReadByte_PARM_3
      001704 F0               [24] 4354 	movx	@dptr,a
      001705 A3               [24] 4355 	inc	dptr
      001706 F0               [24] 4356 	movx	@dptr,a
      001707 A3               [24] 4357 	inc	dptr
      001708 F0               [24] 4358 	movx	@dptr,a
      001709 75 82 FF         [24] 4359 	mov	dpl,#0xff
      00170C 12r02r73         [24] 4360 	lcall	_i2cMax32664ReadByte
      00170F AE 82            [24] 4361 	mov	r6,dpl
      001711 AF 83            [24] 4362 	mov	r7,dph
                                   4363 ;	src/maxhub.c:987: if (returnByte == FAIL)
      001713 BE FF 25         [24] 4364 	cjne	r6,#0xff,00102$
      001716 BF FF 22         [24] 4365 	cjne	r7,#0xff,00102$
                                   4366 ;	src/maxhub.c:989: ERROR_LOG("Reaed Device Type failed");
      001719 74rFB            [12] 4367 	mov	a,#___str_55
      00171B C0 E0            [24] 4368 	push	acc
      00171D 74s06            [12] 4369 	mov	a,#(___str_55 >> 8)
      00171F C0 E0            [24] 4370 	push	acc
      001721 12r00r00         [24] 4371 	lcall	_printf_tiny
      001724 15 81            [12] 4372 	dec	sp
      001726 15 81            [12] 4373 	dec	sp
      001728 74r42            [12] 4374 	mov	a,#___str_2
      00172A C0 E0            [24] 4375 	push	acc
      00172C 74s00            [12] 4376 	mov	a,#(___str_2 >> 8)
      00172E C0 E0            [24] 4377 	push	acc
      001730 12r00r00         [24] 4378 	lcall	_printf_tiny
      001733 15 81            [12] 4379 	dec	sp
      001735 15 81            [12] 4380 	dec	sp
                                   4381 ;	src/maxhub.c:990: return FAIL;
      001737 90 FF FF         [24] 4382 	mov	dptr,#0xffff
      00173A 22               [24] 4383 	ret
      00173B                       4384 00102$:
                                   4385 ;	src/maxhub.c:994: if (returnByte != 0x01)
      00173B BE 01 05         [24] 4386 	cjne	r6,#0x01,00117$
      00173E BF 00 02         [24] 4387 	cjne	r7,#0x00,00117$
      001741 80 28            [24] 4388 	sjmp	00104$
      001743                       4389 00117$:
                                   4390 ;	src/maxhub.c:996: ERROR_LOG("Device Type %d not expected", returnByte);
      001743 C0 06            [24] 4391 	push	ar6
      001745 C0 07            [24] 4392 	push	ar7
      001747 74r24            [12] 4393 	mov	a,#___str_56
      001749 C0 E0            [24] 4394 	push	acc
      00174B 74s07            [12] 4395 	mov	a,#(___str_56 >> 8)
      00174D C0 E0            [24] 4396 	push	acc
      00174F 12r00r00         [24] 4397 	lcall	_printf_tiny
      001752 E5 81            [12] 4398 	mov	a,sp
      001754 24 FC            [12] 4399 	add	a,#0xfc
      001756 F5 81            [12] 4400 	mov	sp,a
      001758 74r42            [12] 4401 	mov	a,#___str_2
      00175A C0 E0            [24] 4402 	push	acc
      00175C 74s00            [12] 4403 	mov	a,#(___str_2 >> 8)
      00175E C0 E0            [24] 4404 	push	acc
      001760 12r00r00         [24] 4405 	lcall	_printf_tiny
      001763 15 81            [12] 4406 	dec	sp
      001765 15 81            [12] 4407 	dec	sp
                                   4408 ;	src/maxhub.c:997: return FAIL;
      001767 90 FF FF         [24] 4409 	mov	dptr,#0xffff
      00176A 22               [24] 4410 	ret
      00176B                       4411 00104$:
                                   4412 ;	src/maxhub.c:1000: INFO_LOG("Device Type Check Success");
      00176B 74r50            [12] 4413 	mov	a,#___str_57
      00176D C0 E0            [24] 4414 	push	acc
      00176F 74s07            [12] 4415 	mov	a,#(___str_57 >> 8)
      001771 C0 E0            [24] 4416 	push	acc
      001773 74 80            [12] 4417 	mov	a,#0x80
      001775 C0 E0            [24] 4418 	push	acc
      001777 12r00r00         [24] 4419 	lcall	_printf
      00177A 15 81            [12] 4420 	dec	sp
      00177C 15 81            [12] 4421 	dec	sp
      00177E 15 81            [12] 4422 	dec	sp
      001780 74r42            [12] 4423 	mov	a,#___str_2
      001782 C0 E0            [24] 4424 	push	acc
      001784 74s00            [12] 4425 	mov	a,#(___str_2 >> 8)
      001786 C0 E0            [24] 4426 	push	acc
      001788 12r00r00         [24] 4427 	lcall	_printf_tiny
      00178B 15 81            [12] 4428 	dec	sp
      00178D 15 81            [12] 4429 	dec	sp
                                   4430 ;	src/maxhub.c:1001: return SUCCESS;
      00178F 90 00 00         [24] 4431 	mov	dptr,#0x0000
                                   4432 ;	src/maxhub.c:1002: }
      001792 22               [24] 4433 	ret
                                   4434 ;------------------------------------------------------------
                                   4435 ;Allocation info for local variables in function 'lastTest'
                                   4436 ;------------------------------------------------------------
                                   4437 ;status                    Allocated with name '_lastTest_status_65536_165'
                                   4438 ;readVal                   Allocated with name '_lastTest_readVal_131072_166'
                                   4439 ;------------------------------------------------------------
                                   4440 ;	src/maxhub.c:1010: void lastTest()
                                   4441 ;	-----------------------------------------
                                   4442 ;	 function lastTest
                                   4443 ;	-----------------------------------------
      001793                       4444 _lastTest:
                                   4445 ;	src/maxhub.c:1013: int status = i2cMax32664WriteByte(0x10, 0x00, 0x03);
      001793 90r00r07         [24] 4446 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      001796 E4               [12] 4447 	clr	a
      001797 F0               [24] 4448 	movx	@dptr,a
      001798 90r00r08         [24] 4449 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      00179B 74 03            [12] 4450 	mov	a,#0x03
      00179D F0               [24] 4451 	movx	@dptr,a
      00179E 75 82 10         [24] 4452 	mov	dpl,#0x10
      0017A1 12r02r05         [24] 4453 	lcall	_i2cMax32664WriteByte
                                   4454 ;	src/maxhub.c:1016: status = i2cMax32664WriteByte(0x10, 0x01, 0x01);
      0017A4 90r00r07         [24] 4455 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      0017A7 74 01            [12] 4456 	mov	a,#0x01
      0017A9 F0               [24] 4457 	movx	@dptr,a
      0017AA 90r00r08         [24] 4458 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      0017AD F0               [24] 4459 	movx	@dptr,a
      0017AE 75 82 10         [24] 4460 	mov	dpl,#0x10
      0017B1 12r02r05         [24] 4461 	lcall	_i2cMax32664WriteByte
                                   4462 ;	src/maxhub.c:1019: status = i2cMax32664WriteByte(0x44, 0x03, 0x01);
      0017B4 90r00r07         [24] 4463 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      0017B7 74 03            [12] 4464 	mov	a,#0x03
      0017B9 F0               [24] 4465 	movx	@dptr,a
      0017BA 90r00r08         [24] 4466 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      0017BD 74 01            [12] 4467 	mov	a,#0x01
      0017BF F0               [24] 4468 	movx	@dptr,a
      0017C0 75 82 44         [24] 4469 	mov	dpl,#0x44
      0017C3 12r02r05         [24] 4470 	lcall	_i2cMax32664WriteByte
                                   4471 ;	src/maxhub.c:1022: status = i2cMax32664WriteByte(0x52, 0x02, 0x01);
      0017C6 90r00r07         [24] 4472 	mov	dptr,#_i2cMax32664WriteByte_PARM_2
      0017C9 74 02            [12] 4473 	mov	a,#0x02
      0017CB F0               [24] 4474 	movx	@dptr,a
      0017CC 90r00r08         [24] 4475 	mov	dptr,#_i2cMax32664WriteByte_PARM_3
      0017CF 14               [12] 4476 	dec	a
      0017D0 F0               [24] 4477 	movx	@dptr,a
      0017D1 75 82 52         [24] 4478 	mov	dpl,#0x52
      0017D4 12r02r05         [24] 4479 	lcall	_i2cMax32664WriteByte
                                   4480 ;	src/maxhub.c:1025: while(1)
      0017D7                       4481 00102$:
                                   4482 ;	src/maxhub.c:1027: int readVal = i2cMax32664ReadByte(0x00, 0x00, NULL);
      0017D7 90r00r0A         [24] 4483 	mov	dptr,#_i2cMax32664ReadByte_PARM_2
      0017DA E4               [12] 4484 	clr	a
      0017DB F0               [24] 4485 	movx	@dptr,a
      0017DC 90r00r0B         [24] 4486 	mov	dptr,#_i2cMax32664ReadByte_PARM_3
      0017DF F0               [24] 4487 	movx	@dptr,a
      0017E0 A3               [24] 4488 	inc	dptr
      0017E1 F0               [24] 4489 	movx	@dptr,a
      0017E2 A3               [24] 4490 	inc	dptr
      0017E3 F0               [24] 4491 	movx	@dptr,a
      0017E4 75 82 00         [24] 4492 	mov	dpl,#0x00
      0017E7 12r02r73         [24] 4493 	lcall	_i2cMax32664ReadByte
      0017EA AE 82            [24] 4494 	mov	r6,dpl
      0017EC AF 83            [24] 4495 	mov	r7,dph
                                   4496 ;	src/maxhub.c:1028: printf("hub status = %x\n\r", readVal);
      0017EE C0 06            [24] 4497 	push	ar6
      0017F0 C0 07            [24] 4498 	push	ar7
      0017F2 74r77            [12] 4499 	mov	a,#___str_58
      0017F4 C0 E0            [24] 4500 	push	acc
      0017F6 74s07            [12] 4501 	mov	a,#(___str_58 >> 8)
      0017F8 C0 E0            [24] 4502 	push	acc
      0017FA 74 80            [12] 4503 	mov	a,#0x80
      0017FC C0 E0            [24] 4504 	push	acc
      0017FE 12r00r00         [24] 4505 	lcall	_printf
      001801 E5 81            [12] 4506 	mov	a,sp
      001803 24 FB            [12] 4507 	add	a,#0xfb
      001805 F5 81            [12] 4508 	mov	sp,a
                                   4509 ;	src/maxhub.c:1029: hubDelayMs(100);
      001807 75 82 64         [24] 4510 	mov	dpl,#0x64
      00180A 12r00r00         [24] 4511 	lcall	_hubDelayMs
                                   4512 ;	src/maxhub.c:1032: }
      00180D 80 C8            [24] 4513 	sjmp	00102$
                                   4514 ;------------------------------------------------------------
                                   4515 ;Allocation info for local variables in function 'testMaxHub'
                                   4516 ;------------------------------------------------------------
                                   4517 ;mode                      Allocated with name '_testMaxHub_mode_65537_168'
                                   4518 ;data                      Allocated with name '_testMaxHub_data_65538_169'
                                   4519 ;counter                   Allocated with name '_testMaxHub_counter_65538_169'
                                   4520 ;status                    Allocated with name '_testMaxHub_status_131074_170'
                                   4521 ;------------------------------------------------------------
                                   4522 ;	src/maxhub.c:1038: void testMaxHub()
                                   4523 ;	-----------------------------------------
                                   4524 ;	 function testMaxHub
                                   4525 ;	-----------------------------------------
      00180F                       4526 _testMaxHub:
                                   4527 ;	src/maxhub.c:1040: INFO_LOG("Entering Text Max HUB");
      00180F 74r89            [12] 4528 	mov	a,#___str_59
      001811 C0 E0            [24] 4529 	push	acc
      001813 74s07            [12] 4530 	mov	a,#(___str_59 >> 8)
      001815 C0 E0            [24] 4531 	push	acc
      001817 74 80            [12] 4532 	mov	a,#0x80
      001819 C0 E0            [24] 4533 	push	acc
      00181B 12r00r00         [24] 4534 	lcall	_printf
      00181E 15 81            [12] 4535 	dec	sp
      001820 15 81            [12] 4536 	dec	sp
      001822 15 81            [12] 4537 	dec	sp
      001824 74r42            [12] 4538 	mov	a,#___str_2
      001826 C0 E0            [24] 4539 	push	acc
      001828 74s00            [12] 4540 	mov	a,#(___str_2 >> 8)
      00182A C0 E0            [24] 4541 	push	acc
      00182C 12r00r00         [24] 4542 	lcall	_printf_tiny
      00182F 15 81            [12] 4543 	dec	sp
      001831 15 81            [12] 4544 	dec	sp
                                   4545 ;	src/maxhub.c:1041: setApplicationMode();
      001833 12r07r21         [24] 4546 	lcall	_setApplicationMode
                                   4547 ;	src/maxhub.c:1045: MFIO = 0;
                                   4548 ;	assignBit
      001836 C2 94            [12] 4549 	clr	_P1_4
                                   4550 ;	src/maxhub.c:1050: checkDeviceType();
      001838 12r16rFC         [24] 4551 	lcall	_checkDeviceType
                                   4552 ;	src/maxhub.c:1058: configSensorBpm(mode);
      00183B 75 82 01         [24] 4553 	mov	dpl,#0x01
      00183E 12r0Br47         [24] 4554 	lcall	_configSensorBpm
                                   4555 ;	src/maxhub.c:1059: setPulseWidth(118);
      001841 90 00 76         [24] 4556 	mov	dptr,#0x0076
      001844 12r15rE8         [24] 4557 	lcall	_setPulseWidth
                                   4558 ;	src/maxhub.c:1060: setSampleRate(1600);
      001847 90 06 40         [24] 4559 	mov	dptr,#0x0640
      00184A 12r16r54         [24] 4560 	lcall	_setSampleRate
                                   4561 ;	src/maxhub.c:1077: while (1)
      00184D                       4562 00108$:
                                   4563 ;	src/maxhub.c:1100: int status = readSensorBpm(mode, &data);
      00184D 90r00r32         [24] 4564 	mov	dptr,#_readSensorBpm_PARM_2
      001850 74r55            [12] 4565 	mov	a,#_testMaxHub_data_65538_169
      001852 F0               [24] 4566 	movx	@dptr,a
      001853 74s00            [12] 4567 	mov	a,#(_testMaxHub_data_65538_169 >> 8)
      001855 A3               [24] 4568 	inc	dptr
      001856 F0               [24] 4569 	movx	@dptr,a
      001857 E4               [12] 4570 	clr	a
      001858 A3               [24] 4571 	inc	dptr
      001859 F0               [24] 4572 	movx	@dptr,a
      00185A 75 82 01         [24] 4573 	mov	dpl,#0x01
      00185D 12r11r39         [24] 4574 	lcall	_readSensorBpm
      001860 E5 82            [12] 4575 	mov	a,dpl
      001862 85 83 F0         [24] 4576 	mov	b,dph
                                   4577 ;	src/maxhub.c:1101: if (status == SUCCESS)
      001865 45 F0            [12] 4578 	orl	a,b
      001867 60 03            [24] 4579 	jz	00125$
      001869 02r19r80         [24] 4580 	ljmp	00106$
      00186C                       4581 00125$:
                                   4582 ;	src/maxhub.c:1103: INFO_LOG("CONFIDENCE = %u", data.confidence);
      00186C 90r00r5F         [24] 4583 	mov	dptr,#(_testMaxHub_data_65538_169 + 0x000a)
      00186F E0               [24] 4584 	movx	a,@dptr
      001870 FF               [12] 4585 	mov	r7,a
      001871 7E 00            [12] 4586 	mov	r6,#0x00
      001873 C0 07            [24] 4587 	push	ar7
      001875 C0 06            [24] 4588 	push	ar6
      001877 74rAC            [12] 4589 	mov	a,#___str_60
      001879 C0 E0            [24] 4590 	push	acc
      00187B 74s07            [12] 4591 	mov	a,#(___str_60 >> 8)
      00187D C0 E0            [24] 4592 	push	acc
      00187F 74 80            [12] 4593 	mov	a,#0x80
      001881 C0 E0            [24] 4594 	push	acc
      001883 12r00r00         [24] 4595 	lcall	_printf
      001886 E5 81            [12] 4596 	mov	a,sp
      001888 24 FB            [12] 4597 	add	a,#0xfb
      00188A F5 81            [12] 4598 	mov	sp,a
      00188C 74r42            [12] 4599 	mov	a,#___str_2
      00188E C0 E0            [24] 4600 	push	acc
      001890 74s00            [12] 4601 	mov	a,#(___str_2 >> 8)
      001892 C0 E0            [24] 4602 	push	acc
      001894 12r00r00         [24] 4603 	lcall	_printf_tiny
      001897 15 81            [12] 4604 	dec	sp
      001899 15 81            [12] 4605 	dec	sp
                                   4606 ;	src/maxhub.c:1104: if (data.confidence > 50)
      00189B 90r00r5F         [24] 4607 	mov	dptr,#(_testMaxHub_data_65538_169 + 0x000a)
      00189E E0               [24] 4608 	movx	a,@dptr
      00189F FF               [12] 4609 	mov  r7,a
      0018A0 24 CD            [12] 4610 	add	a,#0xff - 0x32
      0018A2 40 03            [24] 4611 	jc	00126$
      0018A4 02r19r80         [24] 4612 	ljmp	00106$
      0018A7                       4613 00126$:
                                   4614 ;	src/maxhub.c:1110: INFO_LOG("IR LED = %lu", data.irLed);
      0018A7 90r00r55         [24] 4615 	mov	dptr,#_testMaxHub_data_65538_169
      0018AA E0               [24] 4616 	movx	a,@dptr
      0018AB FC               [12] 4617 	mov	r4,a
      0018AC A3               [24] 4618 	inc	dptr
      0018AD E0               [24] 4619 	movx	a,@dptr
      0018AE FD               [12] 4620 	mov	r5,a
      0018AF A3               [24] 4621 	inc	dptr
      0018B0 E0               [24] 4622 	movx	a,@dptr
      0018B1 FE               [12] 4623 	mov	r6,a
      0018B2 A3               [24] 4624 	inc	dptr
      0018B3 E0               [24] 4625 	movx	a,@dptr
      0018B4 FF               [12] 4626 	mov	r7,a
      0018B5 C0 04            [24] 4627 	push	ar4
      0018B7 C0 05            [24] 4628 	push	ar5
      0018B9 C0 06            [24] 4629 	push	ar6
      0018BB C0 07            [24] 4630 	push	ar7
      0018BD 74rC9            [12] 4631 	mov	a,#___str_61
      0018BF C0 E0            [24] 4632 	push	acc
      0018C1 74s07            [12] 4633 	mov	a,#(___str_61 >> 8)
      0018C3 C0 E0            [24] 4634 	push	acc
      0018C5 74 80            [12] 4635 	mov	a,#0x80
      0018C7 C0 E0            [24] 4636 	push	acc
      0018C9 12r00r00         [24] 4637 	lcall	_printf
      0018CC E5 81            [12] 4638 	mov	a,sp
      0018CE 24 F9            [12] 4639 	add	a,#0xf9
      0018D0 F5 81            [12] 4640 	mov	sp,a
      0018D2 74r42            [12] 4641 	mov	a,#___str_2
      0018D4 C0 E0            [24] 4642 	push	acc
      0018D6 74s00            [12] 4643 	mov	a,#(___str_2 >> 8)
      0018D8 C0 E0            [24] 4644 	push	acc
      0018DA 12r00r00         [24] 4645 	lcall	_printf_tiny
      0018DD 15 81            [12] 4646 	dec	sp
      0018DF 15 81            [12] 4647 	dec	sp
                                   4648 ;	src/maxhub.c:1111: INFO_LOG("RED LED = %lu", data.redLed);
      0018E1 90r00r59         [24] 4649 	mov	dptr,#(_testMaxHub_data_65538_169 + 0x0004)
      0018E4 E0               [24] 4650 	movx	a,@dptr
      0018E5 FC               [12] 4651 	mov	r4,a
      0018E6 A3               [24] 4652 	inc	dptr
      0018E7 E0               [24] 4653 	movx	a,@dptr
      0018E8 FD               [12] 4654 	mov	r5,a
      0018E9 A3               [24] 4655 	inc	dptr
      0018EA E0               [24] 4656 	movx	a,@dptr
      0018EB FE               [12] 4657 	mov	r6,a
      0018EC A3               [24] 4658 	inc	dptr
      0018ED E0               [24] 4659 	movx	a,@dptr
      0018EE FF               [12] 4660 	mov	r7,a
      0018EF C0 04            [24] 4661 	push	ar4
      0018F1 C0 05            [24] 4662 	push	ar5
      0018F3 C0 06            [24] 4663 	push	ar6
      0018F5 C0 07            [24] 4664 	push	ar7
      0018F7 74rE3            [12] 4665 	mov	a,#___str_62
      0018F9 C0 E0            [24] 4666 	push	acc
      0018FB 74s07            [12] 4667 	mov	a,#(___str_62 >> 8)
      0018FD C0 E0            [24] 4668 	push	acc
      0018FF 74 80            [12] 4669 	mov	a,#0x80
      001901 C0 E0            [24] 4670 	push	acc
      001903 12r00r00         [24] 4671 	lcall	_printf
      001906 E5 81            [12] 4672 	mov	a,sp
      001908 24 F9            [12] 4673 	add	a,#0xf9
      00190A F5 81            [12] 4674 	mov	sp,a
      00190C 74r42            [12] 4675 	mov	a,#___str_2
      00190E C0 E0            [24] 4676 	push	acc
      001910 74s00            [12] 4677 	mov	a,#(___str_2 >> 8)
      001912 C0 E0            [24] 4678 	push	acc
      001914 12r00r00         [24] 4679 	lcall	_printf_tiny
      001917 15 81            [12] 4680 	dec	sp
      001919 15 81            [12] 4681 	dec	sp
                                   4682 ;	src/maxhub.c:1113: INFO_LOG("HEART-RATE = %u", data.heartRate);
      00191B 90r00r5D         [24] 4683 	mov	dptr,#(_testMaxHub_data_65538_169 + 0x0008)
      00191E E0               [24] 4684 	movx	a,@dptr
      00191F FE               [12] 4685 	mov	r6,a
      001920 A3               [24] 4686 	inc	dptr
      001921 E0               [24] 4687 	movx	a,@dptr
      001922 FF               [12] 4688 	mov	r7,a
      001923 C0 06            [24] 4689 	push	ar6
      001925 C0 07            [24] 4690 	push	ar7
      001927 74rFE            [12] 4691 	mov	a,#___str_63
      001929 C0 E0            [24] 4692 	push	acc
      00192B 74s07            [12] 4693 	mov	a,#(___str_63 >> 8)
      00192D C0 E0            [24] 4694 	push	acc
      00192F 74 80            [12] 4695 	mov	a,#0x80
      001931 C0 E0            [24] 4696 	push	acc
      001933 12r00r00         [24] 4697 	lcall	_printf
      001936 E5 81            [12] 4698 	mov	a,sp
      001938 24 FB            [12] 4699 	add	a,#0xfb
      00193A F5 81            [12] 4700 	mov	sp,a
      00193C 74r42            [12] 4701 	mov	a,#___str_2
      00193E C0 E0            [24] 4702 	push	acc
      001940 74s00            [12] 4703 	mov	a,#(___str_2 >> 8)
      001942 C0 E0            [24] 4704 	push	acc
      001944 12r00r00         [24] 4705 	lcall	_printf_tiny
      001947 15 81            [12] 4706 	dec	sp
      001949 15 81            [12] 4707 	dec	sp
                                   4708 ;	src/maxhub.c:1114: INFO_LOG("OXYGEN = %u", data.oxygen);
      00194B 90r00r60         [24] 4709 	mov	dptr,#(_testMaxHub_data_65538_169 + 0x000b)
      00194E E0               [24] 4710 	movx	a,@dptr
      00194F FE               [12] 4711 	mov	r6,a
      001950 A3               [24] 4712 	inc	dptr
      001951 E0               [24] 4713 	movx	a,@dptr
      001952 FF               [12] 4714 	mov	r7,a
      001953 C0 06            [24] 4715 	push	ar6
      001955 C0 07            [24] 4716 	push	ar7
      001957 74r1B            [12] 4717 	mov	a,#___str_64
      001959 C0 E0            [24] 4718 	push	acc
      00195B 74s08            [12] 4719 	mov	a,#(___str_64 >> 8)
      00195D C0 E0            [24] 4720 	push	acc
      00195F 74 80            [12] 4721 	mov	a,#0x80
      001961 C0 E0            [24] 4722 	push	acc
      001963 12r00r00         [24] 4723 	lcall	_printf
      001966 E5 81            [12] 4724 	mov	a,sp
      001968 24 FB            [12] 4725 	add	a,#0xfb
      00196A F5 81            [12] 4726 	mov	sp,a
      00196C 74r42            [12] 4727 	mov	a,#___str_2
      00196E C0 E0            [24] 4728 	push	acc
      001970 74s00            [12] 4729 	mov	a,#(___str_2 >> 8)
      001972 C0 E0            [24] 4730 	push	acc
      001974 12r00r00         [24] 4731 	lcall	_printf_tiny
      001977 15 81            [12] 4732 	dec	sp
      001979 15 81            [12] 4733 	dec	sp
                                   4734 ;	src/maxhub.c:1122: data.confidence = 0;
      00197B 90r00r5F         [24] 4735 	mov	dptr,#(_testMaxHub_data_65538_169 + 0x000a)
      00197E E4               [12] 4736 	clr	a
      00197F F0               [24] 4737 	movx	@dptr,a
      001980                       4738 00106$:
                                   4739 ;	src/maxhub.c:1126: hubDelayMs(10);
      001980 75 82 0A         [24] 4740 	mov	dpl,#0x0a
      001983 12r00r00         [24] 4741 	lcall	_hubDelayMs
                                   4742 ;	src/maxhub.c:1130: MFIO = 1;
                                   4743 ;	src/maxhub.c:1131: }
      001986 02r18r4D         [24] 4744 	ljmp	00108$
                                   4745 	.area CSEG    (CODE)
                                   4746 	.area CONST   (CODE)
                                   4747 	.area CONST   (CODE)
      000000                       4748 ___str_0:
      000000 0A                    4749 	.db 0x0a
      000001 0D                    4750 	.db 0x0d
      000002 1B                    4751 	.db 0x1b
      000003 5B 31 3B 33 31 6D 45  4752 	.ascii "[1;31mERROR: %s:%d Write address failed!"
             52 52 4F 52 3A 20 25
             73 3A 25 64 20 57 72
             69 74 65 20 61 64 64
             72 65 73 73 20 66 61
             69 6C 65 64 21
      00002B 00                    4753 	.db 0x00
                                   4754 	.area CSEG    (CODE)
                                   4755 	.area CONST   (CODE)
      00002C                       4756 ___str_1:
      00002C 69 32 63 4D 61 78 33  4757 	.ascii "i2cMax32664WriteBytes"
             32 36 36 34 57 72 69
             74 65 42 79 74 65 73
      000041 00                    4758 	.db 0x00
                                   4759 	.area CSEG    (CODE)
                                   4760 	.area CONST   (CODE)
      000042                       4761 ___str_2:
      000042 1B                    4762 	.db 0x1b
      000043 5B 30 6D              4763 	.ascii "[0m"
      000046 00                    4764 	.db 0x00
                                   4765 	.area CSEG    (CODE)
                                   4766 	.area CONST   (CODE)
      000047                       4767 ___str_3:
      000047 0A                    4768 	.db 0x0a
      000048 0D                    4769 	.db 0x0d
      000049 1B                    4770 	.db 0x1b
      00004A 5B 31 3B 33 31 6D 45  4771 	.ascii "[1;31mERROR: %s Family Byte Write address failed!"
             52 52 4F 52 3A 20 25
             73 20 46 61 6D 69 6C
             79 20 42 79 74 65 20
             57 72 69 74 65 20 61
             64 64 72 65 73 73 20
             66 61 69 6C 65 64 21
      00007B 00                    4772 	.db 0x00
                                   4773 	.area CSEG    (CODE)
                                   4774 	.area CONST   (CODE)
      00007C                       4775 ___str_4:
      00007C 0A                    4776 	.db 0x0a
      00007D 0D                    4777 	.db 0x0d
      00007E 1B                    4778 	.db 0x1b
      00007F 5B 31 3B 33 31 6D 45  4779 	.ascii "[1;31mERROR: %s Index Byte Write address failed!"
             52 52 4F 52 3A 20 25
             73 20 49 6E 64 65 78
             20 42 79 74 65 20 57
             72 69 74 65 20 61 64
             64 72 65 73 73 20 66
             61 69 6C 65 64 21
      0000AF 00                    4780 	.db 0x00
                                   4781 	.area CSEG    (CODE)
                                   4782 	.area CONST   (CODE)
      0000B0                       4783 ___str_5:
      0000B0 0A                    4784 	.db 0x0a
      0000B1 0D                    4785 	.db 0x0d
      0000B2 1B                    4786 	.db 0x1b
      0000B3 5B 31 3B 33 31 6D 45  4787 	.ascii "[1;31mERROR: %s Data Byte Write %d failed!"
             52 52 4F 52 3A 20 25
             73 20 44 61 74 61 20
             42 79 74 65 20 57 72
             69 74 65 20 25 64 20
             66 61 69 6C 65 64 21
      0000DD 00                    4788 	.db 0x00
                                   4789 	.area CSEG    (CODE)
                                   4790 	.area CONST   (CODE)
      0000DE                       4791 ___str_6:
      0000DE 0A                    4792 	.db 0x0a
      0000DF 0D                    4793 	.db 0x0d
      0000E0 1B                    4794 	.db 0x1b
      0000E1 5B 31 3B 33 31 6D 45  4795 	.ascii "[1;31mERROR: %s Read Byte failed!"
             52 52 4F 52 3A 20 25
             73 20 52 65 61 64 20
             42 79 74 65 20 66 61
             69 6C 65 64 21
      000102 00                    4796 	.db 0x00
                                   4797 	.area CSEG    (CODE)
                                   4798 	.area CONST   (CODE)
      000103                       4799 ___str_7:
      000103 0A                    4800 	.db 0x0a
      000104 0D                    4801 	.db 0x0d
      000105 1B                    4802 	.db 0x1b
      000106 5B 33 38 3B 35 3B 32  4803 	.ascii "[38;5;214mretrying write"
             31 34 6D 72 65 74 72
             79 69 6E 67 20 77 72
             69 74 65
      00011E 00                    4804 	.db 0x00
                                   4805 	.area CSEG    (CODE)
                                   4806 	.area CONST   (CODE)
      00011F                       4807 ___str_8:
      00011F 0A                    4808 	.db 0x0a
      000120 0D                    4809 	.db 0x0d
      000121 1B                    4810 	.db 0x1b
      000122 5B 31 3B 33 31 6D 45  4811 	.ascii "[1;31mERROR: %s Write address failed!"
             52 52 4F 52 3A 20 25
             73 20 57 72 69 74 65
             20 61 64 64 72 65 73
             73 20 66 61 69 6C 65
             64 21
      000147 00                    4812 	.db 0x00
                                   4813 	.area CSEG    (CODE)
                                   4814 	.area CONST   (CODE)
      000148                       4815 ___str_9:
      000148 69 32 63 4D 61 78 33  4816 	.ascii "i2cMax32664ReadByte"
             32 36 36 34 52 65 61
             64 42 79 74 65
      00015B 00                    4817 	.db 0x00
                                   4818 	.area CSEG    (CODE)
                                   4819 	.area CONST   (CODE)
      00015C                       4820 ___str_10:
      00015C 0A                    4821 	.db 0x0a
      00015D 0D                    4822 	.db 0x0d
      00015E 1B                    4823 	.db 0x1b
      00015F 5B 31 3B 33 31 6D 45  4824 	.ascii "[1;31mERROR: %s Write Byte Write address failed!"
             52 52 4F 52 3A 20 25
             73 20 57 72 69 74 65
             20 42 79 74 65 20 57
             72 69 74 65 20 61 64
             64 72 65 73 73 20 66
             61 69 6C 65 64 21
      00018F 00                    4825 	.db 0x00
                                   4826 	.area CSEG    (CODE)
                                   4827 	.area CONST   (CODE)
      000190                       4828 ___str_11:
      000190 69 32 63 4D 61 78 33  4829 	.ascii "i2cMax32664SequentialReadByte"
             32 36 36 34 53 65 71
             75 65 6E 74 69 61 6C
             52 65 61 64 42 79 74
             65
      0001AD 00                    4830 	.db 0x00
                                   4831 	.area CSEG    (CODE)
                                   4832 	.area CONST   (CODE)
      0001AE                       4833 ___str_12:
      0001AE 0A                    4834 	.db 0x0a
      0001AF 0D                    4835 	.db 0x0d
      0001B0 1B                    4836 	.db 0x1b
      0001B1 5B 31 3B 33 31 6D 45  4837 	.ascii "[1;31mERROR: %s Status Byte = %d"
             52 52 4F 52 3A 20 25
             73 20 53 74 61 74 75
             73 20 42 79 74 65 20
             3D 20 25 64
      0001D1 00                    4838 	.db 0x00
                                   4839 	.area CSEG    (CODE)
                                   4840 	.area CONST   (CODE)
      0001D2                       4841 ___str_13:
      0001D2 0A                    4842 	.db 0x0a
      0001D3 0D                    4843 	.db 0x0d
      0001D4 1B                    4844 	.db 0x1b
      0001D5 5B 31 3B 33 31 6D 45  4845 	.ascii "[1;31mERROR: Error reading device mode!"
             52 52 4F 52 3A 20 45
             72 72 6F 72 20 72 65
             61 64 69 6E 67 20 64
             65 76 69 63 65 20 6D
             6F 64 65 21
      0001FC 00                    4846 	.db 0x00
                                   4847 	.area CSEG    (CODE)
                                   4848 	.area CONST   (CODE)
      0001FD                       4849 ___str_14:
      0001FD 0A                    4850 	.db 0x0a
      0001FE 0D                    4851 	.db 0x0d
      0001FF 1B                    4852 	.db 0x1b
      000200 5B 33 38 3B 35 3B 32  4853 	.ascii "[38;5;214mSetting to Application Mode..."
             31 34 6D 53 65 74 74
             69 6E 67 20 74 6F 20
             41 70 70 6C 69 63 61
             74 69 6F 6E 20 4D 6F
             64 65 2E 2E 2E
      000228 00                    4854 	.db 0x00
                                   4855 	.area CSEG    (CODE)
                                   4856 	.area CONST   (CODE)
      000229                       4857 ___str_15:
      000229 0A                    4858 	.db 0x0a
      00022A 0D                    4859 	.db 0x0d
      00022B 1B                    4860 	.db 0x1b
      00022C 5B 31 3B 33 31 6D 45  4861 	.ascii "[1;31mERROR: Application Mode not set!!!"
             52 52 4F 52 3A 20 41
             70 70 6C 69 63 61 74
             69 6F 6E 20 4D 6F 64
             65 20 6E 6F 74 20 73
             65 74 21 21 21
      000254 00                    4862 	.db 0x00
                                   4863 	.area CSEG    (CODE)
                                   4864 	.area CONST   (CODE)
      000255                       4865 ___str_16:
      000255 0A                    4866 	.db 0x0a
      000256 0D                    4867 	.db 0x0d
      000257 1B                    4868 	.db 0x1b
      000258 5B 33 38 3B 35 3B 32  4869 	.ascii "[38;5;214mApplication Mode Set"
             31 34 6D 41 70 70 6C
             69 63 61 74 69 6F 6E
             20 4D 6F 64 65 20 53
             65 74
      000276 00                    4870 	.db 0x00
                                   4871 	.area CSEG    (CODE)
                                   4872 	.area CONST   (CODE)
      000277                       4873 ___str_17:
      000277 0A                    4874 	.db 0x0a
      000278 0D                    4875 	.db 0x0d
      000279 1B                    4876 	.db 0x1b
      00027A 5B 31 3B 33 31 6D 45  4877 	.ascii "[1;31mERROR: %s: Recieved Error Status = %d"
             52 52 4F 52 3A 20 25
             73 3A 20 52 65 63 69
             65 76 65 64 20 45 72
             72 6F 72 20 53 74 61
             74 75 73 20 3D 20 25
             64
      0002A5 00                    4878 	.db 0x00
                                   4879 	.area CSEG    (CODE)
                                   4880 	.area CONST   (CODE)
      0002A6                       4881 ___str_18:
      0002A6 73 65 74 4F 75 74 70  4882 	.ascii "setOutputMode"
             75 74 4D 6F 64 65
      0002B3 00                    4883 	.db 0x00
                                   4884 	.area CSEG    (CODE)
                                   4885 	.area CONST   (CODE)
      0002B4                       4886 ___str_19:
      0002B4 73 65 74 46 69 66 6F  4887 	.ascii "setFifoThreshold"
             54 68 72 65 73 68 6F
             6C 64
      0002C4 00                    4888 	.db 0x00
                                   4889 	.area CSEG    (CODE)
                                   4890 	.area CONST   (CODE)
      0002C5                       4891 ___str_20:
      0002C5 61 67 63 41 6C 67 6F  4892 	.ascii "agcAlgoControl"
             43 6F 6E 74 72 6F 6C
      0002D3 00                    4893 	.db 0x00
                                   4894 	.area CSEG    (CODE)
                                   4895 	.area CONST   (CODE)
      0002D4                       4896 ___str_21:
      0002D4 6D 61 78 33 30 31 30  4897 	.ascii "max30101Control"
             31 43 6F 6E 74 72 6F
             6C
      0002E3 00                    4898 	.db 0x00
                                   4899 	.area CSEG    (CODE)
                                   4900 	.area CONST   (CODE)
      0002E4                       4901 ___str_22:
      0002E4 6D 61 78 69 6D 46 61  4902 	.ascii "maximFastAlgoControl"
             73 74 41 6C 67 6F 43
             6F 6E 74 72 6F 6C
      0002F8 00                    4903 	.db 0x00
                                   4904 	.area CSEG    (CODE)
                                   4905 	.area CONST   (CODE)
      0002F9                       4906 ___str_23:
      0002F9 0A                    4907 	.db 0x0a
      0002FA 0D                    4908 	.db 0x0d
      0002FB 1B                    4909 	.db 0x1b
      0002FC 5B 33 38 3B 35 3B 32  4910 	.ascii "[38;5;214msetOutputMode Status = %d"
             31 34 6D 73 65 74 4F
             75 74 70 75 74 4D 6F
             64 65 20 53 74 61 74
             75 73 20 3D 20 25 64
      00031F 00                    4911 	.db 0x00
                                   4912 	.area CSEG    (CODE)
                                   4913 	.area CONST   (CODE)
      000320                       4914 ___str_24:
      000320 0A                    4915 	.db 0x0a
      000321 0D                    4916 	.db 0x0d
      000322 1B                    4917 	.db 0x1b
      000323 5B 33 38 3B 35 3B 32  4918 	.ascii "[38;5;214msetOutputMode Status 2 = %d"
             31 34 6D 73 65 74 4F
             75 74 70 75 74 4D 6F
             64 65 20 53 74 61 74
             75 73 20 32 20 3D 20
             25 64
      000348 00                    4919 	.db 0x00
                                   4920 	.area CSEG    (CODE)
                                   4921 	.area CONST   (CODE)
      000349                       4922 ___str_25:
      000349 0A                    4923 	.db 0x0a
      00034A 0D                    4924 	.db 0x0d
      00034B 1B                    4925 	.db 0x1b
      00034C 5B 33 38 3B 35 3B 32  4926 	.ascii "[38;5;214msetFifoThreshold Status = %d"
             31 34 6D 73 65 74 46
             69 66 6F 54 68 72 65
             73 68 6F 6C 64 20 53
             74 61 74 75 73 20 3D
             20 25 64
      000372 00                    4927 	.db 0x00
                                   4928 	.area CSEG    (CODE)
                                   4929 	.area CONST   (CODE)
      000373                       4930 ___str_26:
      000373 0A                    4931 	.db 0x0a
      000374 0D                    4932 	.db 0x0d
      000375 1B                    4933 	.db 0x1b
      000376 5B 33 38 3B 35 3B 32  4934 	.ascii "[38;5;214magcAlgoControl Status = %d"
             31 34 6D 61 67 63 41
             6C 67 6F 43 6F 6E 74
             72 6F 6C 20 53 74 61
             74 75 73 20 3D 20 25
             64
      00039A 00                    4935 	.db 0x00
                                   4936 	.area CSEG    (CODE)
                                   4937 	.area CONST   (CODE)
      00039B                       4938 ___str_27:
      00039B 0A                    4939 	.db 0x0a
      00039C 0D                    4940 	.db 0x0d
      00039D 1B                    4941 	.db 0x1b
      00039E 5B 33 38 3B 35 3B 32  4942 	.ascii "[38;5;214mmax30101Control Status = %d"
             31 34 6D 6D 61 78 33
             30 31 30 31 43 6F 6E
             74 72 6F 6C 20 53 74
             61 74 75 73 20 3D 20
             25 64
      0003C3 00                    4943 	.db 0x00
                                   4944 	.area CSEG    (CODE)
                                   4945 	.area CONST   (CODE)
      0003C4                       4946 ___str_28:
      0003C4 0A                    4947 	.db 0x0a
      0003C5 0D                    4948 	.db 0x0d
      0003C6 1B                    4949 	.db 0x1b
      0003C7 5B 33 38 3B 35 3B 32  4950 	.ascii "[38;5;214mmaximFastAlgoControl Status = %d"
             31 34 6D 6D 61 78 69
             6D 46 61 73 74 41 6C
             67 6F 43 6F 6E 74 72
             6F 6C 20 53 74 61 74
             75 73 20 3D 20 25 64
      0003F1 00                    4951 	.db 0x00
                                   4952 	.area CSEG    (CODE)
                                   4953 	.area CONST   (CODE)
      0003F2                       4954 ___str_29:
      0003F2 0A                    4955 	.db 0x0a
      0003F3 0D                    4956 	.db 0x0d
      0003F4 1B                    4957 	.db 0x1b
      0003F5 5B 33 38 3B 35 3B 32  4958 	.ascii "[38;5;214m%s: configuration success"
             31 34 6D 25 73 3A 20
             63 6F 6E 66 69 67 75
             72 61 74 69 6F 6E 20
             73 75 63 63 65 73 73
      000418 00                    4959 	.db 0x00
                                   4960 	.area CSEG    (CODE)
                                   4961 	.area CONST   (CODE)
      000419                       4962 ___str_30:
      000419 63 6F 6E 66 69 67 42  4963 	.ascii "configBpm"
             70 6D
      000422 00                    4964 	.db 0x00
                                   4965 	.area CSEG    (CODE)
                                   4966 	.area CONST   (CODE)
      000423                       4967 ___str_31:
      000423 63 6F 6E 66 69 67 53  4968 	.ascii "configSensorBpm"
             65 6E 73 6F 72 42 70
             6D
      000432 00                    4969 	.db 0x00
                                   4970 	.area CSEG    (CODE)
                                   4971 	.area CONST   (CODE)
      000433                       4972 ___str_32:
      000433 0A                    4973 	.db 0x0a
      000434 0D                    4974 	.db 0x0d
      000435 1B                    4975 	.db 0x1b
      000436 5B 31 3B 33 31 6D 45  4976 	.ascii "[1;31mERROR: Error reading numSamplesOutFifo"
             52 52 4F 52 3A 20 45
             72 72 6F 72 20 72 65
             61 64 69 6E 67 20 6E
             75 6D 53 61 6D 70 6C
             65 73 4F 75 74 46 69
             66 6F
      000462 00                    4977 	.db 0x00
                                   4978 	.area CSEG    (CODE)
                                   4979 	.area CONST   (CODE)
      000463                       4980 ___str_33:
      000463 0A                    4981 	.db 0x0a
      000464 0D                    4982 	.db 0x0d
      000465 1B                    4983 	.db 0x1b
      000466 5B 31 3B 33 31 6D 45  4984 	.ascii "[1;31mERROR: %s: Hub Status Error : %d"
             52 52 4F 52 3A 20 25
             73 3A 20 48 75 62 20
             53 74 61 74 75 73 20
             45 72 72 6F 72 20 3A
             20 25 64
      00048C 00                    4985 	.db 0x00
                                   4986 	.area CSEG    (CODE)
                                   4987 	.area CONST   (CODE)
      00048D                       4988 ___str_34:
      00048D 72 65 61 64 42 70 6D  4989 	.ascii "readBpm"
      000494 00                    4990 	.db 0x00
                                   4991 	.area CSEG    (CODE)
                                   4992 	.area CONST   (CODE)
      000495                       4993 ___str_35:
      000495 0A                    4994 	.db 0x0a
      000496 0D                    4995 	.db 0x0d
      000497 1B                    4996 	.db 0x1b
      000498 5B 33 38 3B 35 3B 32  4997 	.ascii "[38;5;214mStatus Byte = %d"
             31 34 6D 53 74 61 74
             75 73 20 42 79 74 65
             20 3D 20 25 64
      0004B2 00                    4998 	.db 0x00
                                   4999 	.area CSEG    (CODE)
                                   5000 	.area CONST   (CODE)
      0004B3                       5001 ___str_36:
      0004B3 0A                    5002 	.db 0x0a
      0004B4 0D                    5003 	.db 0x0d
      0004B5 1B                    5004 	.db 0x1b
      0004B6 5B 33 38 3B 35 3B 32  5005 	.ascii "[38;5;214mnumSamples = %d"
             31 34 6D 6E 75 6D 53
             61 6D 70 6C 65 73 20
             3D 20 25 64
      0004CF 00                    5006 	.db 0x00
                                   5007 	.area CSEG    (CODE)
                                   5008 	.area CONST   (CODE)
      0004D0                       5009 ___str_37:
      0004D0 0A                    5010 	.db 0x0a
      0004D1 0D                    5011 	.db 0x0d
      0004D2 1B                    5012 	.db 0x1b
      0004D3 5B 33 38 3B 35 3B 32  5013 	.ascii "[38;5;214m%s: No samples to read"
             31 34 6D 25 73 3A 20
             4E 6F 20 73 61 6D 70
             6C 65 73 20 74 6F 20
             72 65 61 64
      0004F3 00                    5014 	.db 0x00
                                   5015 	.area CSEG    (CODE)
                                   5016 	.area CONST   (CODE)
      0004F4                       5017 ___str_38:
      0004F4 0A                    5018 	.db 0x0a
      0004F5 0D                    5019 	.db 0x0d
      0004F6 44 61 74 61 20 66 72  5020 	.ascii "Data from Hub"
             6F 6D 20 48 75 62
      000503 0A                    5021 	.db 0x0a
      000504 0D                    5022 	.db 0x0d
      000505 00                    5023 	.db 0x00
                                   5024 	.area CSEG    (CODE)
                                   5025 	.area CONST   (CODE)
      000506                       5026 ___str_39:
      000506 25 64                 5027 	.ascii "%d"
      000508 0A                    5028 	.db 0x0a
      000509 0D                    5029 	.db 0x0d
      00050A 00                    5030 	.db 0x00
                                   5031 	.area CSEG    (CODE)
                                   5032 	.area CONST   (CODE)
      00050B                       5033 ___str_40:
      00050B 0A                    5034 	.db 0x0a
      00050C 0D                    5035 	.db 0x0d
      00050D 1B                    5036 	.db 0x1b
      00050E 5B 31 3B 33 31 6D 45  5037 	.ascii "[1;31mERROR: %s: Status Error : %d"
             52 52 4F 52 3A 20 25
             73 3A 20 53 74 61 74
             75 73 20 45 72 72 6F
             72 20 3A 20 25 64
      000530 00                    5038 	.db 0x00
                                   5039 	.area CSEG    (CODE)
                                   5040 	.area CONST   (CODE)
      000531                       5041 ___str_41:
      000531 0A                    5042 	.db 0x0a
      000532 0D                    5043 	.db 0x0d
      000533 1B                    5044 	.db 0x1b
      000534 5B 33 38 3B 35 3B 32  5045 	.ascii "[38;5;214m%s: Finger Status = NO_READING"
             31 34 6D 25 73 3A 20
             46 69 6E 67 65 72 20
             53 74 61 74 75 73 20
             3D 20 4E 4F 5F 52 45
             41 44 49 4E 47
      00055C 00                    5046 	.db 0x00
                                   5047 	.area CSEG    (CODE)
                                   5048 	.area CONST   (CODE)
      00055D                       5049 ___str_42:
      00055D 0A                    5050 	.db 0x0a
      00055E 0D                    5051 	.db 0x0d
      00055F 1B                    5052 	.db 0x1b
      000560 5B 33 38 3B 35 3B 32  5053 	.ascii "[38;5;214m%s: Finger Status = NOT_READY"
             31 34 6D 25 73 3A 20
             46 69 6E 67 65 72 20
             53 74 61 74 75 73 20
             3D 20 4E 4F 54 5F 52
             45 41 44 59
      000587 00                    5054 	.db 0x00
                                   5055 	.area CSEG    (CODE)
                                   5056 	.area CONST   (CODE)
      000588                       5057 ___str_43:
      000588 0A                    5058 	.db 0x0a
      000589 0D                    5059 	.db 0x0d
      00058A 1B                    5060 	.db 0x1b
      00058B 5B 33 38 3B 35 3B 32  5061 	.ascii "[38;5;214m%s: Finger Status = OBJECT_DETECTED"
             31 34 6D 25 73 3A 20
             46 69 6E 67 65 72 20
             53 74 61 74 75 73 20
             3D 20 4F 42 4A 45 43
             54 5F 44 45 54 45 43
             54 45 44
      0005B8 00                    5062 	.db 0x00
                                   5063 	.area CSEG    (CODE)
                                   5064 	.area CONST   (CODE)
      0005B9                       5065 ___str_44:
      0005B9 0A                    5066 	.db 0x0a
      0005BA 0D                    5067 	.db 0x0d
      0005BB 1B                    5068 	.db 0x1b
      0005BC 5B 33 38 3B 35 3B 32  5069 	.ascii "[38;5;214m%s: Finger Status = FINGER_DETECTED"
             31 34 6D 25 73 3A 20
             46 69 6E 67 65 72 20
             53 74 61 74 75 73 20
             3D 20 46 49 4E 47 45
             52 5F 44 45 54 45 43
             54 45 44
      0005E9 00                    5070 	.db 0x00
                                   5071 	.area CSEG    (CODE)
                                   5072 	.area CONST   (CODE)
      0005EA                       5073 ___str_45:
      0005EA 0A                    5074 	.db 0x0a
      0005EB 0D                    5075 	.db 0x0d
      0005EC 1B                    5076 	.db 0x1b
      0005ED 5B 31 3B 33 31 6D 45  5077 	.ascii "[1;31mERROR: Unknown case!"
             52 52 4F 52 3A 20 55
             6E 6B 6E 6F 77 6E 20
             63 61 73 65 21
      000607 00                    5078 	.db 0x00
                                   5079 	.area CSEG    (CODE)
                                   5080 	.area CONST   (CODE)
      000608                       5081 ___str_46:
      000608 72 65 61 64 53 65 6E  5082 	.ascii "readSensorBpm"
             73 6F 72 42 70 6D
      000615 00                    5083 	.db 0x00
                                   5084 	.area CSEG    (CODE)
                                   5085 	.area CONST   (CODE)
      000616                       5086 ___str_47:
      000616 0A                    5087 	.db 0x0a
      000617 0D                    5088 	.db 0x0d
      000618 1B                    5089 	.db 0x1b
      000619 5B 33 38 3B 35 3B 32  5090 	.ascii "[38;5;214mHub Status = %d"
             31 34 6D 48 75 62 20
             53 74 61 74 75 73 20
             3D 20 25 64
      000632 00                    5091 	.db 0x00
                                   5092 	.area CSEG    (CODE)
                                   5093 	.area CONST   (CODE)
      000633                       5094 ___str_48:
      000633 0A                    5095 	.db 0x0a
      000634 0D                    5096 	.db 0x0d
      000635 1B                    5097 	.db 0x1b
      000636 5B 33 38 3B 35 3B 32  5098 	.ascii "[38;5;214mNum Samples = %d"
             31 34 6D 4E 75 6D 20
             53 61 6D 70 6C 65 73
             20 3D 20 25 64
      000650 00                    5099 	.db 0x00
                                   5100 	.area CSEG    (CODE)
                                   5101 	.area CONST   (CODE)
      000651                       5102 ___str_49:
      000651 0A                    5103 	.db 0x0a
      000652 0D                    5104 	.db 0x0d
      000653 1B                    5105 	.db 0x1b
      000654 5B 33 38 3B 35 3B 32  5106 	.ascii "[38;5;214mNO_READING"
             31 34 6D 4E 4F 5F 52
             45 41 44 49 4E 47
      000668 00                    5107 	.db 0x00
                                   5108 	.area CSEG    (CODE)
                                   5109 	.area CONST   (CODE)
      000669                       5110 ___str_50:
      000669 0A                    5111 	.db 0x0a
      00066A 0D                    5112 	.db 0x0d
      00066B 1B                    5113 	.db 0x1b
      00066C 5B 33 38 3B 35 3B 32  5114 	.ascii "[38;5;214mNOT_READY"
             31 34 6D 4E 4F 54 5F
             52 45 41 44 59
      00067F 00                    5115 	.db 0x00
                                   5116 	.area CSEG    (CODE)
                                   5117 	.area CONST   (CODE)
      000680                       5118 ___str_51:
      000680 0A                    5119 	.db 0x0a
      000681 0D                    5120 	.db 0x0d
      000682 1B                    5121 	.db 0x1b
      000683 5B 33 38 3B 35 3B 32  5122 	.ascii "[38;5;214mOBJECT_DETECTED"
             31 34 6D 4F 42 4A 45
             43 54 5F 44 45 54 45
             43 54 45 44
      00069C 00                    5123 	.db 0x00
                                   5124 	.area CSEG    (CODE)
                                   5125 	.area CONST   (CODE)
      00069D                       5126 ___str_52:
      00069D 0A                    5127 	.db 0x0a
      00069E 0D                    5128 	.db 0x0d
      00069F 1B                    5129 	.db 0x1b
      0006A0 5B 33 38 3B 35 3B 32  5130 	.ascii "[38;5;214mFINGER_DETECTED"
             31 34 6D 46 49 4E 47
             45 52 5F 44 45 54 45
             43 54 45 44
      0006B9 00                    5131 	.db 0x00
                                   5132 	.area CSEG    (CODE)
                                   5133 	.area CONST   (CODE)
      0006BA                       5134 ___str_53:
      0006BA 0A                    5135 	.db 0x0a
      0006BB 0D                    5136 	.db 0x0d
      0006BC 1B                    5137 	.db 0x1b
      0006BD 5B 33 38 3B 35 3B 32  5138 	.ascii "[38;5;214mPRESSING_TOO_HARD"
             31 34 6D 50 52 45 53
             53 49 4E 47 5F 54 4F
             4F 5F 48 41 52 44
      0006D8 00                    5139 	.db 0x00
                                   5140 	.area CSEG    (CODE)
                                   5141 	.area CONST   (CODE)
      0006D9                       5142 ___str_54:
      0006D9 0A                    5143 	.db 0x0a
      0006DA 0D                    5144 	.db 0x0d
      0006DB 1B                    5145 	.db 0x1b
      0006DC 5B 31 3B 33 31 6D 45  5146 	.ascii "[1;31mERROR: UNKNOWN ERROR: %d"
             52 52 4F 52 3A 20 55
             4E 4B 4E 4F 57 4E 20
             45 52 52 4F 52 3A 20
             25 64
      0006FA 00                    5147 	.db 0x00
                                   5148 	.area CSEG    (CODE)
                                   5149 	.area CONST   (CODE)
      0006FB                       5150 ___str_55:
      0006FB 0A                    5151 	.db 0x0a
      0006FC 0D                    5152 	.db 0x0d
      0006FD 1B                    5153 	.db 0x1b
      0006FE 5B 31 3B 33 31 6D 45  5154 	.ascii "[1;31mERROR: Reaed Device Type failed"
             52 52 4F 52 3A 20 52
             65 61 65 64 20 44 65
             76 69 63 65 20 54 79
             70 65 20 66 61 69 6C
             65 64
      000723 00                    5155 	.db 0x00
                                   5156 	.area CSEG    (CODE)
                                   5157 	.area CONST   (CODE)
      000724                       5158 ___str_56:
      000724 0A                    5159 	.db 0x0a
      000725 0D                    5160 	.db 0x0d
      000726 1B                    5161 	.db 0x1b
      000727 5B 31 3B 33 31 6D 45  5162 	.ascii "[1;31mERROR: Device Type %d not expected"
             52 52 4F 52 3A 20 44
             65 76 69 63 65 20 54
             79 70 65 20 25 64 20
             6E 6F 74 20 65 78 70
             65 63 74 65 64
      00074F 00                    5163 	.db 0x00
                                   5164 	.area CSEG    (CODE)
                                   5165 	.area CONST   (CODE)
      000750                       5166 ___str_57:
      000750 0A                    5167 	.db 0x0a
      000751 0D                    5168 	.db 0x0d
      000752 1B                    5169 	.db 0x1b
      000753 5B 33 38 3B 35 3B 32  5170 	.ascii "[38;5;214mDevice Type Check Success"
             31 34 6D 44 65 76 69
             63 65 20 54 79 70 65
             20 43 68 65 63 6B 20
             53 75 63 63 65 73 73
      000776 00                    5171 	.db 0x00
                                   5172 	.area CSEG    (CODE)
                                   5173 	.area CONST   (CODE)
      000777                       5174 ___str_58:
      000777 68 75 62 20 73 74 61  5175 	.ascii "hub status = %x"
             74 75 73 20 3D 20 25
             78
      000786 0A                    5176 	.db 0x0a
      000787 0D                    5177 	.db 0x0d
      000788 00                    5178 	.db 0x00
                                   5179 	.area CSEG    (CODE)
                                   5180 	.area CONST   (CODE)
      000789                       5181 ___str_59:
      000789 0A                    5182 	.db 0x0a
      00078A 0D                    5183 	.db 0x0d
      00078B 1B                    5184 	.db 0x1b
      00078C 5B 33 38 3B 35 3B 32  5185 	.ascii "[38;5;214mEntering Text Max HUB"
             31 34 6D 45 6E 74 65
             72 69 6E 67 20 54 65
             78 74 20 4D 61 78 20
             48 55 42
      0007AB 00                    5186 	.db 0x00
                                   5187 	.area CSEG    (CODE)
                                   5188 	.area CONST   (CODE)
      0007AC                       5189 ___str_60:
      0007AC 0A                    5190 	.db 0x0a
      0007AD 0D                    5191 	.db 0x0d
      0007AE 1B                    5192 	.db 0x1b
      0007AF 5B 33 38 3B 35 3B 32  5193 	.ascii "[38;5;214mCONFIDENCE = %u"
             31 34 6D 43 4F 4E 46
             49 44 45 4E 43 45 20
             3D 20 25 75
      0007C8 00                    5194 	.db 0x00
                                   5195 	.area CSEG    (CODE)
                                   5196 	.area CONST   (CODE)
      0007C9                       5197 ___str_61:
      0007C9 0A                    5198 	.db 0x0a
      0007CA 0D                    5199 	.db 0x0d
      0007CB 1B                    5200 	.db 0x1b
      0007CC 5B 33 38 3B 35 3B 32  5201 	.ascii "[38;5;214mIR LED = %lu"
             31 34 6D 49 52 20 4C
             45 44 20 3D 20 25 6C
             75
      0007E2 00                    5202 	.db 0x00
                                   5203 	.area CSEG    (CODE)
                                   5204 	.area CONST   (CODE)
      0007E3                       5205 ___str_62:
      0007E3 0A                    5206 	.db 0x0a
      0007E4 0D                    5207 	.db 0x0d
      0007E5 1B                    5208 	.db 0x1b
      0007E6 5B 33 38 3B 35 3B 32  5209 	.ascii "[38;5;214mRED LED = %lu"
             31 34 6D 52 45 44 20
             4C 45 44 20 3D 20 25
             6C 75
      0007FD 00                    5210 	.db 0x00
                                   5211 	.area CSEG    (CODE)
                                   5212 	.area CONST   (CODE)
      0007FE                       5213 ___str_63:
      0007FE 0A                    5214 	.db 0x0a
      0007FF 0D                    5215 	.db 0x0d
      000800 1B                    5216 	.db 0x1b
      000801 5B 33 38 3B 35 3B 32  5217 	.ascii "[38;5;214mHEART-RATE = %u"
             31 34 6D 48 45 41 52
             54 2D 52 41 54 45 20
             3D 20 25 75
      00081A 00                    5218 	.db 0x00
                                   5219 	.area CSEG    (CODE)
                                   5220 	.area CONST   (CODE)
      00081B                       5221 ___str_64:
      00081B 0A                    5222 	.db 0x0a
      00081C 0D                    5223 	.db 0x0d
      00081D 1B                    5224 	.db 0x1b
      00081E 5B 33 38 3B 35 3B 32  5225 	.ascii "[38;5;214mOXYGEN = %u"
             31 34 6D 4F 58 59 47
             45 4E 20 3D 20 25 75
      000833 00                    5226 	.db 0x00
                                   5227 	.area CSEG    (CODE)
                                   5228 	.area CONST   (CODE)
      000834                       5229 ___str_65:
      000834 0A                    5230 	.db 0x0a
      000835 0D                    5231 	.db 0x0d
      000836 1B                    5232 	.db 0x1b
      000837 5B 33 38 3B 35 3B 32  5233 	.ascii "[38;5;214mrValue = %f"
             31 34 6D 72 56 61 6C
             75 65 20 3D 20 25 66
      00084C 00                    5234 	.db 0x00
                                   5235 	.area CSEG    (CODE)
                                   5236 	.area CONST   (CODE)
      00084D                       5237 ___str_66:
      00084D 0A                    5238 	.db 0x0a
      00084E 0D                    5239 	.db 0x0d
      00084F 1B                    5240 	.db 0x1b
      000850 5B 33 38 3B 35 3B 32  5241 	.ascii "[38;5;214mExtended Status = %u"
             31 34 6D 45 78 74 65
             6E 64 65 64 20 53 74
             61 74 75 73 20 3D 20
             25 75
      00086E 00                    5242 	.db 0x00
                                   5243 	.area CSEG    (CODE)
                                   5244 	.area XINIT   (CODE)
                                   5245 	.area CABS    (ABS,CODE)
